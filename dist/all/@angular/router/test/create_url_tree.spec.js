/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
var create_url_tree_1 = require('../src/create_url_tree');
var router_state_1 = require('../src/router_state');
var shared_1 = require('../src/shared');
var url_tree_1 = require('../src/url_tree');
describe('createUrlTree', function () {
    var serializer = new url_tree_1.DefaultUrlSerializer();
    it('should navigate to the root', function () {
        var p = serializer.parse('/');
        var t = createRoot(p, ['/']);
        expect(serializer.serialize(t)).toEqual('/');
    });
    it('should error when navigating to the root segment with params', function () {
        var p = serializer.parse('/');
        expect(function () { return createRoot(p, ['/', { p: 11 }]); })
            .toThrowError(/Root segment cannot have matrix parameters/);
    });
    it('should support nested segments', function () {
        var p = serializer.parse('/a/b');
        var t = createRoot(p, ['/one', 11, 'two', 22]);
        expect(serializer.serialize(t)).toEqual('/one/11/two/22');
    });
    it('should stringify positional parameters', function () {
        var p = serializer.parse('/a/b');
        var t = createRoot(p, ['/one', 11]);
        var params = t.root.children[shared_1.PRIMARY_OUTLET].pathsWithParams;
        expect(params[0].path).toEqual('one');
        expect(params[1].path).toEqual('11');
    });
    it('should preserve secondary segments', function () {
        var p = serializer.parse('/a/11/b(right:c)');
        var t = createRoot(p, ['/a', 11, 'd']);
        expect(serializer.serialize(t)).toEqual('/a/11/d(right:c)');
    });
    it('should support updating secondary segments', function () {
        var p = serializer.parse('/a(right:b)');
        var t = createRoot(p, [{ outlets: { right: ['c', 11, 'd'] } }]);
        expect(serializer.serialize(t)).toEqual('/a(right:c/11/d)');
    });
    it('should support updating secondary segments (nested case)', function () {
        var p = serializer.parse('/a/(b//right:c)');
        var t = createRoot(p, ['a', { outlets: { right: ['d', 11, 'e'] } }]);
        expect(serializer.serialize(t)).toEqual('/a/(b//right:d/11/e)');
    });
    it('should support updating using a string', function () {
        var p = serializer.parse('/a(right:b)');
        var t = createRoot(p, [{ outlets: { right: 'c/11/d' } }]);
        expect(serializer.serialize(t)).toEqual('/a(right:c/11/d)');
    });
    it('should support updating primary and secondary segments at once', function () {
        var p = serializer.parse('/a(right:b)');
        var t = createRoot(p, [{ outlets: { primary: 'y/z', right: 'c/11/d' } }]);
        expect(serializer.serialize(t)).toEqual('/y/z(right:c/11/d)');
    });
    it('should support removing primary segment', function () {
        var p = serializer.parse('/a/(b//right:c)');
        var t = createRoot(p, ['a', { outlets: { primary: null, right: 'd' } }]);
        expect(serializer.serialize(t)).toEqual('/a/(right:d)');
    });
    it('should support removing secondary segments', function () {
        var p = serializer.parse('/a(right:b)');
        var t = createRoot(p, [{ outlets: { right: null } }]);
        expect(serializer.serialize(t)).toEqual('/a');
    });
    it('should update matrix parameters', function () {
        var p = serializer.parse('/a;pp=11');
        var t = createRoot(p, ['/a', { pp: 22, dd: 33 }]);
        expect(serializer.serialize(t)).toEqual('/a;pp=22;dd=33');
    });
    it('should create matrix parameters', function () {
        var p = serializer.parse('/a');
        var t = createRoot(p, ['/a', { pp: 22, dd: 33 }]);
        expect(serializer.serialize(t)).toEqual('/a;pp=22;dd=33');
    });
    it('should create matrix parameters together with other segments', function () {
        var p = serializer.parse('/a');
        var t = createRoot(p, ['/a', '/b', { aa: 22, bb: 33 }]);
        expect(serializer.serialize(t)).toEqual('/a/b;aa=22;bb=33');
    });
    describe('relative navigation', function () {
        it('should work', function () {
            var p = serializer.parse('/a/(c//left:cp)(left:ap)');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, ['c2']);
            expect(serializer.serialize(t)).toEqual('/a/(c2//left:cp)(left:ap)');
        });
        it('should work when the first command starts with a ./', function () {
            var p = serializer.parse('/a/(c//left:cp)(left:ap)');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, ['./c2']);
            expect(serializer.serialize(t)).toEqual('/a/(c2//left:cp)(left:ap)');
        });
        it('should work when the first command is ./)', function () {
            var p = serializer.parse('/a/(c//left:cp)(left:ap)');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, ['./', 'c2']);
            expect(serializer.serialize(t)).toEqual('/a/(c2//left:cp)(left:ap)');
        });
        it('should work when given params', function () {
            var p = serializer.parse('/a/(c//left:cp)(left:ap)');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, [{ 'x': 99 }]);
            expect(serializer.serialize(t)).toEqual('/a/(c;x=99//left:cp)(left:ap)');
        });
        it('should work when index > 0', function () {
            var p = serializer.parse('/a/c');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 1, p, ['c2']);
            expect(serializer.serialize(t)).toEqual('/a/c/c2');
        });
        it('should support going to a parent (within a segment)', function () {
            var p = serializer.parse('/a/c');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 1, p, ['../c2']);
            expect(serializer.serialize(t)).toEqual('/a/c2');
        });
        it('should support setting matrix params', function () {
            var p = serializer.parse('/a/(c//left:cp)(left:ap)');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, ['../', { x: 5 }]);
            expect(serializer.serialize(t)).toEqual('/a;x=5(left:ap)');
        });
        xit('should support going to a parent (across segments)', function () {
            var p = serializer.parse('/q/(a/(c//left:cp)//left:qp)(left:ap)');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET].children[shared_1.PRIMARY_OUTLET], 0, p, ['../../q2']);
            expect(serializer.serialize(t)).toEqual('/q2(left:ap)');
        });
        it('should navigate to the root', function () {
            var p = serializer.parse('/a/c');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, ['../']);
            expect(serializer.serialize(t)).toEqual('/');
        });
        it('should work with ../ when absolute url', function () {
            var p = serializer.parse('/a/c');
            var t = create(p.root.children[shared_1.PRIMARY_OUTLET], 1, p, ['../', 'c2']);
            expect(serializer.serialize(t)).toEqual('/a/c2');
        });
        it('should work with position = -1', function () {
            var p = serializer.parse('/');
            var t = create(p.root, -1, p, ['11']);
            expect(serializer.serialize(t)).toEqual('/11');
        });
        it('should throw when too many ..', function () {
            var p = serializer.parse('/a/(c//left:cp)(left:ap)');
            expect(function () { return create(p.root.children[shared_1.PRIMARY_OUTLET], 0, p, ['../../']); })
                .toThrowError('Invalid number of \'../\'');
        });
    });
    it('should set query params', function () {
        var p = serializer.parse('/');
        var t = createRoot(p, [], { a: 'hey' });
        expect(t.queryParams).toEqual({ a: 'hey' });
    });
    it('should stringify query params', function () {
        var p = serializer.parse('/');
        var t = createRoot(p, [], { a: 1 });
        expect(t.queryParams).toEqual({ a: '1' });
    });
    it('should set fragment', function () {
        var p = serializer.parse('/');
        var t = createRoot(p, [], {}, 'fragment');
        expect(t.fragment).toEqual('fragment');
    });
});
function createRoot(tree, commands, queryParams, fragment) {
    var s = new router_state_1.ActivatedRouteSnapshot([], {}, {}, shared_1.PRIMARY_OUTLET, 'someComponent', null, tree.root, -1, null);
    var a = new router_state_1.ActivatedRoute(new BehaviorSubject_1.BehaviorSubject(null), new BehaviorSubject_1.BehaviorSubject(null), new BehaviorSubject_1.BehaviorSubject(null), shared_1.PRIMARY_OUTLET, 'someComponent', s);
    router_state_1.advanceActivatedRoute(a);
    return create_url_tree_1.createUrlTree(a, tree, commands, queryParams, fragment);
}
function create(segment, startIndex, tree, commands, queryParams, fragment) {
    if (!segment) {
        expect(segment).toBeDefined();
    }
    var s = new router_state_1.ActivatedRouteSnapshot([], {}, {}, shared_1.PRIMARY_OUTLET, 'someComponent', null, segment, startIndex, null);
    var a = new router_state_1.ActivatedRoute(new BehaviorSubject_1.BehaviorSubject(null), new BehaviorSubject_1.BehaviorSubject(null), new BehaviorSubject_1.BehaviorSubject(null), shared_1.PRIMARY_OUTLET, 'someComponent', s);
    router_state_1.advanceActivatedRoute(a);
    return create_url_tree_1.createUrlTree(a, tree, commands, queryParams, fragment);
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
var tree_1 = require('../../src/utils/tree');
describe('tree', function () {
    it('should return the root of the tree', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, []));
        expect(t.root).toEqual(1);
    });
    it('should return the parent of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.parent(1)).toEqual(null);
        expect(t.parent(2)).toEqual(1);
    });
    it('should return the children of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.children(1)).toEqual([2]);
        expect(t.children(2)).toEqual([]);
    });
    it('should return the first child of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.firstChild(1)).toEqual(2);
        expect(t.firstChild(2)).toEqual(null);
    });
    it('should return the siblings of a node', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, []), new tree_1.TreeNode(3, [])]));
        expect(t.siblings(2)).toEqual([3]);
        expect(t.siblings(1)).toEqual([]);
    });
    it('should return the path to the root', function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.pathFromRoot(2)).toEqual([1, 2]);
    });
    describe('contains', function () {
        it('should work', function () {
            var tree = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, []), new tree_1.TreeNode(3, [])]));
            var subtree1 = new tree_1.Tree(new tree_1.TreeNode(1, []));
            var subtree2 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
            var subtree3 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(3, [])]));
            var notSubtree1 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(4, [])]));
            var notSubtree2 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [new tree_1.TreeNode(4, [])])]));
            expect(tree.contains(subtree1)).toEqual(true);
            expect(tree.contains(subtree2)).toEqual(true);
            expect(tree.contains(subtree3)).toEqual(true);
            expect(tree.contains(notSubtree1)).toEqual(false);
            expect(tree.contains(notSubtree2)).toEqual(false);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9AYW5ndWxhci9yb3V0ZXIvdGVzdC91dGlscy90cmVlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILHFCQUE2QixzQkFBc0IsQ0FBQyxDQUFBO0FBRXBELFFBQVEsQ0FBQyxNQUFNLEVBQUU7SUFDZixFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNDQUFzQyxFQUFFO1FBQ3pDLElBQU0sQ0FBQyxHQUFHLElBQUksV0FBSSxDQUFNLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxDQUFDLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztR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LEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFGLElBQU0sV0FBVyxHQUFHLElBQUksV0FBSSxDQUN4QixJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXZGLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
var collection_1 = require('../src/collection');
function main() {
    describe('ListWrapper', function () {
        var l;
        describe('splice', function () {
            it('should remove sublist of given length and return it', function () {
                var list = [1, 2, 3, 4, 5, 6];
                expect(collection_1.ListWrapper.splice(list, 1, 3)).toEqual([2, 3, 4]);
                expect(list).toEqual([1, 5, 6]);
            });
            it('should support negative start', function () {
                var list = [1, 2, 3, 4, 5, 6];
                expect(collection_1.ListWrapper.splice(list, -5, 3)).toEqual([2, 3, 4]);
                expect(list).toEqual([1, 5, 6]);
            });
        });
        describe('fill', function () {
            beforeEach(function () { l = [1, 2, 3, 4]; });
            it('should fill the whole list if neither start nor end are specified', function () {
                collection_1.ListWrapper.fill(l, 9);
                expect(l).toEqual([9, 9, 9, 9]);
            });
            it('should fill up to the end if end is not specified', function () {
                collection_1.ListWrapper.fill(l, 9, 1);
                expect(l).toEqual([1, 9, 9, 9]);
            });
            it('should support negative start', function () {
                collection_1.ListWrapper.fill(l, 9, -1);
                expect(l).toEqual([1, 2, 3, 9]);
            });
            it('should support negative end', function () {
                collection_1.ListWrapper.fill(l, 9, -2, -1);
                expect(l).toEqual([1, 2, 9, 4]);
            });
        });
        describe('slice', function () {
            beforeEach(function () { l = [1, 2, 3, 4]; });
            it('should return the whole list if neither start nor end are specified', function () {
                expect(collection_1.ListWrapper.slice(l)).toEqual([1, 2, 3, 4]);
            });
            it('should return up to the end if end is not specified', function () {
                expect(collection_1.ListWrapper.slice(l, 1)).toEqual([2, 3, 4]);
            });
            it('should support negative start', function () { expect(collection_1.ListWrapper.slice(l, -1)).toEqual([4]); });
            it('should support negative end', function () {
                expect(collection_1.ListWrapper.slice(l, -3, -1)).toEqual([2, 3]);
            });
            it('should return empty list if start is greater than end', function () {
                expect(collection_1.ListWrapper.slice(l, 4, 2)).toEqual([]);
                expect(collection_1.ListWrapper.slice(l, -2, -4)).toEqual([]);
            });
        });
        describe('indexOf', function () {
            beforeEach(function () { l = [1, 2, 3, 4]; });
            it('should find values that exist', function () { expect(collection_1.ListWrapper.indexOf(l, 1)).toEqual(0); });
            it('should not find values that do not exist', function () { expect(collection_1.ListWrapper.indexOf(l, 9)).toEqual(-1); });
            it('should respect the startIndex parameter', function () { expect(collection_1.ListWrapper.indexOf(l, 1, 1)).toEqual(-1); });
        });
        describe('maximum', function () {
            it('should return the maximal element', function () {
                expect(collection_1.ListWrapper.maximum([1, 2, 3, 4], function (x) { return x; })).toEqual(4);
            });
            it('should ignore null values', function () {
                expect(collection_1.ListWrapper.maximum([null, 2, 3, null], function (x) { return x; })).toEqual(3);
            });
            it('should use the provided function to determine maximum', function () {
                expect(collection_1.ListWrapper.maximum([1, 2, 3, 4], function (x) { return -x; })).toEqual(1);
            });
            it('should return null for an empty list', function () { expect(collection_1.ListWrapper.maximum([], function (x) { return x; })).toEqual(null); });
        });
        describe('forEachWithIndex', function () {
            var l;
            beforeEach(function () { l = ['a', 'b']; });
            it('should iterate over an array passing values and indices', function () {
                var record = [];
                collection_1.ListWrapper.forEachWithIndex(l, function (value, index) { return record.push([value, index]); });
                expect(record).toEqual([['a', 0], ['b', 1]]);
            });
        });
    });
    describe('StringMapWrapper', function () {
        describe('equals', function () {
            it('should return true when comparing empty maps', function () { expect(collection_1.StringMapWrapper.equals({}, {})).toBe(true); });
            it('should return true when comparing the same map', function () {
                var m1 = { 'a': 1, 'b': 2, 'c': 3 };
                expect(collection_1.StringMapWrapper.equals(m1, m1)).toBe(true);
            });
            it('should return true when comparing different maps with the same keys and values', function () {
                var m1 = { 'a': 1, 'b': 2, 'c': 3 };
                var m2 = { 'a': 1, 'b': 2, 'c': 3 };
                expect(collection_1.StringMapWrapper.equals(m1, m2)).toBe(true);
            });
            it('should return false when comparing maps with different numbers of keys', function () {
                var m1 = { 'a': 1, 'b': 2, 'c': 3 };
                var m2 = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };
                expect(collection_1.StringMapWrapper.equals(m1, m2)).toBe(false);
                expect(collection_1.StringMapWrapper.equals(m2, m1)).toBe(false);
            });
            it('should return false when comparing maps with different keys', function () {
                var m1 = { 'a': 1, 'b': 2, 'c': 3 };
                var m2 = { 'a': 1, 'b': 2, 'CC': 3 };
                expect(collection_1.StringMapWrapper.equals(m1, m2)).toBe(false);
                expect(collection_1.StringMapWrapper.equals(m2, m1)).toBe(false);
            });
            it('should return false when comparing maps with different values', function () {
                var m1 = { 'a': 1, 'b': 2, 'c': 3 };
                var m2 = { 'a': 1, 'b': 20, 'c': 3 };
                expect(collection_1.StringMapWrapper.equals(m1, m2)).toBe(false);
                expect(collection_1.StringMapWrapper.equals(m2, m1)).toBe(false);
            });
        });
        describe('MapWrapper', function () {
            it('should return a list of keys values', function () {
                var m = new Map();
                m.set('a', 'b');
                expect(collection_1.MapWrapper.keys(m)).toEqual(['a']);
                expect(collection_1.MapWrapper.values(m)).toEqual(['b']);
            });
        });
    });
}
exports.main = main;
//# sourceMappingURL=data:application/json;base64,
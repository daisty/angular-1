{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../tools/tsc-watch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {spawn} from 'child_process';\nimport {existsSync, mkdirSync, writeFileSync} from 'fs';\n\nimport {TSC, TscWatch, reportError} from './tsc_watch';\n\nexport * from './tsc_watch';\nimport 'reflect-metadata';\n\nconst OFFLINE_COMPILE =\n    ['output/output_emitter_codegen_untyped', 'output/output_emitter_codegen_typed'];\n\nfunction processOutputEmitterCodeGen(): Promise<number> {\n  return new Promise((resolve, reject) => {\n           var outDir = 'dist/all/@angular/compiler/test/';\n           var promises: Promise<any>[] = [];\n           console.log('Processing codegen...');\n           OFFLINE_COMPILE.forEach((file: string) => {\n             var codegen = require('../../all/@angular/compiler/test/' + file + '.js');\n             if (codegen.emit) {\n               console.log(`  ${file} has changed, regenerating...`);\n               promises.push(Promise.resolve(codegen.emit()).then((code) => {\n                 writeFileSync(outDir + file + '.ts', code);\n               }));\n             }\n           });\n           if (promises.length) {\n             Promise.all(promises)\n                 .then(() => {\n                   var args =\n                       ['--project', 'tools/cjs-jasmine/tsconfig-output_emitter_codegen.json'];\n                   console.log('    compiling changes: tsc ' + args.join(' '));\n                   var tsc = spawn(TSC, args, {stdio: 'pipe'});\n                   tsc.stdout.on('data', (data: any) => process.stdout.write(data));\n                   tsc.stderr.on('data', (data: any) => process.stderr.write(data));\n                   tsc.on(\n                       'close',\n                       (code: any) => code ? reject('Tsc exited with: ' + code) : resolve(code));\n                 })\n                 .catch(reportError);\n           } else {\n             resolve(0);\n           }\n         })\n      .catch(reportError);\n}\n\nfunction md(dir: string, folders: string[]) {\n  if (folders.length) {\n    var next = folders.shift();\n    var path = dir + '/' + next;\n    if (!existsSync(path)) {\n      mkdirSync(path);\n    }\n    md(path, folders);\n  }\n}\n\nvar tscWatch: TscWatch = null;\nvar platform = process.argv.length >= 3 ? process.argv[2] : null;\nvar runMode: string = process.argv.length >= 4 ? process.argv[3] : null;\n\nif (platform == 'node') {\n  tscWatch = new TscWatch({\n    tsconfig: 'modules/tsconfig.json',\n    start: 'File change detected. Starting incremental compilation...',\n    error: 'error',\n    complete: 'Compilation complete. Watching for file changes.',\n    onChangeCmds: [\n      processOutputEmitterCodeGen,\n      [\n        'node', 'dist/tools/cjs-jasmine', '--', '{@angular,benchpress}/**/*_spec.js',\n        '@angular/compiler-cli/test/**/*_spec.js'\n      ]\n    ]\n  });\n} else if (platform == 'browser') {\n  tscWatch = new TscWatch({\n    tsconfig: 'modules/tsconfig.json',\n    start: 'File change detected. Starting incremental compilation...',\n    error: 'error',\n    complete: 'Compilation complete. Watching for file changes.',\n    onStartCmds: [\n      [\n        'node', 'node_modules/karma/bin/karma', 'start', '--no-auto-watch', '--port=9876',\n        'karma-js.conf.js'\n      ],\n      [\n        'node', 'node_modules/karma/bin/karma', 'start', '--no-auto-watch', '--port=9877',\n        'modules/@angular/router/karma.conf.js'\n      ],\n    ],\n    onChangeCmds: [\n      ['node', 'node_modules/karma/bin/karma', 'run', 'karma-js.conf.js', '--port=9876'],\n      ['node', 'node_modules/karma/bin/karma', 'run', '--port=9877'],\n    ]\n  });\n} else if (platform == 'tools') {\n  tscWatch = new TscWatch({\n    tsconfig: 'tools/tsconfig.json',\n    start: 'File change detected. Starting incremental compilation...',\n    error: 'error',\n    complete: 'Compilation complete. Watching for file changes.',\n    onChangeCmds: [[\n      'node', 'dist/tools/cjs-jasmine/index-tools', '--', '@angular/tsc-wrapped/**/*{_,.}spec.js'\n    ]]\n  });\n} else {\n  throw new Error(`unknown platform: ${platform}`);\n}\n\nif (runMode === 'watch') {\n  tscWatch.watch();\n} else if (runMode === 'runCmdsOnly') {\n  tscWatch.runCmdsOnly();\n} else {\n  tscWatch.run();\n}\n"]}
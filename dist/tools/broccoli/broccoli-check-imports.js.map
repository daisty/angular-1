{"version":3,"file":"broccoli-check-imports.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-check-imports.ts"],"names":[],"mappings":";AAAA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAE1B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,wCAAmE,2BAA2B,CAAC,CAAA;AAE/F;;;;GAIG;AACH;IAoBE,sBAAoB,SAAiB,EAAU,SAAiB,EAAU,OAAe;QAArE,cAAS,GAAT,SAAS,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAQ;QAFjF,YAAO,GAAG,IAAI,CAAC;IAEqE,CAAC;IAE7F,8BAAO,GAAP,UAAQ,QAAoB;QAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,IAAI,KAAK,CACX,kFAAgF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;QAC3G,CAAC;QACD,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACpC,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,oCAAa,GAArB,UAAsB,QAAoB;QAA1C,iBAGC;QAFC,IAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAArB,CAAqB,CAAC,CAAC;IAC3D,CAAC;IAEO,mDAA4B,GAApC;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC7B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAEO,oCAAa,GAArB,UAAsB,QAAgB;QAAtC,iBAaC;QAZC,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC3D,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACrE,IAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACzD,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAlC,CAAkC,CAAC;qBACzD,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;YAC/C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,EAAE,CAAC;YACZ,CAAC;QACH,CAAC;QACD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAEO,sCAAe,GAAvB,UAAwB,UAAkB,EAAE,UAAkB;QAC5D,IAAM,GAAG,GAAG,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC,CAAE,iBAAiB;QAC3D,IAAM,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QAE1B,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE/E,IAAM,CAAC,GAAG,YAAY,CAAC,eAAe,CAAC;QACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3D,IAAM,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC7B,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC;oBAC/B,YAAY,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YACrE,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,kCAAW,GAAnB,UAAoB,QAAgB,EAAE,UAAkB;QACtD,IAAM,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,CAAI,QAAQ,UAAK,CAAG,CAAC;IAC7B,CAAC;IAjFM,+BAAkB,GAAG,IAAI,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IACvD,+BAAkB,GAAG,IAAI,MAAM,CAAC,sBAAmB,EAAE,GAAG,CAAC,CAAC;IAE1D,4BAAe,GAA4B;QAChD,mBAAmB,EAAE,CAAC,qBAAqB,CAAC;QAC5C,qBAAqB,EAAE,CAAC,MAAM,CAAC;QAC/B,qBAAqB,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;QAC/D,mBAAmB,EAAE,CAAC,eAAe,EAAE,qBAAqB,EAAE,MAAM,CAAC;QACrE,sBAAsB,EAClB,CAAC,eAAe,EAAE,qBAAqB,EAAE,2BAA2B,EAAE,mBAAmB,CAAC;KAM/F,CAAC;IAmEJ,mBAAC;AAAD,CAAC,AAnFD,IAmFC;AAGD,oBAAoB,GAAW,EAAE,SAAiB;IAChD,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC;AAC1D,CAAC;AAED,kBAAkB,GAAW,EAAE,SAAiB;IAC9C,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACtE,CAAC;AAED,iBAAuB,GAAQ,EAAE,EAAiB;IAChD,MAAM,CAAC,MAAA,EAAE,EAAC,MAAM,WAAI,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;AACnC,CAAC;AAED;kBAAe,2CAAiB,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\n/**\n * Checks that modules do not import files that are not supposed to import.\n *\n * This guarantees that platform-independent modules remain platoform-independent.\n */\nclass CheckImports implements DiffingBroccoliPlugin {\n  static IMPORT_DECL_REGEXP = new RegExp(`^import[^;]+;`, 'mg');\n  static IMPORT_PATH_REGEXP = new RegExp(`['\"]([^'\"]+)+['\"]`, 'm');\n\n  static ALLOWED_IMPORTS: {[s: string]: string[]} = {\n    'angular2/src/core': ['angular2/src/facade'],\n    'angular2/src/facade': ['rxjs'],\n    'angular2/src/common': ['angular2/core', 'angular2/src/facade'],\n    'angular2/src/http': ['angular2/core', 'angular2/src/facade', 'rxjs'],\n    'angular2/src/upgrade':\n        ['angular2/core', 'angular2/src/facade', 'angular2/platform/browser', 'angular2/compiler']\n    //\"angular2/src/render\": [\n    //  \"angular2/animate\",\n    //  \"angular2/core\",\n    //  \"angular2/src/facade\",\n    //]\n  };\n\n  private initRun = true;\n\n  constructor(private inputPath: string, private cachePath: string, private options: number) {}\n\n  rebuild(treeDiff: DiffResult) {\n    const errors = this.checkAllPaths(treeDiff);\n    if (errors.length > 0) {\n      throw new Error(\n          `The following imports are not allowed because they break barrel boundaries:\\n${errors.join(\"\\n\")}`);\n    }\n    this.symlinkInputAndCacheIfNeeded();\n    return treeDiff;\n  }\n\n  private checkAllPaths(treeDiff: DiffResult) {\n    const changesFiles = treeDiff.addedPaths.concat(treeDiff.changedPaths);\n    return flatMap(changesFiles, _ => this.checkFilePath(_));\n  }\n\n  private symlinkInputAndCacheIfNeeded() {\n    if (this.initRun) {\n      fs.rmdirSync(this.cachePath);\n      fs.symlinkSync(this.inputPath, this.cachePath);\n    }\n    this.initRun = false;\n  }\n\n  private checkFilePath(filePath: string) {\n    const sourceFilePath = path.join(this.inputPath, filePath);\n    if (endsWith(sourceFilePath, '.ts') && fs.existsSync(sourceFilePath)) {\n      const content = fs.readFileSync(sourceFilePath, 'UTF-8');\n      const imports = content.match(CheckImports.IMPORT_DECL_REGEXP);\n      if (imports) {\n        return imports.filter(i => !this.isAllowedImport(filePath, i))\n            .map(i => this.formatError(filePath, i));\n      } else {\n        return [];\n      }\n    }\n    return [];\n  }\n\n  private isAllowedImport(sourceFile: string, importDecl: string): boolean {\n    const res = CheckImports.IMPORT_PATH_REGEXP.exec(importDecl);\n    if (!res || res.length < 2) return true;  // non-es6 import\n    const importPath = res[1];\n\n    if (startsWith(importPath, './') || startsWith(importPath, '../')) return true;\n\n    const c = CheckImports.ALLOWED_IMPORTS;\n    for (var prop in c) {\n      if (c.hasOwnProperty(prop) && startsWith(sourceFile, prop)) {\n        const allowedPaths = c[prop];\n        return startsWith(importPath, prop) ||\n            allowedPaths.filter(p => startsWith(importPath, p)).length > 0;\n      }\n    }\n\n    return true;\n  }\n\n  private formatError(filePath: string, importPath: string): string {\n    const i = importPath.replace(new RegExp(`\\n`, 'g'), '\\\\n');\n    return `${filePath}: ${i}`;\n  }\n}\n\n\nfunction startsWith(str: string, substring: string): boolean {\n  return str.substring(0, substring.length) === substring;\n}\n\nfunction endsWith(str: string, substring: string): boolean {\n  return str.indexOf(substring, str.length - substring.length) !== -1;\n}\n\nfunction flatMap<T, U>(arr: T[], fn: (t: T) => U[]): U[] {\n  return [].concat(...arr.map(fn));\n}\n\nexport default wrapDiffingPlugin(CheckImports);\n"]}
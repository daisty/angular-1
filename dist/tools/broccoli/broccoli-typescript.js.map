{"version":3,"file":"broccoli-typescript.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-typescript.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport * as ts from 'typescript';\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\nimport {MetadataCollector} from '../@angular/tsc-wrapped';\n\ntype FileRegistry = ts.Map<{version: number}>;\n\nconst FS_OPTS = {\n  encoding: 'utf-8'\n};\n\n// Sub-directory where the @internal typing files (.d.ts) are stored\nexport const INTERNAL_TYPINGS_PATH: string = 'internal_typings';\n\n// Monkey patch the TS compiler to be able to re-emit files with @internal symbols\nlet tsEmitInternal: boolean = false;\n\nconst originalEmitFiles: Function = (<any>ts).emitFiles;\n\n(<any>ts).emitFiles = function(resolver: any, host: any, targetSourceFile: any): any {\n  if (tsEmitInternal) {\n    const orignalgetCompilerOptions = host.getCompilerOptions;\n    host.getCompilerOptions = () => {\n      let options = clone(orignalgetCompilerOptions.call(host));\n      options.stripInternal = false;\n      options.outDir = `${options.outDir}/${INTERNAL_TYPINGS_PATH}`;\n      return options;\n    }\n  }\n  return originalEmitFiles(resolver, host, targetSourceFile);\n};\n\n/**\n * Broccoli plugin that implements incremental Typescript compiler.\n *\n * It instantiates a typescript compiler instance that keeps all the state about the project and\n * can re-emit only the files that actually changed.\n *\n * Limitations: only files that map directly to the changed source file via naming conventions are\n * re-emitted. This primarily affects code that uses `const enum`s, because changing the enum value\n * requires global emit, which can affect many files.\n */\nclass DiffingTSCompiler implements DiffingBroccoliPlugin {\n  private tsOpts: ts.CompilerOptions;\n  private fileRegistry: FileRegistry = Object.create(null);\n  private rootFilePaths: string[];\n  private tsServiceHost: ts.LanguageServiceHost;\n  private tsService: ts.LanguageService;\n  private metadataCollector: MetadataCollector;\n  private firstRun: boolean = true;\n  private previousRunFailed: boolean = false;\n  // Whether to generate the @internal typing files (they are only generated when `stripInternal` is\n  // true)\n  private genInternalTypings: boolean = false;\n\n  static includeExtensions = ['.ts'];\n\n  constructor(public inputPath: string, public cachePath: string, public options: any) {\n    // TODO: define an interface for options\n    if (options.rootFilePaths) {\n      this.rootFilePaths = options.rootFilePaths.splice(0);\n      delete options.rootFilePaths;\n    } else {\n      this.rootFilePaths = [];\n    }\n\n    if (options.internalTypings) {\n      this.genInternalTypings = true;\n      delete options.internalTypings;\n    }\n\n    // the conversion is a bit awkward, see https://github.com/Microsoft/TypeScript/issues/5276\n    // in 1.8 use convertCompilerOptionsFromJson\n    this.tsOpts =\n        ts.parseJsonConfigFileContent({compilerOptions: options, files: []}, null, null).options;\n\n    if ((<any>this.tsOpts).stripInternal === false) {\n      // @internal are included in the generated .d.ts, do not generate them separately\n      this.genInternalTypings = false;\n    }\n\n    this.tsOpts.rootDir = inputPath;\n    this.tsOpts.baseUrl = inputPath;\n    this.tsOpts.outDir = this.cachePath;\n\n    this.tsServiceHost = new CustomLanguageServiceHost(\n        this.tsOpts, this.rootFilePaths, this.fileRegistry, this.inputPath);\n    this.tsService = ts.createLanguageService(this.tsServiceHost, ts.createDocumentRegistry());\n    this.metadataCollector = new MetadataCollector();\n  }\n\n\n  rebuild(treeDiff: DiffResult) {\n    let pathsToEmit: string[] = [];\n    let pathsWithErrors: string[] = [];\n    let errorMessages: string[] = [];\n\n    treeDiff.addedPaths.concat(treeDiff.changedPaths).forEach((tsFilePath) => {\n      if (!this.fileRegistry[tsFilePath]) {\n        this.fileRegistry[tsFilePath] = {version: 0};\n        this.rootFilePaths.push(tsFilePath);\n      } else {\n        this.fileRegistry[tsFilePath].version++;\n      }\n\n      pathsToEmit.push(path.join(this.inputPath, tsFilePath));\n    });\n\n    treeDiff.removedPaths.forEach((tsFilePath) => {\n      console.log('removing outputs for', tsFilePath);\n\n      this.rootFilePaths.splice(this.rootFilePaths.indexOf(tsFilePath), 1);\n      this.fileRegistry[tsFilePath] = null;\n      this.removeOutputFor(tsFilePath);\n    });\n\n    if (this.firstRun) {\n      this.firstRun = false;\n      this.doFullBuild();\n    } else {\n      let program = this.tsService.getProgram();\n      tsEmitInternal = false;\n      pathsToEmit.forEach((tsFilePath) => {\n        let output = this.tsService.getEmitOutput(tsFilePath);\n\n        if (output.emitSkipped) {\n          let errorFound = this.collectErrors(tsFilePath);\n          if (errorFound) {\n            pathsWithErrors.push(tsFilePath);\n            errorMessages.push(errorFound);\n          }\n        } else {\n          output.outputFiles.forEach(o => {\n            let destDirPath = path.dirname(o.name);\n            fse.mkdirsSync(destDirPath);\n            fs.writeFileSync(o.name, this.fixSourceMapSources(o.text), FS_OPTS);\n            if (endsWith(o.name, '.d.ts')) {\n              const sourceFile = program.getSourceFile(tsFilePath);\n              this.emitMetadata(o.name, sourceFile);\n            }\n          });\n        }\n      });\n\n      if (pathsWithErrors.length) {\n        this.previousRunFailed = true;\n        var error =\n            new Error('Typescript found the following errors:\\n' + errorMessages.join('\\n'));\n        (<any>error)['showStack'] = false;\n        throw error;\n      } else if (this.previousRunFailed) {\n        this.doFullBuild();\n      } else if (this.genInternalTypings) {\n        // serialize the .d.ts files containing @internal symbols\n        tsEmitInternal = true;\n        pathsToEmit.forEach((tsFilePath) => {\n          let output = this.tsService.getEmitOutput(tsFilePath);\n          if (!output.emitSkipped) {\n            output.outputFiles.forEach(o => {\n              if (endsWith(o.name, '.d.ts')) {\n                let destDirPath = path.dirname(o.name);\n                fse.mkdirsSync(destDirPath);\n                fs.writeFileSync(o.name, this.fixSourceMapSources(o.text), FS_OPTS);\n              }\n            });\n          }\n        });\n        tsEmitInternal = false;\n      }\n    }\n  }\n\n  private collectErrors(tsFilePath: string): string {\n    let allDiagnostics = this.tsService.getCompilerOptionsDiagnostics()\n                             .concat(this.tsService.getSyntacticDiagnostics(tsFilePath))\n                             .concat(this.tsService.getSemanticDiagnostics(tsFilePath));\n    let errors: string[] = [];\n\n    allDiagnostics.forEach(diagnostic => {\n      let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n      if (diagnostic.file) {\n        let {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n        errors.push(`  ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);\n      } else {\n        errors.push(`  Error: ${message}`);\n      }\n    });\n\n    if (errors.length) {\n      return errors.join('\\n');\n    }\n  }\n\n  private doFullBuild() {\n    let program = this.tsService.getProgram();\n    let typeChecker = program.getTypeChecker();\n    let diagnostics: ts.Diagnostic[] = [];\n    tsEmitInternal = false;\n\n    let emitResult = program.emit(undefined, (absoluteFilePath, fileContent) => {\n      fse.mkdirsSync(path.dirname(absoluteFilePath));\n      fs.writeFileSync(absoluteFilePath, this.fixSourceMapSources(fileContent), FS_OPTS);\n      if (endsWith(absoluteFilePath, '.d.ts')) {\n        // TODO: Use sourceFile from the callback if\n        //   https://github.com/Microsoft/TypeScript/issues/7438\n        // is taken\n        const originalFile = absoluteFilePath.replace(this.tsOpts.outDir, this.tsOpts.rootDir)\n                                 .replace(/\\.d\\.ts$/, '.ts');\n        const sourceFile = program.getSourceFile(originalFile);\n        this.emitMetadata(absoluteFilePath, sourceFile);\n      }\n    });\n\n    if (this.genInternalTypings) {\n      // serialize the .d.ts files containing @internal symbols\n      tsEmitInternal = true;\n      program.emit(undefined, (absoluteFilePath, fileContent) => {\n        if (endsWith(absoluteFilePath, '.d.ts')) {\n          fse.mkdirsSync(path.dirname(absoluteFilePath));\n          fs.writeFileSync(absoluteFilePath, fileContent, FS_OPTS);\n        }\n      });\n      tsEmitInternal = false;\n    }\n\n    if (emitResult.emitSkipped) {\n      let allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);\n      let errorMessages: string[] = [];\n\n      allDiagnostics.forEach(diagnostic => {\n        var pos = '';\n        if (diagnostic.file) {\n          var {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n          pos = `${diagnostic.file.fileName} (${line + 1}, ${character + 1}): `\n        }\n        var message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n        errorMessages.push(`  ${pos}${message}`);\n      });\n\n      if (errorMessages.length) {\n        this.previousRunFailed = true;\n        var error =\n            new Error('Typescript found the following errors:\\n' + errorMessages.join('\\n'));\n        (<any>error)['showStack'] = false;\n        throw error;\n      } else {\n        this.previousRunFailed = false;\n      }\n    }\n  }\n\n  /**\n   * Emit a .metadata.json file to correspond to the .d.ts file if the module contains classes that\n   * use decorators or exported constants.\n   */\n  private emitMetadata(dtsFileName: string, sourceFile: ts.SourceFile) {\n    if (sourceFile) {\n      const metadata = this.metadataCollector.getMetadata(sourceFile);\n      if (metadata && metadata.metadata) {\n        const metadataText = JSON.stringify(metadata);\n        const metadataFileName = dtsFileName.replace(/\\.d.ts$/, '.metadata.json');\n        fs.writeFileSync(metadataFileName, metadataText, FS_OPTS);\n      }\n    }\n  }\n\n  /**\n   * There is a bug in TypeScript 1.6, where the sourceRoot and inlineSourceMap properties\n   * are exclusive. This means that the sources property always contains relative paths\n   * (e.g, ../../../../angular2/src/di/injector.ts).\n   *\n   * Here, we normalize the sources property and remove the ../../../\n   *\n   * This issue is fixed in https://github.com/Microsoft/TypeScript/pull/5620.\n   * Once we switch to TypeScript 1.8, we can remove this method.\n   */\n  private fixSourceMapSources(content: string): string {\n    try {\n      const marker = '//# sourceMappingURL=data:application/json;base64,';\n      const index = content.indexOf(marker);\n      if (index == -1) return content;\n\n      const base = content.substring(0, index + marker.length);\n      const sourceMapBit =\n          new Buffer(content.substring(index + marker.length), 'base64').toString('utf8');\n      const sourceMaps = JSON.parse(sourceMapBit);\n      const source = sourceMaps.sources[0];\n      sourceMaps.sources = [source.substring(source.lastIndexOf('../') + 3)];\n      return `${base}${new Buffer(JSON.stringify(sourceMaps)).toString('base64')}`;\n    } catch (e) {\n      return content;\n    }\n  }\n\n  private removeOutputFor(tsFilePath: string) {\n    let absoluteJsFilePath = path.join(this.cachePath, tsFilePath.replace(/\\.ts$/, '.js'));\n    let absoluteMapFilePath = path.join(this.cachePath, tsFilePath.replace(/.ts$/, '.js.map'));\n    let absoluteDtsFilePath = path.join(this.cachePath, tsFilePath.replace(/\\.ts$/, '.d.ts'));\n\n    if (fs.existsSync(absoluteJsFilePath)) {\n      fs.unlinkSync(absoluteJsFilePath);\n      if (fs.existsSync(absoluteMapFilePath)) {\n        // source map could be inline or not generated\n        fs.unlinkSync(absoluteMapFilePath);\n      }\n      fs.unlinkSync(absoluteDtsFilePath);\n    }\n  }\n}\n\n\nclass CustomLanguageServiceHost implements ts.LanguageServiceHost {\n  private currentDirectory: string;\n  private defaultLibFilePath: string;\n\n\n  constructor(\n      private compilerOptions: ts.CompilerOptions, private fileNames: string[],\n      private fileRegistry: FileRegistry, private treeInputPath: string) {\n    this.currentDirectory = process.cwd();\n    this.defaultLibFilePath = ts.getDefaultLibFilePath(compilerOptions).replace(/\\\\/g, '/');\n  }\n\n\n  getScriptFileNames(): string[] {\n    return this.fileNames.map(f => path.join(this.treeInputPath, f));\n  }\n\n\n  getScriptVersion(fileName: string): string {\n    if (startsWith(fileName, this.treeInputPath)) {\n      const key = fileName.substr(this.treeInputPath.length + 1);\n      return this.fileRegistry[key] && this.fileRegistry[key].version.toString();\n    }\n  }\n\n\n  getScriptSnapshot(tsFilePath: string): ts.IScriptSnapshot {\n    // TypeScript seems to request lots of bogus paths during import path lookup and resolution,\n    // so we we just return undefined when the path is not correct.\n\n    // Ensure it is in the input tree or a lib.d.ts file.\n    if (!startsWith(tsFilePath, this.treeInputPath) && !tsFilePath.match(/\\/lib(\\..*)*.d\\.ts$/)) {\n      if (fs.existsSync(tsFilePath)) {\n        console.log('Rejecting', tsFilePath, '. File is not in the input tree.');\n      }\n      return undefined;\n    }\n\n    // Ensure it exists\n    if (!fs.existsSync(tsFilePath)) {\n      return undefined;\n    }\n\n    return ts.ScriptSnapshot.fromString(fs.readFileSync(tsFilePath, FS_OPTS));\n  }\n\n\n  getCurrentDirectory(): string { return this.currentDirectory; }\n\n  getCompilationSettings(): ts.CompilerOptions { return this.compilerOptions; }\n\n  getDefaultLibFileName(options: ts.CompilerOptions): string {\n    // ignore options argument, options should not change during the lifetime of the plugin\n    return this.defaultLibFilePath;\n  }\n}\n\nexport default wrapDiffingPlugin(DiffingTSCompiler);\n\nfunction clone<T>(object: T): T {\n  const result: any = {};\n  for (const id in object) {\n    result[id] = (<any>object)[id];\n  }\n  return <T>result;\n}\n\nfunction startsWith(str: string, substring: string): boolean {\n  return str.substring(0, substring.length) === substring;\n}\n\nfunction endsWith(str: string, substring: string): boolean {\n  return str.indexOf(substring, str.length - substring.length) !== -1;\n}\n"]}
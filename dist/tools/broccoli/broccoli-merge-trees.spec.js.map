{"version":3,"file":"broccoli-merge-trees.spec.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-merge-trees.spec.ts"],"names":[],"mappings":"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","sourcesContent":["let mockfs = require('mock-fs');\nimport fs = require('fs');\nimport {TreeDiffer, DiffResult} from './tree-differ';\nimport {MergeTrees} from './broccoli-merge-trees';\n\ndescribe('MergeTrees', () => {\n  afterEach(() => mockfs.restore());\n\n  function mergeTrees(inputPaths: string[], cachePath: string, options: {}) {\n    return new MergeTrees(inputPaths, cachePath, options);\n  }\n\n  function MakeTreeDiffers(rootDirs: string[]): TreeDiffer[] {\n    return rootDirs.map((rootDir) => new TreeDiffer('MergeTrees', rootDir));\n  }\n\n  let diffTrees = (differs: TreeDiffer[]): DiffResult[] => differs.map(tree => tree.diffTree());\n  function read(path: string) { return fs.readFileSync(path, 'utf-8'); }\n\n  it('should copy the file from the right-most inputTree with overwrite=true', () => {\n    let testDir: any = {\n      'tree1': {'foo.js': mockfs.file({content: 'tree1/foo.js content', mtime: new Date(1000)})},\n      'tree2': {'foo.js': mockfs.file({content: 'tree2/foo.js content', mtime: new Date(1000)})},\n      'tree3': {'foo.js': mockfs.file({content: 'tree3/foo.js content', mtime: new Date(1000)})}\n    };\n    mockfs(testDir);\n    let treeDiffer = MakeTreeDiffers(['tree1', 'tree2', 'tree3']);\n    let treeMerger = mergeTrees(['tree1', 'tree2', 'tree3'], 'dest', {overwrite: true});\n    treeMerger.rebuild(diffTrees(treeDiffer));\n    expect(read('dest/foo.js')).toBe('tree3/foo.js content');\n\n    delete testDir.tree2['foo.js'];\n    delete testDir.tree3['foo.js'];\n    mockfs(testDir);\n    treeMerger.rebuild(diffTrees(treeDiffer));\n    expect(read('dest/foo.js')).toBe('tree1/foo.js content');\n\n    testDir.tree2['foo.js'] = mockfs.file({content: 'tree2/foo.js content', mtime: new Date(1000)});\n    mockfs(testDir);\n    treeMerger.rebuild(diffTrees(treeDiffer));\n    expect(read('dest/foo.js')).toBe('tree2/foo.js content');\n  });\n\n  it('should throw if duplicates are found during the initial build', () => {\n    let testDir: any = {\n      'tree1': {'foo.js': mockfs.file({content: 'tree1/foo.js content', mtime: new Date(1000)})},\n      'tree2': {'foo.js': mockfs.file({content: 'tree2/foo.js content', mtime: new Date(1000)})},\n      'tree3': {'foo.js': mockfs.file({content: 'tree3/foo.js content', mtime: new Date(1000)})}\n    };\n    mockfs(testDir);\n    let treeDiffer = MakeTreeDiffers(['tree1', 'tree2', 'tree3']);\n    let treeMerger = mergeTrees(['tree1', 'tree2', 'tree3'], 'dest', {});\n    expect(() => treeMerger.rebuild(diffTrees(treeDiffer)))\n        .toThrowError(\n            'Duplicate path found while merging trees. Path: \"foo.js\".\\n' +\n            'Either remove the duplicate or enable the \"overwrite\" option for this merge.');\n\n    testDir = {\n      'tree1': {'foo.js': mockfs.file({content: 'tree1/foo.js content', mtime: new Date(1000)})},\n      'tree2': {},\n      'tree3': {}\n    };\n    mockfs(testDir);\n  });\n\n\n  it('should throw if duplicates are found during rebuild', () => {\n    let testDir: any = {\n      'tree1': {'foo.js': mockfs.file({content: 'tree1/foo.js content', mtime: new Date(1000)})},\n      'tree2': {},\n      'tree3': {}\n    };\n    mockfs(testDir);\n\n    let treeDiffer = MakeTreeDiffers(['tree1', 'tree2', 'tree3']);\n    let treeMerger = mergeTrees(['tree1', 'tree2', 'tree3'], 'dest', {});\n    expect(() => treeMerger.rebuild(diffTrees(treeDiffer))).not.toThrow();\n\n\n    testDir.tree2['foo.js'] = mockfs.file({content: 'tree2/foo.js content', mtime: new Date(1000)});\n    mockfs(testDir);\n    expect(() => treeMerger.rebuild(diffTrees(treeDiffer)))\n        .toThrowError(\n            'Duplicate path found while merging trees. Path: \"foo.js\".\\n' +\n            'Either remove the duplicate or enable the \"overwrite\" option for this merge.');\n  });\n});\n"]}
{"version":3,"file":"broccoli-flatten.spec.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-flatten.spec.ts"],"names":[],"mappings":"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","sourcesContent":["let mockfs = require('mock-fs');\nimport fs = require('fs');\nimport path = require('path');\nimport {TreeDiffer} from './tree-differ';\nimport {DiffingFlatten} from './broccoli-flatten';\n\ndescribe('Flatten', () => {\n  afterEach(() => mockfs.restore());\n\n  let flatten = (inputPaths: string) => new DiffingFlatten(inputPaths, 'output', null);\n  let read = (path: string) => fs.readFileSync(path, {encoding: 'utf-8'});\n  let rm = (path: string) => fs.unlinkSync(path);\n  let write =\n      (path: string, content: string) => { fs.writeFileSync(path, content, {encoding: 'utf-8'}); }\n\n\n  it('should flatten files and be incremental', () => {\n    let testDir = {\n      'input': {\n        'dir1': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'file-2.txt': mockfs.file({content: 'file-2.txt content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.txt': mockfs.file({content: 'file-1.1.txt content', mtime: new Date(1000)})\n          },\n          'empty-dir': {}\n        },\n      },\n      'output': {}\n    };\n    mockfs(testDir);\n\n    let differ = new TreeDiffer('testLabel', 'input');\n    let flattenedTree = flatten('input');\n    flattenedTree.rebuild(differ.diffTree());\n\n    expect(fs.readdirSync('output')).toEqual(['file-1.1.txt', 'file-1.txt', 'file-2.txt']);\n    // fails  due to a mock-fs bug related to reading symlinks?\n    // expect(read('output/file-1.1.txt')).toBe('file-1.1.txt content');\n\n\n    // delete a file\n    rm('input/dir1/file-1.txt');\n    // add a new one\n    write('input/dir1/file-3.txt', 'file-3.txt content');\n\n    flattenedTree.rebuild(differ.diffTree());\n\n    expect(fs.readdirSync('output')).toEqual(['file-1.1.txt', 'file-2.txt', 'file-3.txt']);\n  });\n\n\n  it('should throw an exception if duplicates are found', () => {\n    let testDir = {\n      'input': {\n        'dir1': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'subdir-1':\n              {'file-1.txt': mockfs.file({content: 'file-1.1.txt content', mtime: new Date(1000)})},\n          'empty-dir': {}\n        },\n      },\n      'output': {}\n    };\n    mockfs(testDir);\n\n    let differ = new TreeDiffer('testLabel', 'input');\n    let flattenedTree = flatten('input');\n    expect(() => flattenedTree.rebuild(differ.diffTree()))\n        .toThrowError(\n            'Duplicate file \\'file-1.txt\\' found in path \\'dir1' + path.sep + 'subdir-1' +\n            path.sep + 'file-1.txt\\'');\n  });\n});\n"]}
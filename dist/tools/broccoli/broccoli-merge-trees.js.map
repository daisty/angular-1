{"version":3,"file":"broccoli-merge-trees.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-merge-trees.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nvar symlinkOrCopySync = require('symlink-or-copy').sync;\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\nvar isWindows = process.platform === 'win32';\n\nexport interface MergeTreesOptions { overwrite?: boolean; }\n\nfunction outputFileSync(sourcePath: string, destPath: string) {\n  let dirname = path.dirname(destPath);\n  fse.mkdirsSync(dirname, {fs: fs});\n  symlinkOrCopySync(sourcePath, destPath);\n}\n\nfunction pathOverwrittenError(path: string) {\n  const msg = 'Either remove the duplicate or enable the \"overwrite\" option for this merge.';\n  return new Error(`Duplicate path found while merging trees. Path: \"${path}\".\\n${msg}`);\n}\n\nexport class MergeTrees implements DiffingBroccoliPlugin {\n  private pathCache: {[key: string]: number[]} = Object.create(null);\n  public options: MergeTreesOptions;\n  private firstBuild: boolean = true;\n\n  constructor(\n      public inputPaths: string[], public cachePath: string, options: MergeTreesOptions = {}) {\n    this.options = options || {};\n  }\n\n  rebuild(treeDiffs: DiffResult[]) {\n    let overwrite = this.options.overwrite;\n    let pathsToEmit: string[] = [];\n    let pathsToRemove: string[] = [];\n    let emitted: {[key: string]: boolean} = Object.create(null);\n    let contains = (cache: number[], val: number) => {\n      for (let i = 0, ii = cache.length; i < ii; ++i) {\n        if (cache[i] === val) return true;\n      }\n      return false;\n    };\n\n    let emit = (relativePath: string) => {\n      // ASSERT(!emitted[relativePath]);\n      pathsToEmit.push(relativePath);\n      emitted[relativePath] = true;\n    };\n\n    if (this.firstBuild) {\n      this.firstBuild = false;\n\n      // Build initial cache\n      treeDiffs.reverse().forEach((treeDiff: DiffResult, index: number) => {\n        index = treeDiffs.length - 1 - index;\n        treeDiff.addedPaths.forEach((changedPath) => {\n          let cache = this.pathCache[changedPath];\n          if (cache === undefined) {\n            this.pathCache[changedPath] = [index];\n            pathsToEmit.push(changedPath);\n          } else if (overwrite) {\n            // ASSERT(contains(pathsToEmit, changedPath));\n            cache.unshift(index);\n          } else {\n            throw pathOverwrittenError(changedPath);\n          }\n        });\n      });\n\n    } else {\n      // Update cache\n      treeDiffs.reverse().forEach((treeDiff: DiffResult, index: number) => {\n        index = treeDiffs.length - 1 - index;\n        if (treeDiff.removedPaths) {\n          treeDiff.removedPaths.forEach((removedPath) => {\n            let cache = this.pathCache[removedPath];\n            // ASSERT(cache !== undefined);\n            // ASSERT(contains(cache, index));\n            if (cache[cache.length - 1] === index) {\n              pathsToRemove.push(path.join(this.cachePath, removedPath));\n              cache.pop();\n              if (cache.length === 0) {\n                this.pathCache[removedPath] = undefined;\n              } else if (!emitted[removedPath]) {\n                if (cache.length === 1 && !overwrite) {\n                  throw pathOverwrittenError(removedPath);\n                }\n                emit(removedPath);\n              }\n            }\n          });\n        }\n\n        let pathsToUpdate = treeDiff.addedPaths;\n\n        if (isWindows) {\n          pathsToUpdate = pathsToUpdate.concat(treeDiff.changedPaths);\n        }\n\n        pathsToUpdate.forEach((changedPath) => {\n          let cache = this.pathCache[changedPath];\n          if (cache === undefined) {\n            // File was added\n            this.pathCache[changedPath] = [index];\n            emit(changedPath);\n          } else if (!contains(cache, index)) {\n            cache.push(index);\n            cache.sort((a, b) => a - b);\n            if (cache.length > 1 && !overwrite) {\n              throw pathOverwrittenError(changedPath);\n            }\n            if (cache[cache.length - 1] === index && !emitted[changedPath]) {\n              emit(changedPath);\n            }\n          }\n        });\n      });\n    }\n\n    pathsToRemove.forEach((destPath) => fse.removeSync(destPath));\n    pathsToEmit.forEach((emittedPath) => {\n      let cache = this.pathCache[emittedPath];\n      let destPath = path.join(this.cachePath, emittedPath);\n      let sourceIndex = cache[cache.length - 1];\n      let sourceInputPath = this.inputPaths[sourceIndex];\n      let sourcePath = path.join(sourceInputPath, emittedPath);\n      if (cache.length > 1) {\n        fse.removeSync(destPath);\n      }\n      outputFileSync(sourcePath, destPath);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(MergeTrees);\n"]}
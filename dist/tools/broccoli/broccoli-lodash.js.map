{"version":3,"file":"broccoli-lodash.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-lodash.ts"],"names":[],"mappings":";AAAA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,GAAG,WAAW,UAAU,CAAC,CAAC;AACjC,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,wCAAmE,2BAA2B,CAAC,CAAA;AAS/F,IAAM,eAAe,GAA0B;IAC7C,QAAQ,EAAE,OAAO;IACjB,OAAO,EAAE,EAAE;IACX,KAAK,EAAE,EAAE;CACV,CAAC;AAGF;;;GAGG;AACH;IACE,wBACY,SAAiB,EAAU,SAAiB,EAC5C,OAAgD;QAAxD,uBAAwD,GAAxD,yBAAwD;QADhD,cAAS,GAAT,SAAS,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAQ;QAC5C,YAAO,GAAP,OAAO,CAAyC;IAAG,CAAC;IAEhE,gCAAO,GAAP,UAAQ,QAAoB;QAA5B,iBAiBC;QAhBC,IAAA,iBAAqD,EAAhD,gBAAkB,EAAlB,uCAAkB,EAAE,eAAY,EAAZ,iCAAY,CAAiB;QACtD,IAAI,WAAW,GAAG,UAAC,YAAoB;YACrC,IAAI,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAC7D,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAC3D,IAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,EAAC,UAAA,QAAQ,EAAC,CAAC,CAAC;YAC1D,IAAI,kBAAkB,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;YACtD,GAAG,CAAC,cAAc,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC;QACvD,CAAC,CAAC;QAEF,IAAI,UAAU,GAAG,UAAC,YAAoB;YACpC,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAC3D,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC9B,CAAC,CAAC;QAEF,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACvE,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IACH,qBAAC;AAAD,CAAC,AAvBD,IAuBC;AAvBY,sBAAc,iBAuB1B,CAAA;AAED;kBAAe,2CAAiB,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nvar _ = require('lodash');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\nexport interface LodashRendererOptions {\n  encoding?: string;\n  context?: any;\n  // files option unsupported --- use Funnel on inputTree instead.\n  files?: string[];\n}\n\nconst kDefaultOptions: LodashRendererOptions = {\n  encoding: 'utf-8',\n  context: {},\n  files: []\n};\n\n\n/**\n * Intercepts each changed file and replaces its contents with\n * the associated changes.\n */\nexport class LodashRenderer implements DiffingBroccoliPlugin {\n  constructor(\n      private inputPath: string, private cachePath: string,\n      private options: LodashRendererOptions = kDefaultOptions) {}\n\n  rebuild(treeDiff: DiffResult) {\n    let {encoding = 'utf-8', context = {}} = this.options;\n    let processFile = (relativePath: string) => {\n      let sourceFilePath = path.join(this.inputPath, relativePath);\n      let destFilePath = path.join(this.cachePath, relativePath);\n      let content = fs.readFileSync(sourceFilePath, {encoding});\n      let transformedContent = _.template(content)(context);\n      fse.outputFileSync(destFilePath, transformedContent);\n    };\n\n    let removeFile = (relativePath: string) => {\n      let destFilePath = path.join(this.cachePath, relativePath);\n      fs.unlinkSync(destFilePath);\n    };\n\n    treeDiff.addedPaths.concat(treeDiff.changedPaths).forEach(processFile);\n    treeDiff.removedPaths.forEach(removeFile);\n  }\n}\n\nexport default wrapDiffingPlugin(LodashRenderer);\n"]}
{"version":3,"file":"tree-differ.spec.js","sourceRoot":"","sources":["../../../tools/broccoli/tree-differ.spec.ts"],"names":[],"mappings":"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","sourcesContent":["let mockfs = require('mock-fs');\nimport fs = require('fs');\nimport path = require('path');\nimport {TreeDiffer} from './tree-differ';\n\n\ndescribe('TreeDiffer', () => {\n\n  afterEach(() => mockfs.restore());\n\n\n  describe('diff of added and changed files', () => {\n\n    it('should list all files (but no directories) during the first diff', () => {\n      let testDir = {\n        'dir1': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'file-2.txt': mockfs.file({content: 'file-2.txt content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.txt': mockfs.file({content: 'file-1.1.txt content', mtime: new Date(1000)})\n          },\n          'empty-dir': {}\n        }\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n\n      let diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([\n        'file-1.txt', 'file-2.txt', 'subdir-1' + path.sep + 'file-1.1.txt'\n      ]);\n\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n    });\n\n\n    it('should return empty diff if nothing has changed', () => {\n      let testDir = {\n        'dir1': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'file-2.txt': mockfs.file({content: 'file-2.txt content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.txt': mockfs.file({content: 'file-1.1.txt content', mtime: new Date(1000)})\n          },\n        }\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n\n      let diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).not.toEqual([]);\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n\n      diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([]);\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n    });\n\n\n    it('should list only changed files during the subsequent diffs', () => {\n      let testDir = {\n        'dir1': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'file-2.txt': mockfs.file({content: 'file-2.txt content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.txt':\n                mockfs.file({content: 'file-1.1.txt content', mtime: new Date(1000)})\n          }\n        }\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n\n      let diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([\n        'file-1.txt', 'file-2.txt', 'subdir-1' + path.sep + 'file-1.1.txt'\n      ]);\n\n      // change two files\n      testDir['dir1']['file-1.txt'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['subdir-1']['file-1.1.txt'] =\n          mockfs.file({content: 'file-1.1.txt content', mtime: new Date(9999)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n\n      expect(diffResult.changedPaths).toEqual([\n        'file-1.txt', 'subdir-1' + path.sep + 'file-1.1.txt'\n      ]);\n\n      expect(diffResult.removedPaths).toEqual([]);\n\n      // change one file\n      testDir['dir1']['file-1.txt'] = mockfs.file({content: 'super new', mtime: new Date(1000)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.changedPaths).toEqual(['file-1.txt']);\n    });\n\n\n    it('should handle changes via symbolic links', () => {\n      let testDir = {\n        'orig_path': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'file-2.txt': mockfs.file({content: 'file-2.txt content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.txt': mockfs.file({content: 'file-1.1.txt content', mtime: new Date(1000)})\n          }\n        },\n        'symlinks': {\n          'file-1.txt': mockfs.symlink({path: '../orig_path/file-1.txt'}),\n          'file-2.txt': mockfs.symlink({path: '../orig_path/file-2.txt'}),\n          'subdir-1':\n              {'file-1.1.txt': mockfs.symlink({path: '../../orig_path/subdir-1/file-1.1.txt'})}\n        }\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'symlinks');\n\n      let diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([\n        'file-1.txt', 'file-2.txt', 'subdir-1' + path.sep + 'file-1.1.txt'\n      ]);\n\n      // change two files\n      testDir['orig_path']['file-1.txt'] =\n          mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['orig_path']['subdir-1']['file-1.1.txt'] =\n          mockfs.file({content: 'file-1.1.txt content', mtime: new Date(9999)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([]);\n      expect(diffResult.changedPaths).toEqual([\n        'file-1.txt', 'subdir-1' + path.sep + 'file-1.1.txt'\n      ]);\n      expect(diffResult.removedPaths).toEqual([]);\n\n      // change one file\n      testDir['orig_path']['file-1.txt'] =\n          mockfs.file({content: 'super new', mtime: new Date(1000)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.changedPaths).toEqual(['file-1.txt']);\n\n      // remove a link\n      delete testDir['orig_path']['file-1.txt'];\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.addedPaths).toEqual([]);\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual(['file-1.txt']);\n\n      // don't report it as a removal twice\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n\n      // re-add it.\n      testDir['orig_path']['file-1.txt'] =\n          mockfs.file({content: 'super new', mtime: new Date(1000)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.addedPaths).toEqual(['file-1.txt']);\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n    });\n\n\n    it('should throw an error if an extension isn\\'t prefixed with doc', () => {\n      // includeExtensions\n      expect(() => new TreeDiffer('testLabel', 'dir1', ['js']))\n          .toThrowError('Extension must begin with \\'.\\'. Was: \\'js\\'');\n\n      // excludeExtentions\n      expect(() => new TreeDiffer('testLabel', 'dir1', [], ['js']))\n          .toThrowError('Extension must begin with \\'.\\'. Was: \\'js\\'');\n    });\n\n\n    it('should ignore files with extensions not listed in includeExtensions', () => {\n      let testDir = {\n        'dir1': {\n          'file-1.js': mockfs.file({content: 'file-1.js content', mtime: new Date(1000)}),\n          'file-2.md': mockfs.file({content: 'file-2.md content', mtime: new Date(1000)}),\n          'file-3.coffee': mockfs.file({content: 'file-3.coffee content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.cc': mockfs.file({content: 'file-1.1.cc content', mtime: new Date(1000)})\n          }\n        }\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1', ['.js', '.coffee']);\n\n      let diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual(['file-1.js', 'file-3.coffee']);\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n\n      // change two files\n      testDir['dir1']['file-1.js'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['file-3.coffee'] =\n          mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['subdir-1']['file-1.1.cc'] =\n          mockfs.file({content: 'file-1.1.cc content', mtime: new Date(9999)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([]);\n      expect(diffResult.changedPaths).toEqual(['file-1.js', 'file-3.coffee']);\n      expect(diffResult.removedPaths).toEqual([]);\n\n      // change one file\n      testDir['dir1']['file-1.js'] = mockfs.file({content: 'super new', mtime: new Date(1000)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.changedPaths).toEqual(['file-1.js']);\n    });\n\n\n    it('should ignore files with extensions listed in excludeExtensions', () => {\n      let testDir = {\n        'dir1': {\n          'file-1.ts': mockfs.file({content: 'file-1.ts content', mtime: new Date(1000)}),\n          'file-1.cs': mockfs.file({content: 'file-1.cs content', mtime: new Date(1000)}),\n          'file-1d.cs': mockfs.file({content: 'file-1d.cs content', mtime: new Date(1000)}),\n          'file-1.d.cs': mockfs.file({content: 'file-1.d.cs content', mtime: new Date(1000)}),\n          'file-2.md': mockfs.file({content: 'file-2.md content', mtime: new Date(1000)}),\n          'file-3.ts': mockfs.file({content: 'file-3.ts content', mtime: new Date(1000)}),\n          'file-4.d.ts': mockfs.file({content: 'file-4.d.ts content', mtime: new Date(1000)}),\n          'subdir-1': {\n            'file-1.1.cc': mockfs.file({content: 'file-1.1.cc content', mtime: new Date(1000)})\n          }\n        }\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1', ['.ts', '.cs'], ['.d.ts', '.d.cs']);\n\n      let diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual(['file-1.cs', 'file-1.ts', 'file-1d.cs', 'file-3.ts']);\n\n      // change two files\n      testDir['dir1']['file-1.ts'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['file-1.cs'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['file-1.d.cs'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['file-3.ts'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['file-4.d.ts'] = mockfs.file({content: 'new content', mtime: new Date(1000)});\n      testDir['dir1']['subdir-1']['file-1.1.cc'] =\n          mockfs.file({content: 'file-1.1.cc content', mtime: new Date(9999)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n\n      expect(diffResult.addedPaths).toEqual([]);\n      expect(diffResult.changedPaths).toEqual(['file-1.cs', 'file-1.ts', 'file-3.ts']);\n      expect(diffResult.removedPaths).toEqual([]);\n\n      // change one file\n      testDir['dir1']['file-4.d.ts'] = mockfs.file({content: 'super new', mtime: new Date(1000)});\n      mockfs(testDir);\n\n      diffResult = differ.diffTree();\n      expect(diffResult.changedPaths).toEqual([]);\n    });\n  });\n\n  describe('diff of new files', () => {\n\n    it('should detect file additions', () => {\n      let testDir: any = {\n        'dir1':\n            {'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)})}\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n      differ.diffTree();\n\n      testDir['dir1']['file-2.txt'] = 'new file';\n      mockfs(testDir);\n\n      let diffResult = differ.diffTree();\n      expect(diffResult.addedPaths).toEqual(['file-2.txt']);\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual([]);\n    });\n\n\n    it('should detect file additions mixed with file changes', () => {\n      let testDir: any = {\n        'dir1':\n            {'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)})}\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n      differ.diffTree();\n\n      testDir['dir1']['file-1.txt'] = 'new content';\n      testDir['dir1']['file-2.txt'] = 'new file';\n      mockfs(testDir);\n\n      let diffResult = differ.diffTree();\n      expect(diffResult.addedPaths).toEqual(['file-2.txt']);\n      expect(diffResult.changedPaths).toEqual(['file-1.txt']);\n    });\n  });\n\n\n  describe('diff of removed files', () => {\n\n    it('should detect file removals and report them as removed files', () => {\n      let testDir = {\n        'dir1':\n            {'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)})}\n      };\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n      differ.diffTree();\n\n      delete testDir['dir1']['file-1.txt'];\n      mockfs(testDir);\n\n      let diffResult = differ.diffTree();\n      expect(diffResult.changedPaths).toEqual([]);\n      expect(diffResult.removedPaths).toEqual(['file-1.txt']);\n    });\n\n\n    it('should detect file removals mixed with file changes and additions', () => {\n      let testDir: any = {\n        'dir1': {\n          'file-1.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)}),\n          'file-2.txt': mockfs.file({content: 'file-1.txt content', mtime: new Date(1000)})\n        }\n      };\n\n      mockfs(testDir);\n\n      let differ = new TreeDiffer('testLabel', 'dir1');\n      differ.diffTree();\n\n      testDir['dir1']['file-1.txt'] = 'changed content';\n      delete testDir['dir1']['file-2.txt'];\n      testDir['dir1']['file-3.txt'] = 'new content';\n      mockfs(testDir);\n\n      let diffResult = differ.diffTree();\n      expect(diffResult.addedPaths).toEqual(['file-3.txt']);\n      expect(diffResult.changedPaths).toEqual(['file-1.txt']);\n      expect(diffResult.removedPaths).toEqual(['file-2.txt']);\n    });\n  });\n});\n"]}
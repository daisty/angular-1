{"version":3,"file":"node_tree.js","sourceRoot":"","sources":["../../../../tools/broccoli/trees/node_tree.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport destCopy from '../broccoli-dest-copy';\nimport compileWithTypescript, {INTERNAL_TYPINGS_PATH} from '../broccoli-typescript';\nvar Funnel = require('broccoli-funnel');\nimport mergeTrees from '../broccoli-merge-trees';\nvar path = require('path');\nimport renderLodashTemplate from '../broccoli-lodash';\nimport replace from '../broccoli-replace';\nimport generateForTest from '../broccoli-generate-for-test';\nvar stew = require('broccoli-stew');\nvar writeFile = require('broccoli-file-creator');\n\nvar projectRootDir = path.normalize(path.join(__dirname, '..', '..', '..', '..'));\n\nmodule.exports = function makeNodeTree(projects: string[], destinationPath: string) {\n  // list of npm packages that this build will create\n  var outputPackages = ['angular2', 'benchpress'];\n\n  let srcTree = new Funnel('modules', {\n    include: ['angular2/**'],\n    exclude: [\n      '**/e2e_test/**',\n      'angular2/test/**',\n      'angular2/examples/**',\n\n      'angular2/src/testing/**',\n      'angular2/testing.ts',\n      'angular2/testing_internal.ts',\n      'angular2/src/upgrade/**',\n      'angular2/upgrade.ts',\n      'angular2/platform/testing/**',\n      'angular2/manual_typings/**',\n      'angular2/typings/**',\n    ]\n  });\n\n  let externalTypings = [\n    'angular2/typings/hammerjs/hammerjs.d.ts',\n    'angular2/typings/node/node.d.ts',\n    'angular2/manual_typings/globals.d.ts',\n    'angular2/typings/es6-collections/es6-collections.d.ts',\n    'angular2/typings/es6-promise/es6-promise.d.ts',\n  ];\n\n  let externalTypingsTree = new Funnel('modules', {files: externalTypings});\n\n  let packageTypings =\n      new Funnel('node_modules', {include: ['rxjs/**/*.d.ts', 'zone.js/**/*.d.ts']});\n\n  let compileSrcContext = mergeTrees([srcTree, externalTypingsTree, packageTypings]);\n\n  // Compile the sources and generate the @internal .d.ts\n  let compiledSrcTreeWithInternals = compileTree(compileSrcContext, true, []);\n\n  var testTree = new Funnel('modules', {\n    include: [\n      'angular2/manual_typings/**',\n      'angular2/typings/**',\n\n      'angular2/test/**',\n      'benchpress/**',\n      '**/e2e_test/**',\n      'angular2/examples/**/*_spec.ts',\n\n      'angular2/src/testing/**',\n      'angular2/testing.ts',\n      'angular2/testing_internal.ts',\n      'angular2/src/upgrade/**',\n      'angular2/upgrade.ts',\n      'angular2/platform/testing/**',\n    ],\n    exclude: [\n      // the following code and tests are not compatible with CJS/node environment\n      'angular2/test/animate/**',\n      'angular2/test/core/zone/**',\n      'angular2/test/testing/fake_async_spec.ts',\n      'angular2/test/testing/testing_public_browser_spec.ts',\n      'angular2/test/platform/xhr_impl_spec.ts',\n      'angular2/test/platform/browser/**/*.ts',\n      'angular2/test/common/forms/**',\n      'angular2/manual_typings/**',\n      'angular2/typings/**',\n\n      // we call browser's bootstrap\n      'angular2/test/router/route_config/route_config_spec.ts',\n      'angular2/test/router/integration/bootstrap_spec.ts',\n\n      // we check the public api by importing angular2/angular2\n      'angular2/test/symbol_inspector/**/*.ts',\n      'angular2/test/public_api_spec.ts',\n\n      'angular2/test/web_workers/worker/renderer_integration_spec.ts',\n\n      'angular2/test/upgrade/**/*.ts',\n      'angular1_router/**',\n      'payload_tests/**',\n    ]\n  });\n\n  // Compile the tests against the src @internal .d.ts\n  let srcPrivateDeclarations =\n      new Funnel(compiledSrcTreeWithInternals, {srcDir: INTERNAL_TYPINGS_PATH});\n\n  let testAmbients = [\n    'angular2/typings/jasmine/jasmine.d.ts',\n    'angular2/typings/angular-protractor/angular-protractor.d.ts',\n    'angular2/typings/selenium-webdriver/selenium-webdriver.d.ts'\n  ];\n  let testAmbientsTree = new Funnel('modules', {files: testAmbients});\n\n  testTree = mergeTrees(\n      [testTree, srcPrivateDeclarations, testAmbientsTree, externalTypingsTree, packageTypings]);\n\n  let compiledTestTree = compileTree(testTree, false, []);\n\n  // Merge the compiled sources and tests\n  let compiledSrcTree =\n      new Funnel(compiledSrcTreeWithInternals, {exclude: [`${INTERNAL_TYPINGS_PATH}/**`]});\n\n  let compiledTree = mergeTrees([compiledSrcTree, compiledTestTree]);\n\n  // Generate test files\n  let generatedJsTestFiles =\n      generateForTest(compiledTree, {files: ['*/test/**/*_codegen_untyped.js']});\n  let generatedTsTestFiles = stew.rename(\n      generateForTest(compiledTree, {files: ['*/test/**/*_codegen_typed.js']}), /.js$/, '.ts');\n\n  // Compile generated test files against the src @internal .d.ts and the test files\n  compiledTree = mergeTrees(\n      [\n        compiledTree, generatedJsTestFiles,\n        compileTree(\n            new Funnel(\n                mergeTrees([\n                  packageTypings,\n                  new Funnel(\n                      'modules', {include: ['angular2/manual_typings/**', 'angular2/typings/**']}),\n                  generatedTsTestFiles, srcPrivateDeclarations, compiledTestTree\n                ]),\n                {include: ['angular2/**', 'rxjs/**', 'zone.js/**']}),\n            false, [])\n      ],\n      {overwrite: true});\n\n  // Down-level .d.ts files to be TS 1.8 compatible\n  // TODO(alexeagle): this can be removed once we drop support for using Angular 2 with TS 1.8\n  compiledTree = replace(compiledTree, {\n    files: ['**/*.d.ts'],\n    patterns: [\n      // all readonly keywords\n      {match: /^(\\s*(static\\s+|private\\s+)*)readonly\\s+/mg, replacement: '$1'},\n      // abstract properties (but not methods or classes)\n      {match: /^(\\s+)abstract\\s+([^\\(\\n]*$)/mg, replacement: '$1$2'},\n    ]\n  });\n\n  // Now we add the LICENSE file into all the folders that will become npm packages\n  outputPackages.forEach(function(destDir) {\n    var license = new Funnel('.', {files: ['LICENSE'], destDir: destDir});\n    // merge the test tree\n    compiledTree = mergeTrees([compiledTree, license]);\n  });\n\n  // Get all docs and related assets and prepare them for js build\n  var srcDocs = extractDocs(srcTree);\n  var testDocs = extractDocs(testTree);\n\n  var BASE_PACKAGE_JSON = require(path.join(projectRootDir, 'package.json'));\n  var srcPkgJsons = extractPkgJsons(srcTree, BASE_PACKAGE_JSON);\n  var testPkgJsons = extractPkgJsons(testTree, BASE_PACKAGE_JSON);\n\n  // Copy es6 typings so quickstart doesn't require typings install\n  let typingsTree = mergeTrees([\n    new Funnel('modules', {\n      include: [\n        'angular2/typings/es6-collections/es6-collections.d.ts',\n        'angular2/typings/es6-promise/es6-promise.d.ts',\n      ]\n    }),\n    writeFile(\n        'angular2/typings/browser.d.ts', '// Typings needed for compilation with --target=es5\\n' +\n            '///<reference path=\"./es6-collections/es6-collections.d.ts\"/>\\n' +\n            '///<reference path=\"./es6-promise/es6-promise.d.ts\"/>\\n')\n  ]);\n\n  var nodeTree =\n      mergeTrees([compiledTree, srcDocs, testDocs, srcPkgJsons, testPkgJsons, typingsTree]);\n\n  // Transform all tests to make them runnable in node\n  nodeTree = replace(nodeTree, {\n    files: ['**/test/**/*_spec.js'],\n    patterns: [\n      {\n        match: /^/,\n        replacement:\n            () =>\n                `var parse5Adapter = require('angular2/src/platform/server/parse5_adapter');\\r\\n` +\n            `parse5Adapter.Parse5DomAdapter.makeCurrent();`\n      },\n      {match: /$/, replacement: (_: any, relativePath: string) => '\\r\\n main(); \\r\\n'}\n    ]\n  });\n\n  // Prepend 'use strict' directive to all JS files.\n  // See https://github.com/Microsoft/TypeScript/issues/3576\n  nodeTree = replace(\n      nodeTree, {files: ['**/*.js'], patterns: [{match: /^/, replacement: () => `'use strict';`}]});\n\n  return destCopy(nodeTree, destinationPath);\n};\n\nfunction compileTree(\n    tree: BroccoliTree, genInternalTypings: boolean, rootFilePaths: string[] = []) {\n  return compileWithTypescript(tree, {\n    // build pipeline options\n    'rootFilePaths': rootFilePaths,\n    'internalTypings': genInternalTypings,\n    // tsc options\n    'emitDecoratorMetadata': true,\n    'experimentalDecorators': true,\n    'declaration': true,\n    'stripInternal': true,\n    'module': 'commonjs',\n    'moduleResolution': 'classic',\n    'noEmitOnError': true,\n    'rootDir': '.',\n    'inlineSourceMap': true,\n    'inlineSources': true,\n    'target': 'es5'\n  });\n}\n\nfunction extractDocs(tree: BroccoliTree) {\n  var docs = new Funnel(tree, {include: ['**/*.md', '**/*.png'], exclude: ['**/*.dart.md']});\n  return stew.rename(docs, 'README.js.md', 'README.md');\n}\n\nfunction extractPkgJsons(tree: BroccoliTree, BASE_PACKAGE_JSON: any) {\n  // Generate shared package.json info\n  var COMMON_PACKAGE_JSON = {\n    version: BASE_PACKAGE_JSON.version,\n    homepage: BASE_PACKAGE_JSON.homepage,\n    bugs: BASE_PACKAGE_JSON.bugs,\n    license: BASE_PACKAGE_JSON.license,\n    repository: BASE_PACKAGE_JSON.repository,\n    contributors: BASE_PACKAGE_JSON.contributors,\n    dependencies: BASE_PACKAGE_JSON.dependencies,\n    devDependencies: BASE_PACKAGE_JSON.devDependencies,\n    defaultDevDependencies: {}\n  };\n\n  var packageJsons = new Funnel(tree, {include: ['**/package.json']});\n  return renderLodashTemplate(packageJsons, {context: {'packageJson': COMMON_PACKAGE_JSON}});\n}\n"]}
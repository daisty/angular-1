{"version":3,"file":"dart_tree.js","sourceRoot":"","sources":["../../../../tools/broccoli/trees/dart_tree.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport {MultiCopy} from './../multi_copy';\nimport destCopy from '../broccoli-dest-copy';\nvar Funnel = require('broccoli-funnel');\nimport mergeTrees from '../broccoli-merge-trees';\nvar path = require('path');\nimport renderLodashTemplate from '../broccoli-lodash';\nvar stew = require('broccoli-stew');\nimport ts2dart from '../broccoli-ts2dart';\nimport dartfmt from '../broccoli-dartfmt';\nimport replace from '../broccoli-replace';\nimport {AngularBuilderOptions} from '../angular_builder';\nimport generateForTest from '../broccoli-generate-for-test';\n\nvar global_excludes = [\n  'angular2/examples/**/ts/**/*',\n  'angular2/http*',\n  'angular2/http/**/*',\n  'angular2/src/http/**/*',\n  'angular2/src/upgrade/**/*',\n  'angular2/test/http/**/*',\n  'angular2/test/upgrade/**/*',\n  'angular2/upgrade*',\n  'payload_tests/**/ts/**/*',\n  'playground/src/http/**/*',\n  'playground/src/jsonp/**/*',\n  'playground/test/http/**/*',\n  'playground/test/jsonp/**/*',\n];\n\n\n/**\n * A funnel starting at modules, including the given filters, and moving into the root.\n * @param include Include glob filters.\n */\nfunction modulesFunnel(include: string[], exclude?: string[]) {\n  exclude = exclude || [];\n  exclude = exclude.concat(global_excludes);\n  return new Funnel('modules', {include, destDir: '/', exclude});\n}\n\n/**\n * Replaces $SCRIPT$ in .html files with actual <script> tags.\n */\nfunction replaceScriptTagInHtml(placeholder: string, relativePath: string): string {\n  var scriptTags = '';\n  if (relativePath.match(/^benchmarks/)) {\n    scriptTags += '<script src=\"url_params_to_form.js\" type=\"text/javascript\"></script>\\n';\n  }\n  var scriptName = relativePath.replace(/\\\\/g, '/').replace(/.*\\/([^/]+)\\.html$/, '$1.dart');\n  scriptTags += '<script src=\"' + scriptName + '\" type=\"application/dart\"></script>\\n' +\n      '<script src=\"packages/browser/dart.js\" type=\"text/javascript\"></script>';\n  return scriptTags;\n}\n\nfunction stripModulePrefix(relativePath: string): string {\n  if (!relativePath.match(/^modules\\//)) {\n    throw new Error('Expected path to root at modules/: ' + relativePath);\n  }\n  return relativePath.replace(/^modules\\//, '');\n}\n\nfunction getSourceTree(options: AngularBuilderOptions) {\n  var tsInputTree = modulesFunnel(\n      [\n        'tsconfig-ts2dart.json',\n        'upgrade-ts2dart.d.ts',\n        'zone-ts2dart.d.ts',\n        '**/*.js',\n        '**/*.ts',\n        '**/*.dart',\n      ],\n      [\n        'rollup-test/**/*',\n        'angular1_router/**/*',\n        'angular2/upgrade/**/*',\n        'angular2/core/test/typings.d.ts',\n        'angular2/manual_typings/globals.d.ts',\n        'angular2/typings/es6-collections/es6-collections.d.ts',\n        'angular2/typings/es6-promise/es6-promise.d.ts',\n        'angular2/typings/tsd.d.ts',\n        'angular2/typings.d.ts',\n      ]);\n  var transpiled = ts2dart(tsInputTree, {\n    generateLibraryName: true,\n    generateSourceMap: false,\n    translateBuiltins: true,\n    tsconfig: 'tsconfig-ts2dart.json'\n  });\n\n  // Native sources, dart only examples, etc.\n  var dartSrcs = modulesFunnel(\n      ['**/*.dart', '**/*.ng_meta.json', '**/*.aliases.json', '**/css/**', '**/*.css']);\n\n  var compiledTree = mergeTrees([transpiled, dartSrcs]);\n\n  // Generate test files\n  let generatedDartTestFiles = generateForTest(\n      mergeTrees([compiledTree, new Funnel('packages', {include: ['path/**', 'stack_trace/**']})]),\n      {files: ['*/test/**/*_codegen_typed.dart'], dartPath: options.dartSDK.VM});\n\n  return mergeTrees([compiledTree, generatedDartTestFiles], {overwrite: true});\n}\n\nfunction fixDartFolderLayout(sourceTree: BroccoliTree) {\n  // Move around files to match Dart's layout expectations.\n  return stew.rename(sourceTree, function(relativePath: string) {\n    // If a file matches the `pattern`, insert the given `insertion` as the second path part.\n    var replacements = [\n      {pattern: /^benchmarks\\/test\\//, insertion: ''},\n      {pattern: /^benchmarks\\//, insertion: 'web'},\n      {pattern: /^benchmarks_external\\/test\\//, insertion: ''},\n      {pattern: /^benchmarks_external\\//, insertion: 'web'},\n      {pattern: /^playground\\/test\\//, insertion: ''},\n      {pattern: /^playground\\//, insertion: 'web/'},\n      {pattern: /^[^\\/]*\\/test\\//, insertion: ''},\n      // catch all.\n      {pattern: /^./, insertion: 'lib'},\n    ];\n\n    for (var i = 0; i < replacements.length; i++) {\n      var repl = replacements[i];\n      if (relativePath.match(repl.pattern)) {\n        var parts = relativePath.split('/');\n        parts.splice(1, 0, repl.insertion);\n        return path.join.apply(path, parts);\n      }\n    }\n    throw new Error('Failed to match any path: ' + relativePath);\n  });\n}\n\nfunction getHtmlSourcesTree() {\n  // Replace $SCRIPT$ markers in HTML files.\n  var htmlSrcsTree = modulesFunnel(['*/src/**/*.html']);\n  htmlSrcsTree = replace(\n      htmlSrcsTree,\n      {files: ['*/**'], patterns: [{match: '$SCRIPTS$', replacement: replaceScriptTagInHtml}]});\n\n  // Copy a url_params_to_form.js for each benchmark html file.\n  var urlParamsToFormTree = new MultiCopy(<any>'', {\n    srcPath: 'tools/build/snippets/url_params_to_form.js',\n    targetPatterns: ['modules/benchmarks*/src/*', 'modules/benchmarks*/src/*/*'],\n  });\n  urlParamsToFormTree = stew.rename(urlParamsToFormTree, stripModulePrefix);\n  return mergeTrees([htmlSrcsTree, urlParamsToFormTree]);\n}\n\nfunction getExamplesJsonTree() {\n  // Copy JSON files\n  return modulesFunnel(['playground/**/*.json']);\n}\n\n\nfunction getTemplatedPubspecsTree() {\n  // The JSON structure for templating pubspec.yaml files.\n  var BASE_PACKAGE_JSON = require('../../../../package.json');\n  var COMMON_PACKAGE_JSON = {\n    version: BASE_PACKAGE_JSON.version,\n    homepage: BASE_PACKAGE_JSON.homepage,\n    bugs: BASE_PACKAGE_JSON.bugs,\n    license: BASE_PACKAGE_JSON.license,\n    contributors: BASE_PACKAGE_JSON.contributors,\n    dependencies: BASE_PACKAGE_JSON.dependencies,\n    devDependencies: {}\n  };\n  // Generate pubspec.yaml from templates.\n  var pubspecs = modulesFunnel(['**/pubspec.yaml']);\n  // Then render the templates.\n  return renderLodashTemplate(pubspecs, {context: {'packageJson': COMMON_PACKAGE_JSON}});\n}\n\nfunction getDocsTree() {\n  // LICENSE files\n  var licenses = new MultiCopy(<any>'', {\n    srcPath: 'LICENSE',\n    targetPatterns: ['modules/*'],\n    exclude: [\n      '*/@angular',\n      '*/angular2',\n      '*/angular1_router',\n      '*/angular2/src/http',\n      '*/payload_tests',\n      '*/upgrade',\n    ]  // Not in dart.\n  });\n  licenses = stew.rename(licenses, stripModulePrefix);\n\n  // Documentation.\n  // Rename *.dart.md -> *.dart.\n  var mdTree = stew.rename(\n      modulesFunnel(['**/*.dart.md']),\n      (relativePath: string) => relativePath.replace(/\\.dart\\.md$/, '.md'));\n  // Copy all assets, ignore .js. and .dart. (handled above).\n  var docs = modulesFunnel(\n      ['**/*.md', '**/*.png', '**/*.html', '**/*.css', '**/*.scss'],\n      ['**/*.js.md', '**/*.dart.md', 'angular1_router/**/*']);\n\n  var assets = modulesFunnel(['playground/**/*.json']);\n\n  return mergeTrees([licenses, mdTree, docs, assets]);\n}\n\nmodule.exports = function makeDartTree(options: AngularBuilderOptions) {\n  var dartSources = dartfmt(getSourceTree(options), {dartSDK: options.dartSDK, logs: options.logs});\n  var sourceTree = mergeTrees([dartSources, getHtmlSourcesTree(), getExamplesJsonTree()]);\n  sourceTree = fixDartFolderLayout(sourceTree);\n\n  var dartTree = mergeTrees([sourceTree, getTemplatedPubspecsTree(), getDocsTree()]);\n\n  return destCopy(dartTree, options.outputPath);\n};\n"]}
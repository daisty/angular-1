{"version":3,"file":"angular_builder.js","sourceRoot":"","sources":["../../../tools/broccoli/angular_builder.ts"],"names":[],"mappings":"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","sourcesContent":["var broccoli = require('broccoli');\nvar fs = require('fs');\nvar makeBrowserTree = require('./trees/browser_tree');\nvar makeNodeTree = require('./trees/node_tree');\nvar path = require('path');\nvar printSlowTrees = require('broccoli-slow-trees');\nvar Q = require('q');\n\nexport type ProjectMap = {\n  [key: string]: boolean\n};\n\nexport type Options = {\n  projects: ProjectMap; noTypeChecks: boolean; generateEs6: boolean; useBundles: boolean;\n};\n\nexport interface AngularBuilderOptions {\n  outputPath: string;\n  dartSDK?: any;\n  logs?: any;\n}\n\n/**\n * BroccoliBuilder facade for all of our build pipelines.\n */\nexport class AngularBuilder {\n  private nodeBuilder: BroccoliBuilder;\n  private browserDevBuilder: BroccoliBuilder;\n  private browserProdBuilder: BroccoliBuilder;\n  private dartBuilder: BroccoliBuilder;\n  private outputPath: string;\n  private firstResult: BuildResult;\n\n  constructor(public options: AngularBuilderOptions) { this.outputPath = options.outputPath; }\n\n\n  public rebuildBrowserDevTree(opts: Options): Promise<BuildResult> {\n    this.browserDevBuilder = this.browserDevBuilder || this.makeBrowserDevBuilder(opts);\n    return this.rebuild(this.browserDevBuilder, 'js.dev');\n  }\n\n\n  public rebuildBrowserProdTree(opts: Options): Promise<BuildResult> {\n    this.browserProdBuilder = this.browserProdBuilder || this.makeBrowserProdBuilder(opts);\n    return this.rebuild(this.browserProdBuilder, 'js.prod');\n  }\n\n\n  public rebuildNodeTree(opts: Options): Promise<BuildResult> {\n    this.nodeBuilder = this.nodeBuilder || this.makeNodeBuilder(opts.projects);\n    return this.rebuild(this.nodeBuilder, 'js.cjs');\n  }\n\n\n  public rebuildDartTree(projects: ProjectMap): Promise<BuildResult> {\n    this.dartBuilder = this.dartBuilder || this.makeDartBuilder(projects);\n    return this.rebuild(this.dartBuilder, 'dart');\n  }\n\n\n  cleanup(): Promise<any> {\n    return Q.all([\n      this.nodeBuilder && this.nodeBuilder.cleanup(),\n      this.browserDevBuilder && this.browserDevBuilder.cleanup(),\n      this.browserProdBuilder && this.browserProdBuilder.cleanup()\n    ]);\n  }\n\n\n  private makeBrowserDevBuilder(opts: Options): BroccoliBuilder {\n    let tree = makeBrowserTree(\n        {\n          name: 'dev',\n          typeAssertions: true,\n          sourceMaps: true,\n          projects: opts.projects,\n          noTypeChecks: opts.noTypeChecks,\n          generateEs6: opts.generateEs6,\n          useBundles: opts.useBundles\n        },\n        path.join(this.outputPath, 'js', 'dev'));\n    return new broccoli.Builder(tree);\n  }\n\n\n  private makeBrowserProdBuilder(opts: Options): BroccoliBuilder {\n    let tree = makeBrowserTree(\n        {\n          name: 'prod',\n          typeAssertions: false,\n          sourceMaps: false,\n          projects: opts.projects,\n          noTypeChecks: opts.noTypeChecks,\n          generateEs6: opts.generateEs6,\n          useBundles: opts.useBundles\n        },\n        path.join(this.outputPath, 'js', 'prod'));\n    return new broccoli.Builder(tree);\n  }\n\n\n  private makeNodeBuilder(projects: ProjectMap): BroccoliBuilder {\n    let tree = makeNodeTree(projects, path.join(this.outputPath, 'js', 'cjs'));\n    return new broccoli.Builder(tree);\n  }\n\n\n  private makeDartBuilder(projects: ProjectMap): BroccoliBuilder {\n    let options = {\n      outputPath: path.join(this.outputPath, 'dart'),\n      dartSDK: this.options.dartSDK,\n      logs: this.options.logs,\n      projects: projects\n    };\n    // Workaround for https://github.com/dart-lang/dart_style/issues/493\n    var makeDartTree = require('./trees/dart_tree');\n    let tree = makeDartTree(options);\n    return new broccoli.Builder(tree);\n  }\n\n\n  private rebuild(builder: BroccoliBuilder, name: string): Promise<BuildResult> {\n    return builder.build().then<BuildResult>(\n        (result) => {\n          if (!this.firstResult) {\n            this.firstResult = result;\n          }\n\n          printSlowTrees(result.graph);\n          writeBuildLog(result, name);\n          return result;\n        },\n        (error):\n            any => {\n              // the build tree is the same during rebuilds, only leaf properties of the nodes\n              // change\n              // so let's traverse it and get updated values for input/cache/output paths\n              if (this.firstResult) {\n                writeBuildLog(this.firstResult, name);\n              }\n              throw error;\n            });\n  }\n}\n\n\nfunction writeBuildLog(result: BuildResult, name: string) {\n  let logPath = `tmp/build.${name}.log`;\n  let prevLogPath = logPath + '.previous';\n  let formattedLogContent = JSON.stringify(broccoliNodeToBuildNode(result.graph), null, 2);\n\n  if (fs.existsSync(prevLogPath)) fs.unlinkSync(prevLogPath);\n  if (fs.existsSync(logPath)) fs.renameSync(logPath, prevLogPath);\n  fs.writeFileSync(logPath, formattedLogContent, {encoding: 'utf-8'});\n}\n\n\nfunction broccoliNodeToBuildNode(broccoliNode: BroccoliNode): BuildNode {\n  let tree = broccoliNode.tree.newStyleTree || broccoliNode.tree;\n\n  return new BuildNode(\n      tree.description || (<any>tree.constructor).name,\n      tree.inputPath ? [tree.inputPath] : tree.inputPaths, tree.cachePath, tree.outputPath,\n      broccoliNode.selfTime / (1000 * 1000 * 1000), broccoliNode.totalTime / (1000 * 1000 * 1000),\n      broccoliNode.subtrees.map(broccoliNodeToBuildNode));\n}\n\n\nclass BuildNode {\n  constructor(\n      public pluginName: string, public inputPaths: string[], public cachePath: string,\n      public outputPath: string, public selfTime: number, public totalTime: number,\n      public inputNodes: BuildNode[]) {}\n}\n"]}
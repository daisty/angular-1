{"version":3,"file":"broccoli-generate-for-test.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-generate-for-test.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport childProcess = require('child_process');\nvar glob = require('glob');\n\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\n/**\n * Intercepts each changed file and replaces its contents with\n * the output of the generator.\n */\nclass GeneratorForTest implements DiffingBroccoliPlugin {\n  private seenFiles: {[key: string]: boolean} = {};\n\n  constructor(private inputPath: string, private outputPath: string, private options: {\n    files: string[],\n    dartPath: string\n  }) {}\n\n  rebuild(treeDiff: DiffResult) {\n    var matchedFiles: string[] = [];\n    this.options.files.forEach(\n        (file) => { matchedFiles = matchedFiles.concat(glob.sync(file, {cwd: this.inputPath})); });\n    return Promise\n        .all(matchedFiles.map((matchedFile) => {\n          var inputFilePath = path.join(this.inputPath, matchedFile);\n          var outputFilePath = path.join(this.outputPath, matchedFile);\n\n          var outputDirPath = path.dirname(outputFilePath);\n          if (!fs.existsSync(outputDirPath)) {\n            fse.mkdirpSync(outputDirPath);\n          }\n          return this.invokeGenerator(matchedFile, inputFilePath, outputFilePath)\n        }))\n        .then(() => {\n          var result = new DiffResult();\n          matchedFiles.forEach((file) => {\n            if (!this.seenFiles[file]) {\n              result.addedPaths.push(file);\n              this.seenFiles[file] = true;\n            } else {\n              result.changedPaths.push(file);\n            }\n          });\n          return result;\n        });\n  }\n\n  private invokeGenerator(file: string, inputFilePath: string, outputFilePath: string):\n      Promise<any> {\n    return new Promise((resolve, reject) => {\n      var args: string[];\n      var vmPath: string;\n      var env: {[key: string]: string};\n      if (this.options.dartPath) {\n        vmPath = this.options.dartPath;\n        args = [`--package-root=${this.inputPath}`, '--checked', inputFilePath, file];\n        env = {};\n      } else {\n        vmPath = process.execPath;\n        var script = `require('reflect-metadata');require('${inputFilePath}').main(['${file}']);`;\n        args = ['-e', script];\n        env = {'NODE_PATH': this.inputPath};\n      }\n\n      var stdoutStream = fs.createWriteStream(outputFilePath);\n      var proc = childProcess.spawn(vmPath, args, {\n        stdio: ['ignore', 'pipe', 'inherit'],\n        env: (<any>Object)['assign']({}, process.env, env)\n      });\n      proc.on('error', function(code: any) {\n        console.error(code);\n        reject(new Error(\n            'Failed while generating code. Please run manually: ' + vmPath + ' ' + args.join(' ')));\n      });\n      proc.on('close', function() {\n        stdoutStream.close();\n        resolve();\n      });\n      proc.stdout.pipe(stdoutStream);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(GeneratorForTest);\n"]}
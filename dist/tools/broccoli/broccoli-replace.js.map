{"version":3,"file":"broccoli-replace.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-replace.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\nvar minimatch = require('minimatch');\nvar FILE_ENCODING = {encoding: 'utf-8'};\n\n/**\n * Intercepts each changed file and replaces its contents with\n * the associated changes.\n */\nclass DiffingReplace implements DiffingBroccoliPlugin {\n  // TODO: define an interface for options\n  constructor(private inputPath: string, private cachePath: string, private options: any) {}\n\n  rebuild(treeDiff: DiffResult) {\n    var patterns = this.options.patterns;\n    var files = this.options.files;\n\n    treeDiff.addedPaths.concat(treeDiff.changedPaths).forEach((changedFilePath) => {\n      var sourceFilePath = path.join(this.inputPath, changedFilePath);\n      var destFilePath = path.join(this.cachePath, changedFilePath);\n      var destDirPath = path.dirname(destFilePath);\n\n      if (!fs.existsSync(destDirPath)) {\n        fse.mkdirpSync(destDirPath);\n      }\n\n      var fileMatches = files.some((filePath: string) => minimatch(changedFilePath, filePath));\n      if (fileMatches) {\n        var content = fs.readFileSync(sourceFilePath, FILE_ENCODING);\n        patterns.forEach((pattern: any) => {\n          var replacement = pattern.replacement;\n          if (typeof replacement === 'function') {\n            replacement = function(content: string) {\n              return pattern.replacement(content, changedFilePath);\n            };\n          }\n          content = content.replace(pattern.match, replacement);\n        });\n        fs.writeFileSync(destFilePath, content, FILE_ENCODING);\n      } else if (!fs.existsSync(destFilePath)) {\n        try {\n          fs.symlinkSync(sourceFilePath, destFilePath);\n        } catch (e) {\n          fs.writeFileSync(destFilePath, fs.readFileSync(sourceFilePath));\n        }\n      }\n    });\n\n    treeDiff.removedPaths.forEach((removedFilePath) => {\n      var destFilePath = path.join(this.cachePath, removedFilePath);\n      fs.unlinkSync(destFilePath);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(DiffingReplace);\n"]}
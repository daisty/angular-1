{"version":3,"file":"broccoli-dartfmt.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-dartfmt.ts"],"names":[],"mappings":"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","sourcesContent":["import fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\nimport {AngularBuilderOptions} from './angular_builder';\n\nvar spawn = require('child_process').spawn;\nvar exec = require('child_process').exec;\n\nfunction processToPromise(process: NodeJS.Process) {\n  return new Promise(function(resolve, reject) {\n    process.on('close', function(code: number) {\n      if (code) {\n        reject(code);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nclass DartFormatter implements DiffingBroccoliPlugin {\n  private DARTFMT: string;\n  private verbose: boolean;\n  private firstBuild: boolean = true;\n\n  constructor(public inputPath: string, public cachePath: string, options: AngularBuilderOptions) {\n    if (!options.dartSDK) throw new Error('Missing Dart SDK');\n    this.DARTFMT = options.dartSDK.DARTFMT;\n    this.verbose = options.logs.dartfmt;\n  }\n\n  rebuild(treeDiff: DiffResult): Promise<any> {\n    let args = ['-w'];\n    let argsLength = 2;\n    let argPackages: string[][] = [];\n    let firstBuild = this.firstBuild;\n    treeDiff.addedPaths.concat(treeDiff.changedPaths).forEach((changedFile) => {\n      let sourcePath = path.join(this.inputPath, changedFile);\n      let destPath = path.join(this.cachePath, changedFile);\n      if (!firstBuild && /\\.dart$/.test(changedFile)) {\n        if ((argsLength + destPath.length + 2) >= 0x2000) {\n          // Win32 command line arguments length\n          argPackages.push(args);\n          args = ['-w'];\n          argsLength = 2;\n        }\n        args.push(destPath);\n        argsLength += destPath.length + 2;\n      }\n      fse.copySync(sourcePath, destPath);\n    });\n    treeDiff.removedPaths.forEach((removedFile) => {\n      let destPath = path.join(this.cachePath, removedFile);\n      fse.removeSync(destPath);\n    });\n\n    if (!firstBuild && args.length > 1) {\n      argPackages.push(args);\n    }\n\n    let execute = (args: string[]) => {\n      if (args.length < 2) return Promise.resolve();\n      return new Promise<void>((resolve, reject) => {\n        exec(this.DARTFMT + ' ' + args.join(' '), (err: Error, stdout: string, stderr: string) => {\n          if (this.verbose) {\n            console.log(stdout);\n          }\n          if (err) {\n            console.error(shortenFormatterOutput(stderr));\n            reject('Formatting failed.');\n          } else {\n            resolve();\n          }\n        });\n      });\n    };\n\n    if (firstBuild) {\n      // On firstBuild, format the entire cachePath\n      this.firstBuild = false;\n      return execute(['-w', this.cachePath]);\n    }\n\n    return Promise.all(argPackages.map(execute));\n  }\n}\n\nexport default wrapDiffingPlugin(DartFormatter);\n\nvar ARROW_LINE = /^(\\s+)\\^+/;\nvar BEFORE_CHARS = 15;\nvar stripAnsi = require('strip-ansi');\nfunction shortenFormatterOutput(formatterOutput: string) {\n  var lines = formatterOutput.split('\\n');\n  var match: string, line: string;\n  for (var i = 0; i < lines.length; i += 1) {\n    line = lines[i];\n    if (match = stripAnsi(line).match(ARROW_LINE)) {\n      let leadingWhitespace = match[1].length;\n      let leadingCodeChars = Math.min(leadingWhitespace, BEFORE_CHARS);\n      lines[i] = line.substr(leadingWhitespace - leadingCodeChars);\n      lines[i - 1] = lines[i - 1].substr(leadingWhitespace - leadingCodeChars, 80) + 'â€¦';\n    }\n  }\n  return lines.join('\\n');\n}\n"]}
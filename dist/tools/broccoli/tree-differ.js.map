{"version":3,"file":"tree-differ.js","sourceRoot":"","sources":["../../../tools/broccoli/tree-differ.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require('fs');\nimport path = require('path');\n\n\nfunction tryStatSync(path: string) {\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    if (e.code === 'ENOENT') return null;\n    throw e;\n  }\n}\n\n\nexport class TreeDiffer {\n  private fingerprints: {[key: string]: string} = Object.create(null);\n  private nextFingerprints: {[key: string]: string} = Object.create(null);\n  private rootDirName: string;\n  private include: RegExp = null;\n  private exclude: RegExp = null;\n\n  constructor(\n      private label: string, private rootPath: string, includeExtensions?: string[],\n      excludeExtensions?: string[]) {\n    this.rootDirName = path.basename(rootPath);\n\n    let buildRegexp = (arr: string[]) => new RegExp(`(${arr.reduce(combine, \"\")})$`, 'i');\n\n    this.include = (includeExtensions || []).length ? buildRegexp(includeExtensions) : null;\n    this.exclude = (excludeExtensions || []).length ? buildRegexp(excludeExtensions) : null;\n\n    function combine(prev: string, curr: string) {\n      if (curr.charAt(0) !== '.') {\n        throw new Error(`Extension must begin with '.'. Was: '${curr}'`);\n      }\n      let kSpecialRegexpChars = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n      curr = '(' + curr.replace(kSpecialRegexpChars, '\\\\$&') + ')';\n      return prev ? (prev + '|' + curr) : curr;\n    }\n  }\n\n\n  public diffTree(): DiffResult {\n    let result = new DirtyCheckingDiffResult(this.label, this.rootDirName);\n    this.dirtyCheckPath(this.rootPath, result);\n    this.detectDeletionsAndUpdateFingerprints(result);\n    result.endTime = Date.now();\n    return result;\n  }\n\n\n  private dirtyCheckPath(rootDir: string, result: DirtyCheckingDiffResult) {\n    fs.readdirSync(rootDir).forEach((segment) => {\n      let absolutePath = path.join(rootDir, segment);\n      let pathStat = fs.lstatSync(absolutePath);\n      if (pathStat.isSymbolicLink()) {\n        pathStat = tryStatSync(absolutePath);\n        if (pathStat === null) return;\n      }\n\n      if (pathStat.isDirectory()) {\n        result.directoriesChecked++;\n        this.dirtyCheckPath(absolutePath, result);\n      } else {\n        if (!(this.include && !absolutePath.match(this.include)) &&\n            !(this.exclude && absolutePath.match(this.exclude))) {\n          result.filesChecked++;\n          let relativeFilePath = path.relative(this.rootPath, absolutePath);\n\n          switch (this.isFileDirty(absolutePath, pathStat)) {\n            case FileStatus.Added:\n              result.addedPaths.push(relativeFilePath);\n              break;\n            case FileStatus.Changed:\n              result.changedPaths.push(relativeFilePath);\n          }\n        }\n      }\n    });\n\n    return result;\n  }\n\n\n  private isFileDirty(path: string, stat: fs.Stats): FileStatus {\n    let oldFingerprint = this.fingerprints[path];\n    let newFingerprint = `${stat.mtime.getTime()} # ${stat.size}`;\n\n    this.nextFingerprints[path] = newFingerprint;\n\n    if (oldFingerprint) {\n      this.fingerprints[path] = null;\n\n      if (oldFingerprint === newFingerprint) {\n        // nothing changed\n        return FileStatus.Unchanged;\n      }\n\n      return FileStatus.Changed;\n    }\n\n    return FileStatus.Added;\n  }\n\n\n  private detectDeletionsAndUpdateFingerprints(result: DiffResult) {\n    for (let absolutePath in this.fingerprints) {\n      if (!(this.include && !absolutePath.match(this.include)) &&\n          !(this.exclude && absolutePath.match(this.exclude))) {\n        if (this.fingerprints[absolutePath] !== null) {\n          let relativePath = path.relative(this.rootPath, absolutePath);\n          result.removedPaths.push(relativePath);\n        }\n      }\n    }\n\n    this.fingerprints = this.nextFingerprints;\n    this.nextFingerprints = Object.create(null);\n  }\n}\n\n\nexport class DiffResult {\n  public addedPaths: string[] = [];\n  public changedPaths: string[] = [];\n  public removedPaths: string[] = [];\n\n  constructor(public label: string = '') {}\n\n  log(verbose: boolean): void {}\n\n  toString(): string {\n    // TODO(@caitp): more meaningful logging\n    return '';\n  }\n}\n\nclass DirtyCheckingDiffResult extends DiffResult {\n  public filesChecked: number = 0;\n  public directoriesChecked: number = 0;\n  public startTime: number = Date.now();\n  public endTime: number = null;\n\n  constructor(label: string, public directoryName: string) { super(label); }\n\n  toString() {\n    return `${pad(this.label, 30)}, ${pad(this.endTime - this.startTime, 5)}ms, ` +\n        `${pad(this.addedPaths.length + this.changedPaths.length + this.removedPaths.length, 5)} changes ` +\n        `(files: ${pad(this.filesChecked, 5)}, dirs: ${pad(this.directoriesChecked, 4)})`;\n  }\n\n  log(verbose: boolean) {\n    let prefixedPaths = this.addedPaths.map(p => `+ ${p}`)\n                            .concat(this.changedPaths.map(p => `* ${p}`))\n                            .concat(this.removedPaths.map(p => `- ${p}`));\n    console.log(\n        `Tree diff: ${this}` +\n        ((verbose && prefixedPaths.length) ? ` [\\n  ${prefixedPaths.join('\\n  ')}\\n]` : ''));\n  }\n}\n\n\nfunction pad(v: string | number, length: number) {\n  let value = '' + v;\n  let whitespaceLength = (value.length < length) ? length - value.length : 0;\n  whitespaceLength = whitespaceLength + 1;\n  return new Array(whitespaceLength).join(' ') + value;\n}\n\n\nenum FileStatus {\n  Added,\n  Unchanged,\n  Changed\n}\n"]}
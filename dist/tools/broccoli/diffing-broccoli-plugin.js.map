{"version":3,"file":"diffing-broccoli-plugin.js","sourceRoot":"","sources":["../../../tools/broccoli/diffing-broccoli-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"broccoli.d.ts\" />\n\nimport fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {TreeDiffer, DiffResult} from './tree-differ';\nimport stabilizeTree from './broccoli-tree-stabilizer';\nlet symlinkOrCopy = require('symlink-or-copy');\n\nexport {DiffResult} from './tree-differ';\n\nexport type PluginClass = any;\n\n/**\n * Makes writing diffing plugins easy.\n *\n * Factory method that takes a class that implements the DiffingBroccoliPlugin interface and returns\n * an instance of BroccoliTree.\n */\nexport function wrapDiffingPlugin(pluginClass: PluginClass): DiffingPluginWrapperFactory {\n  return function() { return new DiffingPluginWrapper(pluginClass, arguments) };\n}\n\n\nexport interface DiffingBroccoliPlugin {\n  rebuild(diff: (DiffResult|DiffResult[])): (Promise<DiffResult|void>|DiffResult|void);\n  cleanup?(): void;\n}\n\n\nexport type DiffingPluginWrapperFactory =\n    (inputTrees: (BroccoliTree | BroccoliTree[]), options?: any) => BroccoliTree;\n\n\nclass DiffingPluginWrapper implements BroccoliTree {\n  treeDiffer: TreeDiffer = null;\n  treeDiffers: TreeDiffer[] = null;\n  initialized = false;\n  wrappedPlugin: DiffingBroccoliPlugin = null;\n  inputTree: BroccoliTree = null;\n  inputTrees: BroccoliTree[] = null;\n  description: string = null;\n\n  // props monkey-patched by broccoli builder:\n  inputPath: string = null;\n  inputPaths: string[] = null;\n  cachePath: string = null;\n  outputPath: string = null;\n\n  private diffResult: DiffResult = null;\n\n  constructor(private pluginClass: PluginClass, private wrappedPluginArguments: IArguments) {\n    if (Array.isArray(wrappedPluginArguments[0])) {\n      this.inputTrees = this.stabilizeTrees(wrappedPluginArguments[0]);\n    } else {\n      this.inputTree = this.stabilizeTree(wrappedPluginArguments[0]);\n    }\n\n    this.description = this.pluginClass.name;\n  }\n\n  private getDiffResult(): (DiffResult|DiffResult[]) {\n    let returnOrCalculateDiffResult = (tree: BroccoliTree, index: number) => {\n      // returnOrCalculateDiffResult will do one of two things:\n      //\n      // If `this.diffResult` is null, calculate a DiffResult using TreeDiffer\n      // for the input tree.\n      //\n      // Otherwise, `this.diffResult` was produced from the output of the\n      // inputTree's rebuild() method, and can be used without being checked.\n      // Set `this.diffResult` to null and return the previously stored value.\n      let diffResult = this.diffResult;\n      if (diffResult) return diffResult;\n      let differ = index === -1 ? this.treeDiffer : this.treeDiffers[index];\n      return differ.diffTree();\n    };\n\n    if (this.inputTrees) {\n      return this.inputTrees.map(returnOrCalculateDiffResult);\n    } else if (this.inputTree) {\n      return returnOrCalculateDiffResult(this.inputTree, -1);\n    } else {\n      throw new Error('Missing TreeDiffer');\n    }\n  }\n\n  private maybeStoreDiffResult(value: (DiffResult|void)) {\n    if (!(value instanceof DiffResult)) value = null;\n    this.diffResult = <DiffResult>(value);\n  }\n\n  rebuild(): (Promise<any>|void) {\n    try {\n      let firstRun = !this.initialized;\n      this.init();\n\n      let diffResult = this.getDiffResult();\n\n      let result = this.wrappedPlugin.rebuild(diffResult);\n\n      if (result) {\n        let resultPromise = <Promise<DiffResult|void>>(result);\n        if (resultPromise.then) {\n          // rebuild() -> Promise<>\n          return resultPromise.then((result: (DiffResult | void)) => {\n            this.maybeStoreDiffResult(result);\n            this.relinkOutputAndCachePaths();\n          });\n        }\n      }\n\n      this.maybeStoreDiffResult(<(DiffResult | void)>(result));\n      this.relinkOutputAndCachePaths();\n    } catch (e) {\n      e.message = `[${this.description}]: ${e.message}`;\n      throw e;\n    }\n  }\n\n\n  cleanup() {\n    if (this.wrappedPlugin && this.wrappedPlugin.cleanup) {\n      this.wrappedPlugin.cleanup();\n    }\n  }\n\n\n  private relinkOutputAndCachePaths() {\n    // just symlink the cache and output tree\n    fs.rmdirSync(this.outputPath);\n    symlinkOrCopy.sync(this.cachePath, this.outputPath);\n  }\n\n\n  private init() {\n    if (!this.initialized) {\n      let includeExtensions = this.pluginClass.includeExtensions || [];\n      let excludeExtensions = this.pluginClass.excludeExtensions || [];\n      let description = this.description;\n      this.initialized = true;\n      if (this.inputPaths) {\n        this.treeDiffers = this.inputPaths.map(\n            (inputPath) =>\n                new TreeDiffer(description, inputPath, includeExtensions, excludeExtensions));\n      } else if (this.inputPath) {\n        this.treeDiffer =\n            new TreeDiffer(description, this.inputPath, includeExtensions, excludeExtensions);\n      }\n      this.wrappedPlugin = new this.pluginClass(\n          this.inputPaths || this.inputPath, this.cachePath, this.wrappedPluginArguments[1]);\n    }\n  }\n\n\n  private stabilizeTrees(trees: BroccoliTree[]) {\n    // Prevent extensions to prevent array from being mutated from the outside.\n    // For-loop used to avoid re-allocating a new array.\n    var stableTrees: BroccoliTree[] = [];\n    for (let i = 0; i < trees.length; ++i) {\n      // ignore null/undefined input tries in order to support conditional build pipelines\n      if (trees[i]) {\n        stableTrees.push(this.stabilizeTree(trees[i]));\n      }\n    }\n\n    if (stableTrees.length === 0) {\n      throw new Error('No input trees provided!');\n    }\n\n    return Object.freeze(stableTrees);\n  }\n\n\n  private stabilizeTree(tree: BroccoliTree) {\n    // Ignore all DiffingPlugins as they are already stable, for others we don't know for sure\n    // so we need to stabilize them.\n    // Since it's not safe to use instanceof operator in node, we are checking the constructor.name.\n    //\n    // New-style/rebuild trees should always be stable.\n    let isNewStyleTree =\n        !!(tree['newStyleTree'] || typeof tree.rebuild === 'function' ||\n           (<any>tree)['isReadAPICompatTree'] || (<any>tree).constructor['name'] === 'Funnel');\n\n    return isNewStyleTree ? tree : stabilizeTree(tree);\n  }\n}\n"]}
{"version":3,"file":"multi_copy.js","sourceRoot":"","sources":["../../../tools/broccoli/multi_copy.ts"],"names":[],"mappings":"AAAA,+CAA+C;;;;;;;AAE/C,IAAO,MAAM,WAAW,iBAAiB,CAAC,CAAC;AAC3C,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,GAAG,WAAW,UAAU,CAAC,CAAC;AACjC,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACrC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAW3B;;;GAGG;AACH;IAA+B,6BAAM;IACnC,mBAAoB,SAAuB,EAAU,OAAyB;QAAI,iBAAO,CAAC;QAAtE,cAAS,GAAT,SAAS,CAAc;QAAU,YAAO,GAAP,OAAO,CAAkB;IAAa,CAAC;IAE5F,yBAAK,GAAL,UAAM,QAAiD,EAAE,OAAe;QAAxE,iBAmBC;QAlBC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,SAAiB;YACrD,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;YAEhF,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO;gBACzC,IAAI,KAAK,GAAa,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACzC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAA5B,CAA4B,CAAC,CAAC;gBACxD,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;oBACzB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAAlB,CAAkB,CAAC,EAAxD,CAAwD,CAAC,CAAC;gBACtF,CAAC;gBACD,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;oBACb,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;oBACnC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;oBAC7C,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,gBAAC;AAAD,CAAC,AAvBD,CAA+B,MAAM,GAuBpC;AAvBY,iBAAS,YAuBrB,CAAA","sourcesContent":["/// <reference path=\"./broccoli-writer.d.ts\" />\n\nimport Writer = require('broccoli-writer');\nimport fs = require('fs');\nimport fsx = require('fs-extra');\nvar minimatch = require('minimatch');\nvar path = require('path');\nvar glob = require('glob');\n\nexport interface MultiCopyOptions {\n  /** The path of the file to copy. */\n  srcPath: string;\n  /** A list of glob patterns of folders to copy to, matched against the input tree. */\n  targetPatterns: string[];\n  /** List of glob patterns to *not* copy to, matched against the matches from `targetPatterns`. */\n  exclude?: string[];\n}\n\n/**\n * A writer that copies an input file from an input path into (potentially many) output locations\n * given by glob patterns, .\n */\nexport class MultiCopy extends Writer {\n  constructor(private inputTree: BroccoliTree, private options: MultiCopyOptions) { super(); }\n\n  write(readTree: (tree: BroccoliTree) => Promise<string>, destDir: string): Promise<any> {\n    return readTree(this.inputTree).then((inputPath: string) => {\n      var fileName = path.basename(this.options.srcPath);\n      var data = fs.readFileSync(path.join(inputPath, this.options.srcPath), 'utf-8');\n\n      this.options.targetPatterns.forEach(pattern => {\n        var paths: string[] = glob.sync(pattern);\n        paths = paths.filter(p => fs.statSync(p).isDirectory());\n        if (this.options.exclude) {\n          paths = paths.filter(p => !this.options.exclude.some((excl) => minimatch(p, excl)));\n        }\n        paths.forEach(p => {\n          var folder = path.join(destDir, p);\n          fsx.mkdirsSync(folder);\n          var outputPath = path.join(folder, fileName);\n          fs.writeFileSync(outputPath, data);\n        });\n      });\n    });\n  }\n}\n"]}
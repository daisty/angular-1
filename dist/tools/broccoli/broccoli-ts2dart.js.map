{"version":3,"file":"broccoli-ts2dart.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-ts2dart.ts"],"names":[],"mappings":";AAAA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAE1B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,wCAAmE,2BAA2B,CAAC,CAAA;AAE/F;IAKE,4BACW,SAAiB,EAAS,SAAiB,EAC3C,OAAY,CAAC,6BAA6B;QAD1C,cAAS,GAAT,SAAS,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;QAC3C,YAAO,GAAP,OAAO,CAAK;QACrB,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC7B,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC1D,oEAAoE;QACpE,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,oCAAO,GAAP,UAAQ,QAAoB;QAA5B,iBA6BC;QA5BC,IAAI,MAAM,GAAG;YACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,sCAAsC,CAAC;YACpE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,+CAA+C,CAAC;YAC7E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,uDAAuD,CAAC;SACtF,CAAC;QACF,IAAI,eAAe,GAAG,UAAC,IAAY,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,EAA1C,CAA0C,CAAC;QACnF,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,WAAW;YACpE,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAE9D,yDAAyD;YACzD,IAAI,iBAAiB,GAAG,eAAe,CAAC,aAAa,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;gBAAC,MAAM,CAAC;YAE7C,qBAAqB;YACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;YACxC,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAE7D,yDAAyD;YACzD,IAAI,iBAAiB,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;YACtD,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;gBAAC,MAAM,CAAC;YAE7C,IAAI,kBAAkB,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;YACtD,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IA3CM,oCAAiB,GAAG,CAAC,KAAK,CAAC,CAAC;IA4CrC,yBAAC;AAAD,CAAC,AA7CD,IA6CC;AAED;kBAAe,2CAAiB,CAAC,kBAAkB,CAAC,CAAC","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\n\nclass TSToDartTranspiler implements DiffingBroccoliPlugin {\n  static includeExtensions = ['.ts'];\n\n  private transpiler: any /*ts2dart.Transpiler*/;\n\n  constructor(\n      public inputPath: string, public cachePath: string,\n      public options: any /*ts2dart.TranspilerOptions*/) {\n    options.basePath = inputPath;\n    options.tsconfig = path.join(inputPath, options.tsconfig);\n    // Workaround for https://github.com/dart-lang/dart_style/issues/493\n    var ts2dart = require('ts2dart');\n    this.transpiler = new ts2dart.Transpiler(options);\n  }\n\n  rebuild(treeDiff: DiffResult) {\n    let toEmit = [\n      path.resolve(this.inputPath, 'angular2/manual_typings/globals.d.ts'),\n      path.resolve(this.inputPath, 'angular2/typings/es6-promise/es6-promise.d.ts'),\n      path.resolve(this.inputPath, 'angular2/typings/es6-collections/es6-collections.d.ts')\n    ];\n    let getDartFilePath = (path: string) => path.replace(/((\\.js)|(\\.ts))$/i, '.dart');\n    treeDiff.addedPaths.concat(treeDiff.changedPaths).forEach((changedPath) => {\n      let inputFilePath = path.resolve(this.inputPath, changedPath);\n\n      // Ignore files which don't need to be transpiled to Dart\n      let dartInputFilePath = getDartFilePath(inputFilePath);\n      if (fs.existsSync(dartInputFilePath)) return;\n\n      // Prepare to rebuild\n      toEmit.push(path.resolve(this.inputPath, changedPath));\n    });\n\n    treeDiff.removedPaths.forEach((removedPath) => {\n      let absolutePath = path.resolve(this.inputPath, removedPath);\n\n      // Ignore files which don't need to be transpiled to Dart\n      let dartInputFilePath = getDartFilePath(absolutePath);\n      if (fs.existsSync(dartInputFilePath)) return;\n\n      let dartOutputFilePath = getDartFilePath(removedPath);\n      fs.unlinkSync(path.join(this.cachePath, dartOutputFilePath));\n    });\n    this.transpiler.transpile(toEmit, this.cachePath);\n  }\n}\n\nexport default wrapDiffingPlugin(TSToDartTranspiler);\n"]}
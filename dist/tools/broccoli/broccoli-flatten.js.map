{"version":3,"file":"broccoli-flatten.js","sourceRoot":"","sources":["../../../tools/broccoli/broccoli-flatten.ts"],"names":[],"mappings":";AAAA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,GAAG,WAAW,UAAU,CAAC,CAAC;AACjC,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,wCAAmE,2BAA2B,CAAC,CAAA;AAG/F,IAAI,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;AAEpD,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC;AAG7C;;;GAGG;AACH;IACE,wBACY,SAAiB,EAAU,SAAiB,EAC5C,OAA8B;QAD9B,cAAS,GAAT,SAAS,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAQ;QAC5C,YAAO,GAAP,OAAO,CAAuB;IAAG,CAAC;IAG9C,gCAAO,GAAP,UAAQ,QAAoB;QAA5B,iBA+BC;QA9BC,IAAI,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC;QAExC,qFAAqF;QACrF,sEAAsE;QACtE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC;QAED,aAAa,CAAC,OAAO,CAAC,UAAC,eAAe;YACpC,IAAI,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;YAChE,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;YAC7E,IAAI,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAE7C,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAChC,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAC9B,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACjC,aAAa,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;YAC9C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,IAAI,KAAK,CACX,sBAAmB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAI;oBACrD,qBAAkB,eAAe,OAAG,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,eAAe;YAC5C,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;YAC7E,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IACH,qBAAC;AAAD,CAAC,AAtCD,IAsCC;AAtCY,sBAAc,iBAsC1B,CAAA;AAED;kBAAe,2CAAiB,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\nimport {AngularBuilderOptions} from './angular_builder';\n\nvar symlinkOrCopy = require('symlink-or-copy').sync;\n\nvar isWindows = process.platform === 'win32';\n\n\n/**\n * Intercepts each changed file and replaces its contents with\n * the associated changes.\n */\nexport class DiffingFlatten implements DiffingBroccoliPlugin {\n  constructor(\n      private inputPath: string, private cachePath: string,\n      private options: AngularBuilderOptions) {}\n\n\n  rebuild(treeDiff: DiffResult) {\n    let pathsToUpdate = treeDiff.addedPaths;\n\n    // since we need to run on Windows as well we can't rely on symlinks being available,\n    // which means that we need to respond to both added and changed paths\n    if (isWindows) {\n      pathsToUpdate = pathsToUpdate.concat(treeDiff.changedPaths);\n    }\n\n    pathsToUpdate.forEach((changedFilePath) => {\n      var sourceFilePath = path.join(this.inputPath, changedFilePath);\n      var destFilePath = path.join(this.cachePath, path.basename(changedFilePath));\n      var destDirPath = path.dirname(destFilePath);\n\n      if (!fs.existsSync(destDirPath)) {\n        fse.mkdirpSync(destDirPath);\n      }\n\n      if (!fs.existsSync(destFilePath)) {\n        symlinkOrCopy(sourceFilePath, destFilePath);\n      } else {\n        throw new Error(\n            `Duplicate file '${path.basename(changedFilePath)}' ` +\n            `found in path '${changedFilePath}'`);\n      }\n    });\n\n    treeDiff.removedPaths.forEach((removedFilePath) => {\n      var destFilePath = path.join(this.cachePath, path.basename(removedFilePath));\n      fs.unlinkSync(destFilePath);\n    });\n  }\n}\n\nexport default wrapDiffingPlugin(DiffingFlatten);\n"]}
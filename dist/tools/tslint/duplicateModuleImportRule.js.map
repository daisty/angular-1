{"version":3,"file":"duplicateModuleImportRule.js","sourceRoot":"","sources":["../../../tools/tslint/duplicateModuleImportRule.ts"],"names":[],"mappings":";;;;;;AAAA,uBAAyB,4BAA4B,CAAC,CAAA;AAEtD,sBAA2B,kBAAkB,CAAC,CAAA;AAC9C,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC;IAA0B,wBAAY;IAAtC;QAA0B,8BAAY;IAOtC,CAAC;IAJQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,IAAM,aAAa,GAAG,IAAI,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAC5E,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IAC7C,CAAC;IALa,mBAAc,GAAG,yBAAyB,CAAC;IAM3D,WAAC;AAAD,CAAC,AAPD,CAA0B,oBAAY,GAOrC;AAPY,YAAI,OAOhB,CAAA;AAED;IAAiC,sCAAU;IAA3C;QAAiC,8BAAU;QACzC,sBAAiB,GAAa,EAAE,CAAC;IAiCnC,CAAC;IA/BW,mDAAsB,GAAhC,UAAiC,IAA0B;QACzD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAChD,gBAAK,CAAC,sBAAsB,YAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAES,yDAA4B,GAAtC,UAAuC,IAAgC;QACrE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAChD,gBAAK,CAAC,4BAA4B,YAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEO,gDAAmB,GAA3B,UAA4B,QAAgB,EAAE,cAA2B,EAAE,IAAc;QACvF,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC;YAC3B,IAAI,EAAE,GAAG,gBAAgB,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC3D,EAAE,GAAmB,IAAK,CAAC,IAAI,CAAC;YAClC,CAAC;YACD,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;gBAAC,MAAM,CAAC;YACjC,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,EAAE,qBAAqB,GAAG,EAAE,GAAG,iBAAiB,CAAC,CAAC;YAC9F,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAEO,iDAAoB,GAA5B,UAA6B,eAAwB;QACnD,IAAI,IAAI,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,OAAO,GACP,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,gCAAgC,GAAG,IAAI,CAAC,CAAC;YAC7F,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IACH,yBAAC;AAAD,CAAC,AAlCD,CAAiC,mBAAU,GAkC1C","sourcesContent":["import {RuleWalker} from 'tslint/lib/language/walker';\nimport {RuleFailure} from 'tslint/lib/lint';\nimport {AbstractRule} from 'tslint/lib/rules';\nimport * as ts from 'typescript';\n\nexport class Rule extends AbstractRule {\n  public static FAILURE_STRING = 'duplicate module import';\n\n  public apply(sourceFile: ts.SourceFile): RuleFailure[] {\n    const typedefWalker = new ModuleImportWalker(sourceFile, this.getOptions());\n    return this.applyWithWalker(typedefWalker);\n  }\n}\n\nclass ModuleImportWalker extends RuleWalker {\n  importModulesSeen: string[] = [];\n\n  protected visitImportDeclaration(node: ts.ImportDeclaration): void {\n    this.visitModuleSpecifier(node.moduleSpecifier);\n    super.visitImportDeclaration(node);\n  }\n\n  protected visitImportEqualsDeclaration(node: ts.ImportEqualsDeclaration): void {\n    this.visitModuleSpecifier(node.moduleReference);\n    super.visitImportEqualsDeclaration(node);\n  }\n\n  private checkTypeAnnotation(location: number, typeAnnotation: ts.TypeNode, name?: ts.Node) {\n    if (typeAnnotation == null) {\n      let ns = '<name missing>';\n      if (name != null && name.kind === ts.SyntaxKind.Identifier) {\n        ns = (<ts.Identifier>name).text;\n      }\n      if (ns.charAt(0) === '_') return;\n      let failure = this.createFailure(location, 1, 'expected parameter ' + ns + ' to have a type');\n      this.addFailure(failure);\n    }\n  }\n\n  private visitModuleSpecifier(moduleSpecifier: ts.Node) {\n    var text = moduleSpecifier.getText();\n    if (this.importModulesSeen.indexOf(text) >= 0) {\n      let failure =\n          this.createFailure(moduleSpecifier.getEnd(), 1, 'Duplicate imports from module ' + text);\n      this.addFailure(failure);\n    }\n    this.importModulesSeen.push(text);\n  }\n}\n"]}
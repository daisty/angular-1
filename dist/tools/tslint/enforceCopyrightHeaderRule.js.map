{"version":3,"file":"enforceCopyrightHeaderRule.js","sourceRoot":"","sources":["../../../tools/tslint/enforceCopyrightHeaderRule.ts"],"names":[],"mappings":";;;;;;AAAA,uBAAyB,4BAA4B,CAAC,CAAA;AAEtD,sBAA2B,kBAAkB,CAAC,CAAA;AAG9C;IAA0B,wBAAY;IAAtC;QAA0B,8BAAY;IAOtC,CAAC;IAJQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,IAAM,MAAM,GAAG,IAAI,4BAA4B,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAC/E,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IALa,mBAAc,GAAG,0BAA0B,CAAC;IAM5D,WAAC;AAAD,CAAC,AAPD,CAA0B,oBAAY,GAOrC;AAPY,YAAI,OAOhB,CAAA;AAED;IAA2C,gDAAU;IAArD;QAA2C,8BAAU;QAC3C,UAAK,GAAW,gDAAgD,CAAC;IAgB3E,CAAC;IAdQ,sDAAe,GAAtB,UAAuB,IAAmB;QACxC,sBAAsB;QACtB,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QACD,gCAAgC;QAChC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAC/E,CAAC;IACH,CAAC;IACH,mCAAC;AAAD,CAAC,AAjBD,CAA2C,mBAAU,GAiBpD","sourcesContent":["import {RuleWalker} from 'tslint/lib/language/walker';\nimport {RuleFailure} from 'tslint/lib/lint';\nimport {AbstractRule} from 'tslint/lib/rules';\nimport * as ts from 'typescript';\n\nexport class Rule extends AbstractRule {\n  public static FAILURE_STRING = 'missing copyright header';\n\n  public apply(sourceFile: ts.SourceFile): RuleFailure[] {\n    const walker = new EnforceCopyrightHeaderWalker(sourceFile, this.getOptions());\n    return this.applyWithWalker(walker);\n  }\n}\n\nclass EnforceCopyrightHeaderWalker extends RuleWalker {\n  private regex: RegExp = /\\/\\*[\\s\\S]*?Copyright Google Inc\\.[\\s\\S]*?\\*\\//;\n\n  public visitSourceFile(node: ts.SourceFile) {\n    // check for a shebang\n    let text = node.getFullText();\n    let offset = 0;\n    if (text.indexOf('#!') === 0) {\n      offset = text.indexOf('\\n') + 1;\n      text = text.substring(offset);\n    }\n    // look for the copyright header\n    let match = text.match(this.regex);\n    if (!match || match.index !== 0) {\n      this.addFailure(this.createFailure(offset, offset + 1, Rule.FAILURE_STRING));\n    }\n  }\n}\n"]}
{"version":3,"file":"requireInternalWithUnderscoreRule.js","sourceRoot":"","sources":["../../../tools/tslint/requireInternalWithUnderscoreRule.ts"],"names":[],"mappings":";;;;;;AAAA,uBAAyB,4BAA4B,CAAC,CAAA;AAEtD,sBAA2B,kBAAkB,CAAC,CAAA;AAC9C,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC;IAA0B,wBAAY;IAAtC;QAA0B,8BAAY;IAKtC,CAAC;IAJQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,IAAM,aAAa,GAAG,IAAI,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IAC7C,CAAC;IACH,WAAC;AAAD,CAAC,AALD,CAA0B,oBAAY,GAKrC;AALY,YAAI,OAKhB,CAAA;AAED;IAA4B,iCAAU;IAAtC;QAA4B,8BAAU;IA+BtC,CAAC;IA9BW,gDAAwB,GAAlC,UAAmC,IAA4B;QAC7D,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC;QAC3C,gBAAK,CAAC,wBAAwB,YAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,8CAAsB,GAA7B,UAA8B,IAA0B;QACtD,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC;QAC3C,gBAAK,CAAC,sBAAsB,YAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAEO,6CAAqB,GAA7B,UAA8B,KAAsB;QAClD,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC;QACrC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEO,uDAA+B,GAAvC,UAAwC,IAAoB;QAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;YAAC,MAAM,CAAC;QAClD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC;QAE1E,IAAM,MAAM,GAAG,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/E,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAAC,MAAM,CAAC;YACpD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAC9B,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAChC,2BAAyB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,iCAA8B,CAAC,CAAC,CAAC;IACnF,CAAC;IACH,oBAAC;AAAD,CAAC,AA/BD,CAA4B,mBAAU,GA+BrC","sourcesContent":["import {RuleWalker} from 'tslint/lib/language/walker';\nimport {RuleFailure} from 'tslint/lib/lint';\nimport {AbstractRule} from 'tslint/lib/rules';\nimport * as ts from 'typescript';\n\nexport class Rule extends AbstractRule {\n  public apply(sourceFile: ts.SourceFile): RuleFailure[] {\n    const typedefWalker = new TypedefWalker(sourceFile, this.getOptions());\n    return this.applyWithWalker(typedefWalker);\n  }\n}\n\nclass TypedefWalker extends RuleWalker {\n  protected visitPropertyDeclaration(node: ts.PropertyDeclaration): void {\n    this.assertInternalAnnotationPresent(node);\n    super.visitPropertyDeclaration(node);\n  }\n\n  public visitMethodDeclaration(node: ts.MethodDeclaration): void {\n    this.assertInternalAnnotationPresent(node);\n    super.visitMethodDeclaration(node);\n  }\n\n  private hasInternalAnnotation(range: ts.CommentRange): boolean {\n    let text = this.getSourceFile().text;\n    let comment = text.substring(range.pos, range.end);\n    return comment.indexOf('@internal') >= 0;\n  }\n\n  private assertInternalAnnotationPresent(node: ts.Declaration) {\n    if (node.name.getText().charAt(0) !== '_') return;\n    if (node.modifiers && node.modifiers.flags & ts.NodeFlags.Private) return;\n\n    const ranges = ts.getLeadingCommentRanges(this.getSourceFile().text, node.pos);\n    if (ranges) {\n      for (let i = 0; i < ranges.length; i++) {\n        if (this.hasInternalAnnotation(ranges[i])) return;\n      }\n    }\n    this.addFailure(this.createFailure(\n        node.getStart(), node.getWidth(),\n        `module-private member ${node.name.getText()} must be annotated @internal`));\n  }\n}\n"]}
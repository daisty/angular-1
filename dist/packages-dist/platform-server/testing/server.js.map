{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-server/testing/server.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,yBAA4D,mBAAmB,CAAC,CAAA;AAChF,qBAAyM,eAAe,CAAC,CAAA;AACzN,wBAAkC,uBAAuB,CAAC,CAAA;AAC1D,wBAA0H,2CAA2C,CAAC,CAAA;AAEtK,6BAAsB,iBAAiB,CAAC,CAAA;AACxC,+BAA+B,uBAAuB,CAAC,CAAA;AAEvD;IACE,iCAAgB,CAAC,WAAW,EAAE,CAAC;AACjC,CAAC;AAED,IAAM,8BAA8B;AAChC,kBAAkB,CAAA;IAChB,8BAAuB;IACvB,qBAAqB,CAAC,EAAC,OAAO,EAAE,2BAAoB,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAC;IAC7F,EAAC,OAAO,EAAE,sBAAe,EAAE,QAAQ,EAAE,+CAAqC,EAAC;CAC5E,CAAC;AAEN;;;;GAIG;AACU,0BAAkB,GAC3B,4BAAqB,CAAC,YAAY,EAAE,8BAA8B,CAAC,CAAC;AACxE;IAAA;IAKA,CAAC;IAJD,kBAAkB;IACX,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,eAAQ,EAAE,IAAI,EAAE,CAAC,EAAC,OAAO,EAAE,CAAC,kCAAwB,CAAC,EAAC,EAAG,EAAE;KAClE,CAAC;IACF,uBAAC;AAAD,CAAC,AALD,IAKC;AALY,wBAAgB,mBAK5B,CAAA;AAED;;GAEG;AACU,sCAA8B;AACvC,+EAA+E;AAC/E,iCAAiC;AACjC,CAAC,UAAC,YAAmB;QACnB,IAAM,uBAAuB,GAAG,wDAA6C,CAAC,YAAY,CAAC,CAAC;QAC5F,IAAM,WAAW,GAAG,qBAAc,CAAC,yBAAkB,CAAC,gBAAgB,CAAC;YACrE,8BAA8B,EAAE;gBAC9B,OAAO,EAAE,sBAAe;gBACxB,QAAQ,EAAE,+CAAqC,CAAC,YAAY,CACxD,uBAAuB,CAAC,eAAe,CAAC;aAC7C;SACF,CAAC,CAAC,CAAC;QACJ;YAAA;YAKN,CAAC;YAJK,kBAAkB;YACjB,4BAAU,GAA0B;gBAC3C,EAAE,IAAI,EAAE,eAAQ,EAAE,IAAI,EAAE,CAAC,EAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,EAAE,YAAY,EAAE,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,EAAC,EAAG,EAAE;aACtH,CAAC;YACF,wBAAC;QAAD,CAAC,AALK,IAKL;QAEK,IAAM,YAAY,GAAG,6BAAmB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;QACzE,IAAM,OAAO,GAAY,YAAY,CAAC,GAAG,CAAC,sBAAO,CAAC,CAAC;QACnD,uBAAuB,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;AAEP;;GAEG;AACU,yCAAiC,GAA2C,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {analyzeAppProvidersForDeprecatedConfiguration} from '@angular/compiler';\nimport {CompilerFactory, NgModule, OpaqueToken, PLATFORM_CORE_PROVIDERS, PLATFORM_INITIALIZER, PlatformRef, ReflectiveInjector, assertPlatform, createPlatform, createPlatformFactory, getPlatform} from '@angular/core';\nimport {initTestEnvironment} from '@angular/core/testing';\nimport {BROWSER_DYNAMIC_TEST_COMPILER_FACTORY, BrowserDynamicTestModule, TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS} from '@angular/platform-browser-dynamic/testing';\n\nimport {Console} from '../core_private';\nimport {Parse5DomAdapter} from '../src/parse5_adapter';\n\nfunction initServerTests() {\n  Parse5DomAdapter.makeCurrent();\n}\n\nconst SERVER_TEST_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    /*@ts2dart_const*/[\n      PLATFORM_CORE_PROVIDERS,\n      /*@ts2dart_Provider*/ {provide: PLATFORM_INITIALIZER, useValue: initServerTests, multi: true},\n      {provide: CompilerFactory, useValue: BROWSER_DYNAMIC_TEST_COMPILER_FACTORY},\n    ];\n\n/**\n * Platform for testing\n *\n * @experimental API related to bootstrapping are still under review.\n */\nexport const serverTestPlatform =\n    createPlatformFactory('serverTest', SERVER_TEST_PLATFORM_PROVIDERS);\nexport class ServerTestModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{exports: [BrowserDynamicTestModule]}, ] },\n];\n}\n\n/**\n * @deprecated Use initTestEnvironment with serverTestPlatform instead.\n */\nexport const TEST_SERVER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    // Note: This is not a real provider but a hack to still support the deprecated\n    // `setBaseTestProviders` method!\n    [(appProviders: any[]) => {\n      const deprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration(appProviders);\n      const platformRef = createPlatform(ReflectiveInjector.resolveAndCreate([\n        SERVER_TEST_PLATFORM_PROVIDERS, {\n          provide: CompilerFactory,\n          useValue: BROWSER_DYNAMIC_TEST_COMPILER_FACTORY.withDefaults(\n              deprecatedConfiguration.compilerOptions)\n        }\n      ]));\n      class DynamicTestModule {\n      /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{exports: [ServerTestModule], declarations: [deprecatedConfiguration.moduleDeclarations]}, ] },\n];\n}\n\n      const testInjector = initTestEnvironment(DynamicTestModule, platformRef);\n      const console: Console = testInjector.get(Console);\n      deprecatedConfiguration.deprecationMessages.forEach((msg) => console.warn(msg));\n    }];\n\n/**\n * @deprecated Use initTestEnvironment with ServerTestModule instead.\n */\nexport const TEST_SERVER_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
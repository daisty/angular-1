{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../modules/@angular/platform-browser-dynamic/testing.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;AAEH,yBAA+H,mBAAmB,CAAC,CAAA;AACnJ,wBAA4G,2BAA2B,CAAC,CAAA;AACxI,qBAA0I,eAAe,CAAC,CAAA;AAC1J,wBAA+E,uBAAuB,CAAC,CAAA;AACvG,wBAAiE,mCAAmC,CAAC,CAAA;AAErG,6BAAsB,gBAAgB,CAAC,CAAA;AACvC,sBAAmF,SAAS,CAAC,CAAA;AAC7F,4CAAuC,uCAAuC,CAAC,CAAA;AAE/E,iBAAc,0BAOd,CAAC,EAPuC;AAExC;;;;GAIG;AACU,6CAAqC,GAAG,wCAAgC,CAAC,YAAY,CAAC;IACjG,SAAS,EAAE;QACT,EAAC,OAAO,EAAE,4BAAiB,EAAE,QAAQ,EAAE,+BAAqB,EAAC;QAC7D,EAAC,OAAO,EAAE,uBAAY,EAAE,QAAQ,EAAE,0BAAgB,EAAC;QACnD,EAAC,OAAO,EAAE,2BAAgB,EAAE,QAAQ,EAAE,8BAAoB,EAAC;KAC5D;CACF,CAAC,CAAC;AAGH;;;;GAIG;AACH,IAAM,uCAAuC,GAA2C;IACtF,yCAA+B;IAC/B,0CAAkC;IAClC,EAAC,OAAO,EAAE,sBAAe,EAAE,QAAQ,EAAE,6CAAqC,EAAC;CAC5E,CAAC;AAEF;;GAEG;AACU,kCAA0B,GACnC,4BAAqB,CAAC,oBAAoB,EAAE,uCAAuC,CAAC,CAAC;AACzF;IAAA;IAWA,CAAC;IAVD,kBAAkB;IACX,mCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,eAAQ,EAAE,IAAI,EAAE,CAAC;oBACvB,OAAO,EAAE,CAAC,2BAAiB,CAAC;oBAC5B,SAAS,EAAE;wBACT,EAAC,OAAO,EAAE,8BAAoB,EAAE,QAAQ,EAAE,wCAA8B,EAAC;wBACzE,EAAC,OAAO,EAAE,+BAAqB,EAAE,QAAQ,EAAE,sDAAwB,EAAC;qBACrE;iBACF,EAAG,EAAE;KACL,CAAC;IACF,+BAAC;AAAD,CAAC,AAXD,IAWC;AAXY,gCAAwB,2BAWpC,CAAA;AAED;;GAEG;AACU,+CAAuC;AAChD,+EAA+E;AAC/E,iCAAiC;AACjC,CAAC,UAAC,YAAmB;QACnB,IAAM,uBAAuB,GAAG,wDAA6C,CAAC,YAAY,CAAC,CAAC;QAC5F,IAAM,WAAW,GAAG,qBAAc,CAAC,yBAAkB,CAAC,gBAAgB,CAAC;YACrE,uCAAuC,EAAE;gBACvC,OAAO,EAAE,sBAAe;gBACxB,QAAQ,EAAE,6CAAqC,CAAC,YAAY,CACxD,uBAAuB,CAAC,eAAe,CAAC;aAC7C;SACF,CAAC,CAAC,CAAC;QACJ;YAAA;YAQN,CAAC;YAPK,kBAAkB;YACjB,4BAAU,GAA0B;gBAC3C,EAAE,IAAI,EAAE,eAAQ,EAAE,IAAI,EAAE,CAAC;4BACjB,OAAO,EAAE,CAAC,wBAAwB,CAAC;4BACnC,YAAY,EAAE,CAAC,uBAAuB,CAAC,kBAAkB,CAAC;yBAC3D,EAAG,EAAE;aACX,CAAC;YACF,wBAAC;QAAD,CAAC,AARK,IAQL;QAEK,IAAM,YAAY,GAAG,6BAAmB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;QACzE,IAAM,OAAO,GAAY,YAAY,CAAC,GAAG,CAAC,sBAAO,CAAC,CAAC;QACnD,uBAAuB,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;AAEP;;GAEG;AACU,kDAA0C,GACnD,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig, DirectiveResolver, NgModuleResolver, ViewResolver, analyzeAppProvidersForDeprecatedConfiguration} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockViewResolver, OverridingTestComponentBuilder} from '@angular/compiler/testing';\nimport {Compiler, CompilerFactory, NgModule, PlatformRef, Provider, ReflectiveInjector, Type, createPlatform, createPlatformFactory} from '@angular/core';\nimport {TestComponentBuilder, TestComponentRenderer, initTestEnvironment} from '@angular/core/testing';\nimport {BrowserTestModule, TEST_BROWSER_PLATFORM_PROVIDERS} from '@angular/platform-browser/testing';\n\nimport {Console} from './core_private';\nimport {BROWSER_DYNAMIC_COMPILER_FACTORY, BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from './index';\nimport {DOMTestComponentRenderer} from './testing/dom_test_component_renderer';\n\nexport * from './private_export_testing'\n\n/**\n * CompilerFactory for browser dynamic test platform\n *\n * @experimental\n */\nexport const BROWSER_DYNAMIC_TEST_COMPILER_FACTORY = BROWSER_DYNAMIC_COMPILER_FACTORY.withDefaults({\n  providers: [\n    {provide: DirectiveResolver, useClass: MockDirectiveResolver},\n    {provide: ViewResolver, useClass: MockViewResolver},\n    {provide: NgModuleResolver, useClass: MockNgModuleResolver}\n  ]\n});\n\n\n/**\n * Providers for the browser dynamic platform\n *\n * @experimental\n */\nconst BROWSER_DYNAMIC_TEST_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  TEST_BROWSER_PLATFORM_PROVIDERS,\n  BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n  {provide: CompilerFactory, useValue: BROWSER_DYNAMIC_TEST_COMPILER_FACTORY},\n];\n\n/**\n * @experimental API related to bootstrapping are still under review.\n */\nexport const browserDynamicTestPlatform =\n    createPlatformFactory('browserDynamicTest', BROWSER_DYNAMIC_TEST_PLATFORM_PROVIDERS);\nexport class BrowserDynamicTestModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserTestModule],\n  providers: [\n    {provide: TestComponentBuilder, useClass: OverridingTestComponentBuilder},\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n}, ] },\n];\n}\n\n/**\n * @deprecated Use initTestEnvironment with browserDynamicTestPlatform instead.\n */\nexport const TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    // Note: This is not a real provider but a hack to still support the deprecated\n    // `setBaseTestProviders` method!\n    [(appProviders: any[]) => {\n      const deprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration(appProviders);\n      const platformRef = createPlatform(ReflectiveInjector.resolveAndCreate([\n        BROWSER_DYNAMIC_TEST_PLATFORM_PROVIDERS, {\n          provide: CompilerFactory,\n          useValue: BROWSER_DYNAMIC_TEST_COMPILER_FACTORY.withDefaults(\n              deprecatedConfiguration.compilerOptions)\n        }\n      ]));\n      class DynamicTestModule {\n      /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n        exports: [BrowserDynamicTestModule],\n        declarations: [deprecatedConfiguration.moduleDeclarations]\n      }, ] },\n];\n}\n\n      const testInjector = initTestEnvironment(DynamicTestModule, platformRef);\n      const console: Console = testInjector.get(Console);\n      deprecatedConfiguration.deprecationMessages.forEach((msg) => console.warn(msg));\n    }];\n\n/**\n * @deprecated Use initTestEnvironment with BrowserDynamicTestModule instead.\n */\nexport const TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    [];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
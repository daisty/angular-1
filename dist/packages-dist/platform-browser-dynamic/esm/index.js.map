{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser-dynamic/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RUNTIME_COMPILER_FACTORY, XHR, analyzeAppProvidersForDeprecatedConfiguration} from '@angular/compiler';\nimport {ApplicationRef, Compiler, CompilerFactory, CompilerOptions, ComponentRef, ComponentResolver, ExceptionHandler, NgModule, NgModuleRef, OpaqueToken, PLATFORM_DIRECTIVES, PLATFORM_INITIALIZER, PLATFORM_PIPES, PlatformRef, ReflectiveInjector, Type, assertPlatform, bootstrapModule, bootstrapModuleFactory, createPlatform, createPlatformFactory, getPlatform, isDevMode} from '@angular/core';\nimport {BROWSER_PLATFORM_PROVIDERS, BrowserModule, WORKER_APP_PLATFORM_PROVIDERS, WORKER_SCRIPT, WorkerAppModule, browserPlatform, workerAppPlatform, workerUiPlatform} from '@angular/platform-browser';\n\nimport {Console, ReflectionCapabilities, reflector} from './core_private';\nimport {getDOM, initDomAdapter} from './platform_browser_private';\nimport {PromiseWrapper} from './src/facade/async';\nimport {ConcreteType, isPresent, stringify} from './src/facade/lang';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {XHRImpl} from './src/xhr/xhr_impl';\n\n\n\n/**\n * @deprecated The compiler providers are already included in the {@link CompilerFactory} that is\n * contained the {@link browserDynamicPlatform}()`.\n */\nexport const BROWSER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [];\n\n/**\n * @experimental\n */\nexport const CACHED_TEMPLATE_PROVIDER: Array<any /*Type | Provider | any[]*/> =\n    [{provide: XHR, useClass: CachedXHR}];\n\nfunction initReflector() {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n}\n\n/**\n * CompilerFactory for the browser dynamic platform\n *\n * @experimental\n */\nexport const BROWSER_DYNAMIC_COMPILER_FACTORY =\n    RUNTIME_COMPILER_FACTORY.withDefaults({providers: [{provide: XHR, useClass: XHRImpl}]});\n\n/**\n * Providers for the browser dynamic platform\n *\n * @experimental\n */\nexport const BROWSER_DYNAMIC_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  BROWSER_PLATFORM_PROVIDERS,\n  {provide: CompilerFactory, useValue: BROWSER_DYNAMIC_COMPILER_FACTORY},\n  {provide: PLATFORM_INITIALIZER, useValue: initReflector, multi: true},\n];\n\n/**\n * @experimental API related to bootstrapping are still under review.\n */\nexport const browserDynamicPlatform =\n    createPlatformFactory('browserDynamic', BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API (version 1)\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * ## API (version 2)\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `providers`, `declarations`, `imports`, `precompile`: Defines the properties\n *   of the dynamically created module that is used to bootstrap the module.\n * - to configure the compiler, use the `compilerOptions` parameter.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n *\n * @experimental This api cannot be used with the offline compiler and thus is still subject to\n * change.\n */\n// Note: We are using typescript overloads here to have 2 function signatures!\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<C>>;\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    {providers, imports, declarations, precompile, compilerOptions}?: {\n      providers?: Array<any /*Type | Provider | any[]*/>,\n      declarations?: any[],\n      imports?: any[],\n      precompile?: any[],\n      compilerOptions?: CompilerOptions\n    }): Promise<ComponentRef<C>>;\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    customProvidersOrDynamicModule?: Array<any /*Type | Provider | any[]*/>| {\n      providers: Array<any /*Type | Provider | any[]*/>,\n      declarations?: any[],\n      imports: any[],\n      precompile: any[],\n      compilerOptions: CompilerOptions\n    }): Promise<ComponentRef<C>> {\n  let compilerOptions: CompilerOptions;\n  let providers: any[] = [];\n  let declarations: any[] = [];\n  let imports: any[] = [];\n  let precompile: any[] = [];\n  if (customProvidersOrDynamicModule instanceof Array) {\n    providers = customProvidersOrDynamicModule;\n  } else if (customProvidersOrDynamicModule) {\n    providers = normalizeArray(customProvidersOrDynamicModule.providers);\n    declarations = normalizeArray(customProvidersOrDynamicModule.declarations);\n    imports = normalizeArray(customProvidersOrDynamicModule.imports);\n    precompile = normalizeArray(customProvidersOrDynamicModule.precompile);\n    compilerOptions = customProvidersOrDynamicModule.compilerOptions;\n  }\n  const deprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration(providers);\n  compilerOptions =\n      CompilerFactory.mergeOptions(deprecatedConfiguration.compilerOptions, compilerOptions);\n  declarations = deprecatedConfiguration.moduleDeclarations.concat(declarations);\n  class DynamicModule {\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    providers: providers,\n    declarations: declarations.concat([appComponentType]),\n    imports: [BrowserModule, imports],\n    precompile: precompile.concat([appComponentType])\n  }, ] },\n];\n}\n\n  return bootstrapModule(DynamicModule, browserDynamicPlatform(), compilerOptions)\n      .then((moduleRef) => {\n        const console = moduleRef.injector.get(Console);\n        deprecatedConfiguration.deprecationMessages.forEach((msg) => console.warn(msg));\n        const appRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n        return appRef.bootstrap(appComponentType);\n      });\n}\n\n/**\n * @deprecated Call {@link workerUiPlatform}(workerScriptUi, customProviders) instead.\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<PlatformRef> {\n  console.warn(\n      'bootstrapWorkerUi is deprecated. Call workerUiPlatform(workerScriptUi, customProviders) instead.');\n  return Promise.resolve(workerUiPlatform(workerScriptUri, customProviders));\n}\n\n/**\n * @deprecated The compiler providers are already included in the {@link CompilerFactory} that is\n * contained the {@link workerAppPlatform}().\n */\nconst WORKER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [];\n\nconst WORKER_APP_DYNAMIC_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  WORKER_APP_PLATFORM_PROVIDERS,\n  {provide: CompilerFactory, useValue: BROWSER_DYNAMIC_COMPILER_FACTORY},\n  {provide: PLATFORM_INITIALIZER, useValue: initReflector, multi: true},\n];\n\n/**\n * @experimental API related to bootstrapping are still under review.\n */\nexport const workerAppDynamicPlatform =\n    createPlatformFactory('workerAppDynamic', WORKER_APP_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * @deprecated Create an {@link NgModule} that includes the {@link WorkerAppModule} and use {@link\n * bootstrapModule}\n * with the {@link workerAppDynamicPlatform}() instead.\n */\nexport function bootstrapWorkerApp<T>(\n    appComponentType: ConcreteType<T>,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<T>> {\n  console.warn(\n      'bootstrapWorkerApp is deprecated. Create an @NgModule that includes the `WorkerAppModule` and use `bootstrapModule` with the `workerAppDynamicPlatform()` instead.');\n\n  const deprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration(customProviders);\n  const compilerOptions = CompilerFactory.mergeOptions(deprecatedConfiguration.compilerOptions);\n  const declarations = [deprecatedConfiguration.moduleDeclarations.concat([appComponentType])];\n  class DynamicModule {\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    providers: customProviders,\n    declarations: declarations,\n    imports: [WorkerAppModule],\n    precompile: [appComponentType]\n  }, ] },\n];\n}\n\n  return bootstrapModule(DynamicModule, workerAppDynamicPlatform(), compilerOptions)\n      .then((moduleRef) => {\n        const console = moduleRef.injector.get(Console);\n        deprecatedConfiguration.deprecationMessages.forEach((msg) => console.warn(msg));\n        const appRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n        return appRef.bootstrap(appComponentType);\n      });\n}\n\nfunction normalizeArray(arr: any[]): any[] {\n  return arr ? arr : [];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
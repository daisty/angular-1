{"version":3,"file":"platform_core_providers.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/platform_core_providers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAII,EAAC,WAAW,EAAE,YAAY,EAAC,MAAM,mBAAmB;OACpD,EAAC,OAAO,EAAC,MAAM,WAAW;OAE1B,EAAC,SAAS,EAAE,SAAS,EAAC,MAAM,yBAAyB;OACrD,EAAC,eAAe,EAAC,MAAM,+BAA+B;OACtD,EAAC,mBAAmB,EAAC,MAAM,2BAA2B;AAE7D;IACE,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAED,IAAI,QAAc,CAAC,CAAE,oCAAoC;AAEzD;;;GAGG;AACH,OAAO,MAAM,uBAAuB,GAAmC;IACrE,YAAY,EAAE,EAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAC;IAC/D,EAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAC;IACtD,EAAC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,SAAS,EAAC,EAAE,mBAAmB,EAAE,OAAO;CACjF,CAAC;AAEF;;;;GAIG;AACH,OAAO,MAAM,yBAAyB,GAAG,uBAAuB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../src/facade/lang';\n\nimport {PlatformRef, PlatformRef_} from './application_ref';\nimport {Console} from './console';\nimport {Provider} from './di';\nimport {Reflector, reflector} from './reflection/reflection';\nimport {ReflectorReader} from './reflection/reflector_reader';\nimport {TestabilityRegistry} from './testability/testability';\n\nfunction _reflector(): Reflector {\n  return reflector;\n}\n\nvar __unused: Type;  // prevent missing use Dart warning.\n\n/**\n * A default set of providers which should be included in any Angular platform.\n * @experimental\n */\nexport const PLATFORM_CORE_PROVIDERS: Array<any|Type|Provider|any[]> = [\n  PlatformRef_, {provide: PlatformRef, useExisting: PlatformRef_},\n  {provide: Reflector, useFactory: _reflector, deps: []},\n  {provide: ReflectorReader, useExisting: Reflector}, TestabilityRegistry, Console\n];\n\n/**\n * A default set of providers which should be included in any Angular platform.\n *\n * @deprecated Use PLATFORM_CORE_PROVIDERS instead!\n */\nexport const PLATFORM_COMMON_PROVIDERS = PLATFORM_CORE_PROVIDERS;\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
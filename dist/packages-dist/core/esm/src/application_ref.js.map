{"version":3,"file":"application_ref.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/application_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,iBAAiB,EAAE,cAAc,EAAC,MAAM,qBAAqB;OAC9D,EAAC,WAAW,EAAC,MAAM,0BAA0B;OAC7C,EAAC,aAAa,EAAE,gBAAgB,EAAE,aAAa,EAAC,MAAM,0BAA0B;OAChF,EAAe,OAAO,EAAQ,OAAO,EAAE,SAAS,EAAE,SAAS,EAAC,MAAM,oBAAoB;OAEtF,EAAC,eAAe,EAAE,oBAAoB,EAAC,MAAM,sBAAsB;OAEnE,EAAC,OAAO,EAAC,MAAM,WAAW;OAC1B,EAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,kBAAkB,EAAuB,MAAM,MAAM;OAC3G,EAAW,eAAe,EAAkB,MAAM,mBAAmB;OACrE,EAAC,gBAAgB,EAAe,MAAM,4BAA4B;OAClE,EAAC,wBAAwB,EAAC,MAAM,qCAAqC;OAGrE,EAAa,cAAc,EAAE,QAAQ,EAAC,MAAM,mBAAmB;OAC/D,EAAC,WAAW,EAAE,mBAAmB,EAAC,MAAM,2BAA2B;OACnE,EAAC,MAAM,EAAc,MAAM,gBAAgB;AAElD,IAAI,QAAQ,GAAY,IAAI,CAAC;AAC7B,IAAI,cAAc,GAAY,KAAK,CAAC;AACpC,IAAI,SAAsB,CAAC;AAC3B,IAAI,iBAAiB,GAAY,KAAK,CAAC;AAEvC;;;;;;;;;GASG;AACH;IACE,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QACnB,uEAAuE;QACvE,MAAM,IAAI,aAAa,CAAC,+CAA+C,CAAC,CAAC;IAC3E,CAAC;IACD,QAAQ,GAAG,KAAK,CAAC;AACnB,CAAC;AAED;;;;;;GAMG;AACH;IACE,OAAO,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;AACvE,CAAC;AAED;;;;;;;GAOG;AACH;IACE,cAAc,GAAG,IAAI,CAAC;IACtB,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;GAKG;AACH,+BAA+B,QAAkB;IAC/C,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC5D,CAAC;IACD,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,IAAI,aAAa,CACnB,+EAA+E,CAAC,CAAC;IACvF,CAAC;IACD,iBAAiB,GAAG,IAAI,CAAC;IACzB,IAAI,CAAC;QACH,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;YAAS,CAAC;QACT,iBAAiB,GAAG,KAAK,CAAC;IAC5B,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAED;;;;GAIG;AACH,sCAAsC,IAAY,EAAE,SAAgB;IAElE,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC;IACpD,MAAM,CAAC,CAAC,cAAc,GAAU,EAAE;QAChC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACnB,cAAc,CAAC,kBAAkB,CAAC,gBAAgB,CAC9C,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,CAAC;QACnF,CAAC;QACD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,+BAA+B,aAAkB;IAC/C,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,aAAa,CAAC,qBAAqB,CAAC,CAAC;IACjD,CAAC;IACD,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/E,MAAM,IAAI,aAAa,CACnB,sFAAsF,CAAC,CAAC;IAC9F,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AAED;;;;GAIG;AACH;IACE,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChD,SAAS,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH;IACE,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC;AACxE,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,uCACI,aAAiC,EAAE,QAAqB;IAC1D,yEAAyE;IACzE,8DAA8D;IAC9D,4EAA4E;IAC5E,8CAA8C;IAC9C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAC,oBAAoB,EAAE,SAAS,EAAE,EAAC,CAAC,CAAC;IAC/D,MAAM,cAAc,GAChB,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAC,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAClG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;AAChE,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,gCACI,UAA2B,EAAE,QAAqB,EAClD,eAAe,GAAoB,EAAE;IACvC,MAAM,eAAe,GAAoB,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAChF,MAAM,QAAQ,GAAG,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;IACjE,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC;SAC3C,IAAI,CAAC,CAAC,aAAa,KAAK,sBAAsB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;SACxE,IAAI,CAAC,CAAC,SAAS;QACd,MAAM,MAAM,GAAmB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,MAAM,SAAS,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACT,CAAC;AAED;;;;;GAKG;AACH,8BACI,gBAAqC,EAAE,QAAkB;IAC3D,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;AACtF,CAAC;AAED;;;;;;GAMG;AACH,qCACI,aAAmB,EAAE,QAAkB;IACzC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;AACtF,CAAC;AAED;;;;;;;;;GASG;AACH;IAME;;;OAGG;IACH,IAAI,QAAQ,KAAe,MAAM,aAAa,EAAE,CAAC,CAAC,CAAC;;IAOnD,IAAI,QAAQ,KAAc,MAAM,aAAa,EAAE,CAAC,CAAC,CAAC;AACpD,CAAC;AACD,kCAAkC,WAAW;IAQ3C,YAAoB,SAAmB;QACrC,OAAO,CAAC;QADU,cAAS,GAAT,SAAS,CAAU;QAPvC,gBAAgB;QAChB,kBAAa,GAAqB,EAAE,CAAC;QACrC,gBAAgB;QAChB,sBAAiB,GAAe,EAAE,CAAC;QAE3B,cAAS,GAAY,KAAK,CAAC;QAIjC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,aAAa,CAAC,oDAAoD,CAAC,CAAC;QAChF,CAAC;QACD,IAAI,KAAK,GAA2B,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QAC9E,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,uBAAuB,CAAC,OAAmB,IAAU,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAE5F,IAAI,QAAQ,KAAe,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAEnD,IAAI,QAAQ,KAAK,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAEzC,cAAc,CAAC,MAAsB,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE3E,OAAO;QACL,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QACtE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,gBAAgB;IAChB,oBAAoB,CAAC,GAAmB,IAAU,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AASlG,CAAC;AARD,kBAAkB;AACX,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,CACA;AAED;;;;;;GAMG;AACH;IAsCE;;OAEG;IACH,IAAI,QAAQ,KAAe,MAAM,CAAW,aAAa,EAAE,CAAC,CAAC,CAAC;;IAE9D;;OAEG;IACH,IAAI,IAAI,KAAa,MAAM,CAAS,aAAa,EAAE,CAAC,CAAC,CAAC;;IAmBtD;;OAEG;IACH,IAAI,cAAc,KAAa,MAAM,CAAS,aAAa,EAAE,CAAC,CAAC,CAAC;;AAClE,CAAC;AACD,qCAAqC,cAAc;IAsBjD,YACY,SAAuB,EAAU,KAAa,EAAU,QAAiB,EACzE,SAAmB,EAAU,iBAAmC,EAChE,yBAAmD,EAAU,oBAAyC,EAAU,YAAyB,EAAE,KAAiB;QACtK,OAAO,CAAC;QAHE,cAAS,GAAT,SAAS,CAAc;QAAU,UAAK,GAAL,KAAK,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAS;QACzE,cAAS,GAAT,SAAS,CAAU;QAAU,sBAAiB,GAAjB,iBAAiB,CAAkB;QAChE,8BAAyB,GAAzB,yBAAyB,CAA0B;QAAU,yBAAoB,GAApB,oBAAoB,CAAqB;QAAU,iBAAY,GAAZ,YAAY,CAAa;QArBrJ,gBAAgB;QACR,wBAAmB,GAAe,EAAE,CAAC;QAC7C,gBAAgB;QACR,sBAAiB,GAAe,EAAE,CAAC;QAC3C,gBAAgB;QACR,oBAAe,GAAwB,EAAE,CAAC;QAClD,gBAAgB;QACR,wBAAmB,GAAW,EAAE,CAAC;QACzC,gBAAgB;QACR,wBAAmB,GAAwB,EAAE,CAAC;QACtD,gBAAgB;QACR,iBAAY,GAAY,KAAK,CAAC;QACtC,gBAAgB;QACR,yBAAoB,GAAY,KAAK,CAAC;QAU5C,IAAI,CAAC,oBAAoB,GAAG,SAAS,EAAE,CAAC;QACxC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC;YACpC,IAAI,gBAAgB,GAAmB,EAAE,CAAC;YAC1C,IAAI,oBAAkC,CAAC;YACvC,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACtC,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC5B,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC1B,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACpC,CAAC;gBACH,CAAC;YACH,CAAC;YACD,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,oBAAoB;oBAChB,cAAc,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;gBACjF,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC3B,oBAAoB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;YACD,MAAM,CAAC,oBAAoB,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,KAAkB;YACjE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,iBAAiB,CAAC,SAAS,CACvB,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC;IAED,yBAAyB,CAAC,QAA0C;QAClE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,uBAAuB,CAAC,OAAmB,IAAU,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAE5F,sBAAsB,CAAC,cAAiC;QACtD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAChD,CAAC;IAED,wBAAwB,CAAC,cAAiC;QACxD,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAC/D,CAAC;IAED,wBAAwB,KAAmB,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAE/E,GAAG,CAAC,QAAkB;QACpB,IAAI,MAAW,CAAC;QAChB,2DAA2D;QAC3D,wBAAwB;QACxB,kDAAkD;QAClD,mDAAmD;QACnD,2CAA2C;QAC3C,IAAI,SAAS,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;QAC3C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YACb,IAAI,CAAC;gBACH,MAAM,GAAG,QAAQ,EAAE,CAAC;gBACpB,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,cAAc,CAAC,IAAI,CACf,MAAM,EAAE,CAAC,GAAG,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAC5C,CAAC,GAAG,EAAE,UAAU;wBACd,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;wBAClC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;oBAC/C,CAAC,CAAC,CAAC;gBACT,CAAC;YACH,CAAE;YAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBACxC,MAAM,CAAC,CAAC;YACV,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;IACxD,CAAC;IAED,SAAS,CAAI,kBAAuD;QAClE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,aAAa,CACnB,wHAAwH,CAAC,CAAC;QAChI,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;YACd,IAAI,gBAAqC,CAAC;YAC1C,EAAE,CAAC,CAAC,kBAAkB,YAAY,gBAAgB,CAAC,CAAC,CAAC;gBACnD,gBAAgB,GAAG,kBAAkB,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,gBAAgB;oBACZ,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;YACjF,CAAC;YACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;YAC9D,IAAI,OAAO,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACrF,OAAO,CAAC,SAAS,CAAC,QAAQ,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAC1D,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC3B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC;qBACpC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YACxE,CAAC;YAED,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBAChB,IAAI,eAAe,GAAG,OAAO,GAAG,sCAAsC;oBACtC,sDAAsD,CAAC;gBACvF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iDAAiD,eAAe,EAAE,CAAC,CAAC;YACxF,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;IAChB,cAAc,CAAC,YAA+B;QAC5C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,gBAAgB;IAChB,gBAAgB,CAAC,YAA+B;QAC9C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAC9D,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,QAAQ,KAAe,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAEnD,IAAI,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAEzC,IAAI;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,MAAM,IAAI,aAAa,CAAC,2CAA2C,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,GAAG,eAAe,CAAC,UAAU,EAAE,CAAC;QACrC,IAAI,CAAC;YACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC;YACzE,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;YAC5E,CAAC;QACH,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,QAAQ,CAAC,CAAC,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IAED,OAAO;QACL,uCAAuC;QACvC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,cAAc,KAAa,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;AAiBnE,CAAC;AAjMC,gBAAgB;AACT,0BAAU,GAAe,cAAc,CAAC,uBAAuB,CAAC,CAAC;AAgL1E,kBAAkB;AACX,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,YAAY,GAAG;IACtB,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,OAAO,GAAG;IACjB,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,wBAAwB,GAAG;IAClC,EAAC,IAAI,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IAC/D,EAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IACvD,EAAC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAG,EAAC;CAC7F,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObservableWrapper, PromiseWrapper} from '../src/facade/async';\nimport {ListWrapper} from '../src/facade/collection';\nimport {BaseException, ExceptionHandler, unimplemented} from '../src/facade/exceptions';\nimport {ConcreteType, IS_DART, Type, isBlank, isPresent, isPromise} from '../src/facade/lang';\n\nimport {APP_INITIALIZER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {ChangeDetectorRef} from './change_detection/change_detector_ref';\nimport {Console} from './console';\nimport {Inject, Injectable, Injector, OpaqueToken, Optional, ReflectiveInjector, SkipSelf, forwardRef} from './di';\nimport {Compiler, CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {ComponentResolver} from './linker/component_resolver';\nimport {NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {NgZone, NgZoneError} from './zone/ng_zone';\n\nvar _devMode: boolean = true;\nvar _runModeLocked: boolean = false;\nvar _platform: PlatformRef;\nvar _inPlatformCreate: boolean = false;\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    // Cannot use BaseException as that ends up importing from facade/lang.\n    throw new BaseException('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n\n/**\n * Locks the run mode of Angular. After this has been called,\n * it can't be changed any more. I.e. `isDevMode()` will always\n * return the same value.\n *\n * @deprecated This is a noop now. {@link isDevMode} automatically locks the run mode on first call.\n */\nexport function lockRunMode(): void {\n  console.warn('lockRunMode() is deprecated and not needed any more.');\n}\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_inPlatformCreate) {\n    throw new BaseException('Already creating a platform...');\n  }\n  if (isPresent(_platform) && !_platform.disposed) {\n    throw new BaseException(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _inPlatformCreate = true;\n  try {\n    _platform = injector.get(PlatformRef);\n  } finally {\n    _inPlatformCreate = false;\n  }\n  return _platform;\n}\n\n/**\n * Creates a fatory for a platform\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatformFactory(name: string, providers: any[]): (extraProviders?: any[]) =>\n    PlatformRef {\n  const marker = new OpaqueToken(`Platform: ${name}`);\n  return (extraProviders: any[] = []) => {\n    if (!getPlatform()) {\n      createPlatform(ReflectiveInjector.resolveAndCreate(\n          providers.concat(extraProviders).concat({provide: marker, useValue: true})));\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there currently is a platform\n * which contains the given token as a provider.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  var platform = getPlatform();\n  if (isBlank(platform)) {\n    throw new BaseException('No platform exists!');\n  }\n  if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null))) {\n    throw new BaseException(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n  return platform;\n}\n\n/**\n * Dispose the existing platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function disposePlatform(): void {\n  if (isPresent(_platform) && !_platform.disposed) {\n    _platform.dispose();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function getPlatform(): PlatformRef {\n  return isPresent(_platform) && !_platform.disposed ? _platform : null;\n}\n\n/**\n * Creates an instance of an `@NgModule` for the given platform\n * for offline compilation.\n *\n * ## Simple Example\n *\n * ```typescript\n * my_module.ts:\n *\n * @NgModule({\n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n *\n * main.ts:\n * import {MyModuleNgFactory} from './my_module.ngfactory';\n * import {bootstrapModuleFactory} from '@angular/core';\n * import {browserPlatform} from '@angular/platform-browser';\n *\n * let moduleRef = bootstrapModuleFactory(MyModuleNgFactory, browserPlatform());\n * ```\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function bootstrapModuleFactory<M>(\n    moduleFactory: NgModuleFactory<M>, platform: PlatformRef): NgModuleRef<M> {\n  // Note: We need to create the NgZone _before_ we instantiate the module,\n  // as instantiating the module creates some providers eagerly.\n  // So we create a mini parent injector that just contains the new NgZone and\n  // pass that as parent to the NgModuleFactory.\n  const ngZone = new NgZone({enableLongStackTrace: isDevMode()});\n  const ngZoneInjector =\n      ReflectiveInjector.resolveAndCreate([{provide: NgZone, useValue: ngZone}], platform.injector);\n  return ngZone.run(() => moduleFactory.create(ngZoneInjector));\n}\n\n/**\n * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n *\n * ## Simple Example\n *\n * ```typescript\n * @NgModule({\n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n *\n * let moduleRef = bootstrapModule(MyModule, browserPlatform());\n * ```\n * @stable\n */\nexport function bootstrapModule<M>(\n    moduleType: ConcreteType<M>, platform: PlatformRef,\n    compilerOptions: CompilerOptions = {}): Promise<NgModuleRef<M>> {\n  const compilerFactory: CompilerFactory = platform.injector.get(CompilerFactory);\n  const compiler = compilerFactory.createCompiler(compilerOptions);\n  return compiler.compileNgModuleAsync(moduleType)\n      .then((moduleFactory) => bootstrapModuleFactory(moduleFactory, platform))\n      .then((moduleRef) => {\n        const appRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n        return appRef.waitForAsyncInitializers().then(() => moduleRef);\n      });\n}\n\n/**\n * Shortcut for ApplicationRef.bootstrap.\n * Requires a platform to be created first.\n *\n * @deprecated Use {@link bootstrapModuleFactory} instead.\n */\nexport function coreBootstrap<C>(\n    componentFactory: ComponentFactory<C>, injector: Injector): ComponentRef<C> {\n  throw new Error('coreBootstrap is deprecated. Use bootstrapModuleFactory instead.');\n}\n\n/**\n * Resolves the componentFactory for the given component,\n * waits for asynchronous initializers and bootstraps the component.\n * Requires a platform to be created first.\n *\n * @deprecated Use {@link bootstrapModule} instead.\n */\nexport function coreLoadAndBootstrap(\n    componentType: Type, injector: Injector): Promise<ComponentRef<any>> {\n  throw new Error('coreLoadAndBootstrap is deprecated. Use bootstrapModule instead.');\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when {@link bootstrap}() is called, or\n * explicitly by calling {@link createPlatform}().\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport abstract class PlatformRef {\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  abstract registerDisposeListener(dispose: () => void): void;\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector { throw unimplemented(); };\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  abstract dispose(): void;\n\n  get disposed(): boolean { throw unimplemented(); }\n}\nexport class PlatformRef_ extends PlatformRef {\n  /** @internal */\n  _applications: ApplicationRef[] = [];\n  /** @internal */\n  _disposeListeners: Function[] = [];\n\n  private _disposed: boolean = false;\n\n  constructor(private _injector: Injector) {\n    super();\n    if (!_inPlatformCreate) {\n      throw new BaseException('Platforms have to be created via `createPlatform`!');\n    }\n    let inits: Function[] = <Function[]>_injector.get(PLATFORM_INITIALIZER, null);\n    if (isPresent(inits)) inits.forEach(init => init());\n  }\n\n  registerDisposeListener(dispose: () => void): void { this._disposeListeners.push(dispose); }\n\n  get injector(): Injector { return this._injector; }\n\n  get disposed() { return this._disposed; }\n\n  addApplication(appRef: ApplicationRef) { this._applications.push(appRef); }\n\n  dispose(): void {\n    ListWrapper.clone(this._applications).forEach((app) => app.dispose());\n    this._disposeListeners.forEach((dispose) => dispose());\n    this._disposed = true;\n  }\n\n  /** @internal */\n  _applicationDisposed(app: ApplicationRef): void { ListWrapper.remove(this._applications, app); }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * For more about Angular applications, see the documentation for {@link bootstrap}.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport abstract class ApplicationRef {\n  /**\n   * Register a listener to be called each time `bootstrap()` is called to bootstrap\n   * a new root component.\n   */\n  abstract registerBootstrapListener(listener: (ref: ComponentRef<any>) => void): void;\n\n  /**\n   * Register a listener to be called when the application is disposed.\n   */\n  abstract registerDisposeListener(dispose: () => void): void;\n\n  /**\n   * Returns a promise that resolves when all asynchronous application initializers\n   * are done.\n   */\n  abstract waitForAsyncInitializers(): Promise<any>;\n\n  /**\n   * Runs the given callback in the zone and returns the result of the callback.\n   * Exceptions will be forwarded to the ExceptionHandler and rethrown.\n   */\n  abstract run(callback: Function): any;\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the [componentType]'s\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  abstract bootstrap<C>(componentFactory: ComponentFactory<C>|ConcreteType<C>): ComponentRef<C>;\n\n  /**\n   * Retrieve the application {@link Injector}.\n   */\n  get injector(): Injector { return <Injector>unimplemented(); };\n\n  /**\n   * Retrieve the application {@link NgZone}.\n   */\n  get zone(): NgZone { return <NgZone>unimplemented(); };\n\n  /**\n   * Dispose of this application and all of its components.\n   */\n  abstract dispose(): void;\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  abstract tick(): void;\n\n  /**\n   * Get a list of component types registered to this application.\n   */\n  get componentTypes(): Type[] { return <Type[]>unimplemented(); };\n}\nexport class ApplicationRef_ extends ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\n\n  /** @internal */\n  private _bootstrapListeners: Function[] = [];\n  /** @internal */\n  private _disposeListeners: Function[] = [];\n  /** @internal */\n  private _rootComponents: ComponentRef<any>[] = [];\n  /** @internal */\n  private _rootComponentTypes: Type[] = [];\n  /** @internal */\n  private _changeDetectorRefs: ChangeDetectorRef[] = [];\n  /** @internal */\n  private _runningTick: boolean = false;\n  /** @internal */\n  private _enforceNoNewChanges: boolean = false;\n\n  private _asyncInitDonePromise: Promise<any>;\n  private _asyncInitDone: boolean;\n\n  constructor(\n      private _platform: PlatformRef_, private _zone: NgZone, private _console: Console,\n      private _injector: Injector, private _exceptionHandler: ExceptionHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver, private _testabilityRegistry: TestabilityRegistry, private _testability: Testability, inits: Function[]) {\n    super();\n    this._enforceNoNewChanges = isDevMode();\n    this._asyncInitDonePromise = this.run(() => {\n      var asyncInitResults: Promise<any>[] = [];\n      var asyncInitDonePromise: Promise<any>;\n      if (isPresent(inits)) {\n        for (var i = 0; i < inits.length; i++) {\n          var initResult = inits[i]();\n          if (isPromise(initResult)) {\n            asyncInitResults.push(initResult);\n          }\n        }\n      }\n      if (asyncInitResults.length > 0) {\n        asyncInitDonePromise =\n            PromiseWrapper.all(asyncInitResults).then((_) => this._asyncInitDone = true);\n        this._asyncInitDone = false;\n      } else {\n        this._asyncInitDone = true;\n        asyncInitDonePromise = PromiseWrapper.resolve(true);\n      }\n      return asyncInitDonePromise;\n    });\n    ObservableWrapper.subscribe(this._zone.onError, (error: NgZoneError) => {\n      this._exceptionHandler.call(error.error, error.stackTrace);\n    });\n    ObservableWrapper.subscribe(\n        this._zone.onMicrotaskEmpty, (_) => { this._zone.run(() => { this.tick(); }); });\n  }\n\n  registerBootstrapListener(listener: (ref: ComponentRef<any>) => void): void {\n    this._bootstrapListeners.push(listener);\n  }\n\n  registerDisposeListener(dispose: () => void): void { this._disposeListeners.push(dispose); }\n\n  registerChangeDetector(changeDetector: ChangeDetectorRef): void {\n    this._changeDetectorRefs.push(changeDetector);\n  }\n\n  unregisterChangeDetector(changeDetector: ChangeDetectorRef): void {\n    ListWrapper.remove(this._changeDetectorRefs, changeDetector);\n  }\n\n  waitForAsyncInitializers(): Promise<any> { return this._asyncInitDonePromise; }\n\n  run(callback: Function): any {\n    var result: any;\n    // Note: Don't use zone.runGuarded as we want to know about\n    // the thrown exception!\n    // Note: the completer needs to be created outside\n    // of `zone.run` as Dart swallows rejected promises\n    // via the onError callback of the promise.\n    var completer = PromiseWrapper.completer();\n    this._zone.run(() => {\n      try {\n        result = callback();\n        if (isPromise(result)) {\n          PromiseWrapper.then(\n              result, (ref) => { completer.resolve(ref); },\n              (err, stackTrace) => {\n                completer.reject(err, stackTrace);\n                this._exceptionHandler.call(err, stackTrace);\n              });\n        }\n      } catch (e) {\n        this._exceptionHandler.call(e, e.stack);\n        throw e;\n      }\n    });\n    return isPromise(result) ? completer.promise : result;\n  }\n\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|ConcreteType<C>): ComponentRef<C> {\n    if (!this._asyncInitDone) {\n      throw new BaseException(\n          'Cannot bootstrap as there are still asynchronous initializers running. Wait for them using waitForAsyncInitializers().');\n    }\n    return this.run(() => {\n      let componentFactory: ComponentFactory<C>;\n      if (componentOrFactory instanceof ComponentFactory) {\n        componentFactory = componentOrFactory;\n      } else {\n        componentFactory =\n            this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n      }\n      this._rootComponentTypes.push(componentFactory.componentType);\n      var compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n      compRef.onDestroy(() => { this._unloadComponent(compRef); });\n      var testability = compRef.injector.get(Testability, null);\n      if (isPresent(testability)) {\n        compRef.injector.get(TestabilityRegistry)\n            .registerApplication(compRef.location.nativeElement, testability);\n      }\n\n      this._loadComponent(compRef);\n      if (isDevMode()) {\n        let prodDescription = IS_DART ? 'Production mode is disabled in Dart.' :\n                                        'Call enableProdMode() to enable the production mode.';\n        this._console.log(`Angular 2 is running in the development mode. ${prodDescription}`);\n      }\n      return compRef;\n    });\n  }\n\n  /** @internal */\n  _loadComponent(componentRef: ComponentRef<any>): void {\n    this._changeDetectorRefs.push(componentRef.changeDetectorRef);\n    this.tick();\n    this._rootComponents.push(componentRef);\n    this._bootstrapListeners.forEach((listener) => listener(componentRef));\n  }\n\n  /** @internal */\n  _unloadComponent(componentRef: ComponentRef<any>): void {\n    if (!ListWrapper.contains(this._rootComponents, componentRef)) {\n      return;\n    }\n    this.unregisterChangeDetector(componentRef.changeDetectorRef);\n    ListWrapper.remove(this._rootComponents, componentRef);\n  }\n\n  get injector(): Injector { return this._injector; }\n\n  get zone(): NgZone { return this._zone; }\n\n  tick(): void {\n    if (this._runningTick) {\n      throw new BaseException('ApplicationRef.tick is called recursively');\n    }\n\n    var s = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._changeDetectorRefs.forEach((detector) => detector.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._changeDetectorRefs.forEach((detector) => detector.checkNoChanges());\n      }\n    } finally {\n      this._runningTick = false;\n      wtfLeave(s);\n    }\n  }\n\n  dispose(): void {\n    // TODO(alxhub): Dispose of the NgZone.\n    ListWrapper.clone(this._rootComponents).forEach((ref) => ref.destroy());\n    this._disposeListeners.forEach((dispose) => dispose());\n    this._platform._applicationDisposed(this);\n  }\n\n  get componentTypes(): Type[] { return this._rootComponentTypes; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: PlatformRef_, },\n{type: NgZone, },\n{type: Console, },\n{type: Injector, },\n{type: ExceptionHandler, },\n{type: ComponentFactoryResolver, },\n{type: TestabilityRegistry, decorators: [{ type: Optional }, ]},\n{type: Testability, decorators: [{ type: Optional }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Inject, args: [APP_INITIALIZER, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
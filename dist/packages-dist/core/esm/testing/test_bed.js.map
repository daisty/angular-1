{"version":3,"file":"test_bed.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/test_bed.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerFactory, ComponentStillLoadingError, Injector, NgModule, NgModuleFactory, NgModuleMetadata, NgModuleRef, PlatformRef, Provider, ReflectiveInjector, Type, assertPlatform, createPlatform, getPlatform} from '../index';\nimport {ListWrapper} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {ConcreteType, FunctionWrapper, isPresent, stringify} from '../src/facade/lang';\n\nimport {AsyncTestCompleter} from './async_test_completer';\n\nconst UNDEFINED = new Object();\n\n/**\n * @experimental\n */\nexport class TestBed implements Injector {\n  private _instantiated: boolean = false;\n\n  private _compiler: Compiler = null;\n  private _moduleRef: NgModuleRef<any> = null;\n  private _ngModuleFactory: NgModuleFactory<any> = null;\n\n  private _compilerProviders: Array<Type|Provider|any[]|any> = [];\n  private _compilerUseJit: boolean = true;\n\n  private _providers: Array<Type|Provider|any[]|any> = [];\n  private _declarations: Array<Type|any[]|any> = [];\n  private _imports: Array<Type|any[]|any> = [];\n  private _precompile: Array<Type|any[]|any> = [];\n\n  reset() {\n    this._compiler = null;\n    this._moduleRef = null;\n    this._ngModuleFactory = null;\n    this._compilerProviders = [];\n    this._compilerUseJit = true;\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._precompile = [];\n    this._instantiated = false;\n  }\n\n  platform: PlatformRef = null;\n\n  ngModule: Type = null;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    if (this._instantiated) {\n      throw new BaseException('Cannot add configuration after test injector is instantiated');\n    }\n    if (config.providers) {\n      this._compilerProviders = ListWrapper.concat(this._compilerProviders, config.providers);\n    }\n    if (config.useJit !== undefined) {\n      this._compilerUseJit = config.useJit;\n    }\n  }\n\n  configureModule(\n      moduleDef: {providers?: any[], declarations?: any[], imports?: any[], precompile?: any[]}) {\n    if (this._instantiated) {\n      throw new BaseException('Cannot add configuration after test injector is instantiated');\n    }\n    if (moduleDef.providers) {\n      this._providers = ListWrapper.concat(this._providers, moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations = ListWrapper.concat(this._declarations, moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports = ListWrapper.concat(this._imports, moduleDef.imports);\n    }\n    if (moduleDef.precompile) {\n      this._precompile = ListWrapper.concat(this._precompile, moduleDef.precompile);\n    }\n  }\n\n  createAsyncNgModuleFactory(): Promise<NgModuleFactory<any>> {\n    if (this._instantiated) {\n      throw new BaseException(\n          'Cannot run precompilation when the test NgModule has already been instantiated. ' +\n          'Make sure you are not using `inject` before `doAsyncPrecompilation`.');\n    }\n\n    if (this._ngModuleFactory) {\n      return Promise.resolve(this._ngModuleFactory);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n\n    return this._compiler.compileNgModuleAsync(moduleType).then((ngModuleFactory) => {\n      this._ngModuleFactory = ngModuleFactory;\n      return ngModuleFactory;\n    });\n  }\n\n  initTestNgModule() {\n    if (this._instantiated) {\n      return;\n    }\n\n    if (this._ngModuleFactory) {\n      this._createFromModuleFactory(this._ngModuleFactory);\n    } else {\n      let moduleType = this._createCompilerAndModule();\n      this._createFromModuleFactory(this._compiler.compileNgModuleSync(moduleType));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _createInjectorAsync(): Promise<Injector> {\n    if (this._instantiated) {\n      return Promise.resolve(this);\n    }\n    let ngModule = this._createCompilerAndModule();\n    return this._compiler.compileNgModuleAsync(ngModule).then(\n        (ngModuleFactory) => this._createFromModuleFactory(ngModuleFactory));\n  }\n\n  private _createCompilerAndModule(): ConcreteType<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations = this._declarations;\n    const imports = [this.ngModule, this._imports];\n    const precompile = this._precompile;\n    class DynamicTestModule {\n    /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n      providers: providers,\n      declarations: declarations,\n      imports: imports,\n      precompile: precompile\n    }, ] },\n];\n}\n\n    const compilerFactory: CompilerFactory = this.platform.injector.get(CompilerFactory);\n    this._compiler = compilerFactory.createCompiler(\n        {providers: this._compilerProviders, useJit: this._compilerUseJit});\n    return DynamicTestModule;\n  }\n\n  private _createFromModuleFactory(ngModuleFactory: NgModuleFactory<any>): Injector {\n    this._moduleRef = ngModuleFactory.create(this.platform.injector);\n    this._instantiated = true;\n    return this;\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    if (!this._instantiated) {\n      throw new BaseException(\n          'Illegal state: The test bed\\'s injector has not yet been created. Call initTestNgModule first!');\n    }\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    let result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function): any {\n    if (!this._instantiated) {\n      throw new BaseException(\n          'Illegal state: The test bed\\'s injector has not yet been created. Call initTestNgModule first!');\n    }\n    var params = tokens.map(t => this.get(t));\n    return FunctionWrapper.apply(fn, params);\n  }\n}\n\nvar _testBed: TestBed = null;\n\n/**\n * @experimental\n */\nexport function getTestBed() {\n  if (_testBed == null) {\n    _testBed = new TestBed();\n  }\n  return _testBed;\n}\n\n/**\n * @deprecated use getTestBed instead.\n */\nexport function getTestInjector() {\n  return getTestBed();\n}\n\n/**\n * Set the providers that the test injector should use. These should be providers\n * common to every test in the suite.\n *\n * This may only be called once, to set up the common providers for the current test\n * suite on the current platform. If you absolutely need to change the providers,\n * first use `resetBaseTestProviders`.\n *\n * Test modules and platforms for individual platforms are available from\n * 'angular2/platform/testing/<platform_name>'.\n *\n * @deprecated Use initTestEnvironment instead\n */\nexport function setBaseTestProviders(\n    platformProviders: Array<Type|Provider|any[]>,\n    applicationProviders: Array<Type|Provider|any[]>) {\n  if (platformProviders.length === 1 && typeof platformProviders[0] === 'function') {\n    (<any>platformProviders[0])(applicationProviders);\n  } else {\n    throw new Error(\n        `setBaseTestProviders is deprecated and only supports platformProviders that are predefined by Angular. Use 'initTestEnvironment' instead.`);\n  }\n}\n\n/**\n * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n * angular module. These are common to every test in the suite.\n *\n * This may only be called once, to set up the common providers for the current test\n * suite on the current platform. If you absolutely need to change the providers,\n * first use `resetTestEnvironment`.\n *\n * Test modules and platforms for individual platforms are available from\n * 'angular2/platform/testing/<platform_name>'.\n *\n * @experimental\n */\nexport function initTestEnvironment(ngModule: Type, platform: PlatformRef): Injector {\n  var testBed = getTestBed();\n  if (testBed.platform || testBed.ngModule) {\n    throw new BaseException('Cannot set base providers because it has already been called');\n  }\n  testBed.platform = platform;\n  testBed.ngModule = ngModule;\n\n  return testBed;\n}\n\n/**\n * Reset the providers for the test injector.\n *\n * @deprecated Use resetTestEnvironment instead.\n */\nexport function resetBaseTestProviders() {\n  resetTestEnvironment();\n}\n\n/**\n * Reset the providers for the test injector.\n *\n * @experimental\n */\nexport function resetTestEnvironment() {\n  var testBed = getTestBed();\n  testBed.platform = null;\n  testBed.ngModule = null;\n  testBed.reset();\n}\n\n/**\n * Run asynchronous precompilation for the test's NgModule. It is necessary to call this function\n * if your test is using an NgModule which has precompiled components that require an asynchronous\n * call, such as an XHR. Should be called once before the test case.\n *\n * @experimental\n */\nexport function doAsyncPrecompilation(): Promise<any> {\n  let testBed = getTestBed();\n  return testBed.createAsyncNgModuleFactory();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  let testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    return () => {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of the\n      // injected tokens.\n      return testBed._createInjectorAsync().then(() => {\n        let completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn);\n        return completer.promise;\n      });\n    };\n  } else {\n    return () => {\n      try {\n        testBed.initTestNgModule();\n      } catch (e) {\n        if (e instanceof ComponentStillLoadingError) {\n          throw new Error(\n              `This test module precompiles the component ${stringify(e.compType)} which is using a \"templateUrl\", but precompilation was never done. ` +\n              `Please call \"doAsyncPrecompilation\" before \"inject\".`);\n        } else {\n          throw e;\n        }\n      }\n      return testBed.execute(tokens, fn);\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n  constructor(\n      private _moduleDef:\n          () => {providers?: any[], declarations?: any[], imports?: any[], precompile?: any[]}) {}\n\n  private _addModule() {\n    var moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    return () => {\n      this._addModule();\n      return inject(tokens, fn)();\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport function withProviders(providers: () => any) {\n  return new InjectSetupWrapper(() => {{return {providers: providers()};}});\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: () => {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  precompile?: any[]\n}) {\n  return new InjectSetupWrapper(moduleDef);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
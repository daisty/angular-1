{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/testing.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAQI,EAAU,UAAU,EAAC,MAAM,YAAY;AAI9C,IAAI,OAAO,GAAQ,CAAC,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;AAErE,IAAI,OAAO,GAAY,UAAU,EAAE,CAAC;AAEpC,6CAA6C;AAC7C,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IACvB,OAAO,CAAC,UAAU,CAAC,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC;AAED;;;;;GAKG;AACH,6BAA6B,SAAqB;IAChD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAAC,MAAM,CAAC;IACvB,IAAI,CAAC;QACH,OAAO,CAAC,eAAe,CAAC,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC,CAAC;IAClD,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,MAAM,IAAI,KAAK,CACX,2FAA2F;YAC3F,8FAA8F;YAC9F,wBAAwB,CAAC,CAAC;IAChC,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,gCACI,SAAyF;IAE3F,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAAC,MAAM,CAAC;IACvB,IAAI,CAAC;QACH,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IACrC,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,MAAM,IAAI,KAAK,CACX,8FAA8F;YAC9F,8FAA8F;YAC9F,wBAAwB,CAAC,CAAC;IAChC,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,kCAAkC,MAA6C;IAC7E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;QAAC,MAAM,CAAC;IACpB,IAAI,CAAC;QACH,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,MAAM,IAAI,KAAK,CACX,gGAAgG;YAChG,8FAA8F;YAC9F,wBAAwB,CAAC,CAAC;IAChC,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Public Test Library for unit testing Angular2 Applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\n\nimport {TestBed, getTestBed} from './test_bed';\n\ndeclare var global: any;\n\nvar _global = <any>(typeof window === 'undefined' ? global : window);\n\nvar testBed: TestBed = getTestBed();\n\n// Reset the test providers before each test.\nif (_global.beforeEach) {\n  _global.beforeEach(() => { testBed.reset(); });\n}\n\n/**\n * Allows overriding default providers of the test injector,\n * which are defined in test_injector.js\n *\n * @stable\n */\nexport function addProviders(providers: Array<any>): void {\n  if (!providers) return;\n  try {\n    testBed.configureModule({providers: providers});\n  } catch (e) {\n    throw new Error(\n        'addProviders can\\'t be called after the injector has been already created for this test. ' +\n        'This is most likely because you\\'ve already used the injector to inject a beforeEach or the ' +\n        'current `it` function.');\n  }\n}\n\n/**\n * Allows overriding default providers, directives, pipes, modules of the test injector,\n * which are defined in test_injector.js\n *\n * @stable\n */\nexport function configureModule(\n    moduleDef: {providers?: any[], declarations?: any[], imports?: any[], precompile?: any[]}):\n    void {\n  if (!moduleDef) return;\n  try {\n    testBed.configureModule(moduleDef);\n  } catch (e) {\n    throw new Error(\n        'configureModule can\\'t be called after the injector has been already created for this test. ' +\n        'This is most likely because you\\'ve already used the injector to inject a beforeEach or the ' +\n        'current `it` function.');\n  }\n}\n\n/**\n * Allows overriding default compiler providers and settings\n * which are defined in test_injector.js\n *\n * @stable\n */\nexport function configureCompiler(config: {providers?: any[], useJit?: boolean}): void {\n  if (!config) return;\n  try {\n    testBed.configureCompiler(config);\n  } catch (e) {\n    throw new Error(\n        'configureCompiler can\\'t be called after the injector has been already created for this test. ' +\n        'This is most likely because you\\'ve already used the injector to inject a beforeEach or the ' +\n        'current `it` function.');\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
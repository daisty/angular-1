{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerFactory, CompilerOptions, Component, ComponentResolver, Injectable, NgModule, PLATFORM_DIRECTIVES, PLATFORM_PIPES, PlatformRef, ReflectiveInjector, Type, ViewEncapsulation, createPlatformFactory, disposePlatform, isDevMode} from '@angular/core';\n\nexport * from './template_ast';\nexport {TEMPLATE_TRANSFORMS} from './template_parser';\nexport {CompilerConfig, RenderTypes} from './config';\nexport * from './compile_metadata';\nexport * from './offline_compiler';\nexport {RuntimeCompiler} from './runtime_compiler';\nexport * from './url_resolver';\nexport * from './xhr';\n\nexport {ViewResolver} from './view_resolver';\nexport {DirectiveResolver} from './directive_resolver';\nexport {PipeResolver} from './pipe_resolver';\nexport {NgModuleResolver} from './ng_module_resolver';\n\nimport {stringify} from './facade/lang';\nimport {ListWrapper} from './facade/collection';\nimport {TemplateParser} from './template_parser';\nimport {HtmlParser} from './html_parser';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {StyleCompiler} from './style_compiler';\nimport {ViewCompiler} from './view_compiler/view_compiler';\nimport {NgModuleCompiler} from './ng_module_compiler';\nimport {CompilerConfig} from './config';\nimport {RuntimeCompiler} from './runtime_compiler';\nimport {ElementSchemaRegistry} from './schema/element_schema_registry';\nimport {DomElementSchemaRegistry} from './schema/dom_element_schema_registry';\nimport {UrlResolver, DEFAULT_PACKAGE_URL_PROVIDER} from './url_resolver';\nimport {Parser} from './expression_parser/parser';\nimport {Lexer} from './expression_parser/lexer';\nimport {ViewResolver} from './view_resolver';\nimport {DirectiveResolver} from './directive_resolver';\nimport {PipeResolver} from './pipe_resolver';\nimport {NgModuleResolver} from './ng_module_resolver';\nimport {Console, Reflector, reflector, ReflectorReader} from '../core_private';\nimport {XHR} from './xhr';\n\n/**\n * A set of providers that provide `RuntimeCompiler` and its dependencies to use for\n * template compilation.\n */\nexport const COMPILER_PROVIDERS: Array<any|Type|{[k: string]: any}|any[]> =\n    /*@ts2dart_const*/[\n      {provide: Reflector, useValue: reflector},\n      {provide: ReflectorReader, useExisting: Reflector},\n      Console,\n      Lexer,\n      Parser,\n      HtmlParser,\n      TemplateParser,\n      DirectiveNormalizer,\n      CompileMetadataResolver,\n      DEFAULT_PACKAGE_URL_PROVIDER,\n      StyleCompiler,\n      ViewCompiler,\n      NgModuleCompiler,\n      /*@ts2dart_Provider*/ {provide: CompilerConfig, useValue: new CompilerConfig()},\n      RuntimeCompiler,\n      /*@ts2dart_Provider*/ {provide: ComponentResolver, useExisting: RuntimeCompiler},\n      /*@ts2dart_Provider*/ {provide: Compiler, useExisting: RuntimeCompiler},\n      DomElementSchemaRegistry,\n      /*@ts2dart_Provider*/ {provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry},\n      UrlResolver,\n      ViewResolver,\n      DirectiveResolver,\n      PipeResolver,\n      NgModuleResolver\n    ];\n\n\nexport function analyzeAppProvidersForDeprecatedConfiguration(appProviders: any[] = []):\n    {compilerOptions: CompilerOptions, moduleDeclarations: Type[], deprecationMessages: string[]} {\n  let platformDirectives: any[] = [];\n  let platformPipes: any[] = [];\n\n  let compilerProviders: any[] = [];\n  let useDebug: boolean;\n  let useJit: boolean;\n  let defaultEncapsulation: ViewEncapsulation;\n  const deprecationMessages: string[] = [];\n\n  // Note: This is a hack to still support the old way\n  // of configuring platform directives / pipes and the compiler xhr.\n  // This will soon be deprecated!\n  const tempInj = ReflectiveInjector.resolveAndCreate(appProviders);\n  const compilerConfig: CompilerConfig = tempInj.get(CompilerConfig, null);\n  if (compilerConfig) {\n    platformDirectives = compilerConfig.platformDirectives;\n    platformPipes = compilerConfig.platformPipes;\n    useJit = compilerConfig.useJit;\n    useDebug = compilerConfig.genDebugInfo;\n    defaultEncapsulation = compilerConfig.defaultEncapsulation;\n    deprecationMessages.push(\n        `Passing CompilerConfig as a regular provider is deprecated. Use the \"compilerOptions\" parameter of \"bootstrap()\" or use a custom \"CompilerFactory\" platform provider instead.`);\n  } else {\n    // If nobody provided a CompilerConfig, use the\n    // PLATFORM_DIRECTIVES / PLATFORM_PIPES values directly if existing\n    platformDirectives = tempInj.get(PLATFORM_DIRECTIVES, []);\n    platformPipes = tempInj.get(PLATFORM_PIPES, []);\n  }\n  platformDirectives = ListWrapper.flatten(platformDirectives);\n  platformPipes = ListWrapper.flatten(platformPipes);\n  const xhr = tempInj.get(XHR, null);\n  if (xhr) {\n    compilerProviders.push([{provide: XHR, useValue: xhr}]);\n    deprecationMessages.push(\n        `Passing XHR as regular provider is deprecated. Pass the provider via \"compilerOptions\" instead.`);\n  }\n\n  if (platformDirectives.length > 0) {\n    deprecationMessages.push(\n        `The PLATFORM_DIRECTIVES provider and CompilerConfig.platformDirectives is deprecated. Add the directives to an NgModule instead! ` +\n        `(Directives: ${platformDirectives.map(type => stringify(type))})`);\n  }\n  if (platformPipes.length > 0) {\n    deprecationMessages.push(\n        `The PLATFORM_PIPES provider and CompilerConfig.platformPipes is deprecated. Add the pipes to an NgModule instead! ` +\n        `(Pipes: ${platformPipes.map(type => stringify(type))})`);\n  }\n  const compilerOptions: CompilerOptions = {\n    useJit: useJit,\n    useDebug: useDebug,\n    defaultEncapsulation: defaultEncapsulation,\n    providers: compilerProviders\n  };\n  class DynamicComponent {\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{directives: platformDirectives, pipes: platformPipes, template: ''}, ] },\n];\n}\n\n  return {\n    compilerOptions,\n    moduleDeclarations: [DynamicComponent],\n    deprecationMessages: deprecationMessages\n  };\n}\nexport class _RuntimeCompilerFactory extends CompilerFactory {\n  createCompiler(options: CompilerOptions): Compiler {\n    const injector = ReflectiveInjector.resolveAndCreate([\n      COMPILER_PROVIDERS, {\n        provide: CompilerConfig,\n        useFactory: () => {\n          return new CompilerConfig({\n            // let explicit values from the compiler options overwrite options\n            // from the app providers. E.g. important for the testing platform.\n            genDebugInfo: _firstDefined(options.useDebug, isDevMode()),\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            useJit: _firstDefined(options.useJit, true),\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            defaultEncapsulation:\n                _firstDefined(options.defaultEncapsulation, ViewEncapsulation.Emulated),\n            logBindingUpdate: _firstDefined(options.useDebug, isDevMode())\n          });\n        },\n        deps: []\n      },\n      // options.providers will always contain a provider for XHR as well\n      // (added by platforms). So allow compilerProviders to overwrite this\n      options.providers ? options.providers : []\n    ]);\n    return injector.get(Compiler);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\n\nexport const RUNTIME_COMPILER_FACTORY = new _RuntimeCompilerFactory();\n\nfunction _firstDefined<T>(...args: T[]): T {\n  for (var i = 0; i < args.length; i++) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(...parts: any[][]): any[] {\n  let result: any[] = [];\n  parts.forEach((part) => result.push(...part));\n  return result;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
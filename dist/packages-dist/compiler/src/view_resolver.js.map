{"version":3,"file":"view_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/view_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,qBAA2D,eAAe,CAAC,CAAA;AAC3E,6BAAyC,iBAAiB,CAAC,CAAA;AAC3D,qBAAkD,oBAAoB,CAAC,CAAA;AACvE,2BAA4B,0BAA0B,CAAC,CAAA;AAEvD,8BAA8B,GAAQ;IACpC,MAAM,CAAC,GAAG,YAAY,wBAAiB,CAAC;AAC1C,CAAC;AACD;IACE,sBAAoB,UAAuC;QAA/C,0BAA+C,GAA/C,qCAA+C;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAE/D,8BAAO,GAAP,UAAQ,SAAe,EAAE,eAAsB;QAAtB,+BAAsB,GAAtB,sBAAsB;QAC7C,IAAM,QAAQ,GACV,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAEtE,EAAE,CAAC,CAAC,gBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,cAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,cAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAChE,MAAM,IAAI,0BAAa,CACnB,gBAAc,gBAAS,CAAC,SAAS,CAAC,wDAAqD,CAAC,CAAC;YAE/F,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,IAAI,mBAAY,CAAC;oBACtB,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,UAAU,EAAE,QAAQ,CAAC,UAAU;oBAC/B,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,aAAa,EAAE,QAAQ,CAAC,aAAa;oBACrC,MAAM,EAAE,QAAQ,CAAC,MAAM;oBACvB,SAAS,EAAE,QAAQ,CAAC,SAAS;oBAC7B,UAAU,EAAE,QAAQ,CAAC,UAAU;oBAC/B,aAAa,EAAE,QAAQ,CAAC,aAAa;iBACtC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,0BAAa,CACnB,wBAAsB,gBAAS,CAAC,SAAS,CAAC,qCAAkC,CAAC,CAAC;YACpF,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACH,kBAAkB;IACX,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,8BAAe,GAAG;KACxB,CAAC;IACF,mBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,oBAAY,eAyCxB,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, ViewMetadata, ComponentMetadata,} from '@angular/core';\nimport {ReflectorReader, reflector} from '../core_private';\nimport {Type, stringify, isBlank, isPresent} from '../src/facade/lang';\nimport {BaseException} from '../src/facade/exceptions';\n\nfunction _isComponentMetadata(obj: any): obj is ComponentMetadata {\n  return obj instanceof ComponentMetadata;\n}\nexport class ViewResolver {\n  constructor(private _reflector: ReflectorReader = reflector) {}\n\n  resolve(component: Type, throwIfNotFound = true): ViewMetadata {\n    const compMeta: ComponentMetadata =\n        this._reflector.annotations(component).find(_isComponentMetadata);\n\n    if (isPresent(compMeta)) {\n      if (isBlank(compMeta.template) && isBlank(compMeta.templateUrl)) {\n        throw new BaseException(\n            `Component '${stringify(component)}' must have either 'template' or 'templateUrl' set.`);\n\n      } else {\n        return new ViewMetadata({\n          templateUrl: compMeta.templateUrl,\n          template: compMeta.template,\n          directives: compMeta.directives,\n          pipes: compMeta.pipes,\n          encapsulation: compMeta.encapsulation,\n          styles: compMeta.styles,\n          styleUrls: compMeta.styleUrls,\n          animations: compMeta.animations,\n          interpolation: compMeta.interpolation\n        });\n      }\n    } else {\n      if (throwIfNotFound) {\n        throw new BaseException(\n            `Could not compile '${stringify(component)}' because it is not a component.`);\n      }\n      return null;\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
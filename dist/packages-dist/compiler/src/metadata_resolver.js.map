{"version":3,"file":"metadata_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/metadata_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationAnimateMetadata, AnimationEntryMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationStateDeclarationMetadata, AnimationStateMetadata, AnimationStateTransitionMetadata, AnimationStyleMetadata, AnimationWithStepsMetadata, AttributeMetadata, ChangeDetectionStrategy, ComponentMetadata, HostMetadata, Inject, InjectMetadata, Injectable, NgModule, NgModuleMetadata, Optional, OptionalMetadata, Provider, QueryMetadata, SelfMetadata, SkipSelfMetadata, ViewMetadata, ViewQueryMetadata, resolveForwardRef} from '@angular/core';\n\nimport {Console, LIFECYCLE_HOOKS_VALUES, ReflectorReader, createProvider, isProviderLiteral, reflector} from '../core_private';\nimport {MapWrapper, StringMapWrapper} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isArray, isBlank, isPresent, isString, isStringMap, stringify} from '../src/facade/lang';\n\nimport {assertArrayOfStrings, assertInterpolationSymbols} from './assertions';\nimport * as cpl from './compile_metadata';\nimport {CompilerConfig} from './config';\nimport {hasLifecycleHook} from './directive_lifecycle_reflector';\nimport {DirectiveResolver} from './directive_resolver';\nimport {Identifiers, identifierToken} from './identifiers';\nimport {NgModuleResolver} from './ng_module_resolver';\nimport {PipeResolver} from './pipe_resolver';\nimport {getUrlScheme} from './url_resolver';\nimport {MODULE_SUFFIX, ValueTransformer, sanitizeIdentifier, visitValue} from './util';\nimport {ViewResolver} from './view_resolver';\nexport class CompileMetadataResolver {\n  private _directiveCache = new Map<Type, cpl.CompileDirectiveMetadata>();\n  private _pipeCache = new Map<Type, cpl.CompilePipeMetadata>();\n  private _ngModuleCache = new Map<Type, cpl.CompileNgModuleMetadata>();\n  private _ngModuleOfTypes = new Map<Type, Type>();\n  private _anonymousTypes = new Map<Object, number>();\n  private _anonymousTypeIndex = 0;\n\n  constructor(\n      private _ngModuleResolver: NgModuleResolver, private _directiveResolver: DirectiveResolver,\n      private _pipeResolver: PipeResolver, private _viewResolver: ViewResolver,\n      private _config: CompilerConfig, private _console: Console,\n      private _reflector: ReflectorReader = reflector) {}\n\n  private sanitizeTokenName(token: any): string {\n    let identifier = stringify(token);\n    if (identifier.indexOf('(') >= 0) {\n      // case: anonymous functions!\n      let found = this._anonymousTypes.get(token);\n      if (isBlank(found)) {\n        this._anonymousTypes.set(token, this._anonymousTypeIndex++);\n        found = this._anonymousTypes.get(token);\n      }\n      identifier = `anonymous_token_${found}_`;\n    }\n    return sanitizeIdentifier(identifier);\n  }\n\n  clearCacheFor(type: Type) {\n    this._directiveCache.delete(type);\n    this._pipeCache.delete(type);\n    this._ngModuleOfTypes.delete(type);\n    // Clear all of the NgModuleMetadata as they contain transitive information!\n    this._ngModuleCache.clear();\n  }\n\n  clearCache() {\n    this._directiveCache.clear();\n    this._pipeCache.clear();\n    this._ngModuleCache.clear();\n    this._ngModuleOfTypes.clear();\n  }\n\n  getAnimationEntryMetadata(entry: AnimationEntryMetadata): cpl.CompileAnimationEntryMetadata {\n    var defs = entry.definitions.map(def => this.getAnimationStateMetadata(def));\n    return new cpl.CompileAnimationEntryMetadata(entry.name, defs);\n  }\n\n  getAnimationStateMetadata(value: AnimationStateMetadata): cpl.CompileAnimationStateMetadata {\n    if (value instanceof AnimationStateDeclarationMetadata) {\n      var styles = this.getAnimationStyleMetadata(value.styles);\n      return new cpl.CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);\n    } else if (value instanceof AnimationStateTransitionMetadata) {\n      return new cpl.CompileAnimationStateTransitionMetadata(\n          value.stateChangeExpr, this.getAnimationMetadata(value.steps));\n    }\n    return null;\n  }\n\n  getAnimationStyleMetadata(value: AnimationStyleMetadata): cpl.CompileAnimationStyleMetadata {\n    return new cpl.CompileAnimationStyleMetadata(value.offset, value.styles);\n  }\n\n  getAnimationMetadata(value: AnimationMetadata): cpl.CompileAnimationMetadata {\n    if (value instanceof AnimationStyleMetadata) {\n      return this.getAnimationStyleMetadata(value);\n    } else if (value instanceof AnimationKeyframesSequenceMetadata) {\n      return new cpl.CompileAnimationKeyframesSequenceMetadata(\n          value.steps.map(entry => this.getAnimationStyleMetadata(entry)));\n    } else if (value instanceof AnimationAnimateMetadata) {\n      let animateData =\n          <cpl.CompileAnimationStyleMetadata|cpl.CompileAnimationKeyframesSequenceMetadata>this\n              .getAnimationMetadata(value.styles);\n      return new cpl.CompileAnimationAnimateMetadata(value.timings, animateData);\n    } else if (value instanceof AnimationWithStepsMetadata) {\n      var steps = value.steps.map(step => this.getAnimationMetadata(step));\n      if (value instanceof AnimationGroupMetadata) {\n        return new cpl.CompileAnimationGroupMetadata(steps);\n      } else {\n        return new cpl.CompileAnimationSequenceMetadata(steps);\n      }\n    }\n    return null;\n  }\n\n  getDirectiveMetadata(directiveType: Type, throwIfNotFound = true): cpl.CompileDirectiveMetadata {\n    directiveType = resolveForwardRef(directiveType);\n    var meta = this._directiveCache.get(directiveType);\n    if (isBlank(meta)) {\n      var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);\n      if (!dirMeta) {\n        return null;\n      }\n      var templateMeta: cpl.CompileTemplateMetadata = null;\n      var changeDetectionStrategy: ChangeDetectionStrategy = null;\n      var viewProviders: Array<cpl.CompileProviderMetadata|cpl.CompileTypeMetadata|any[]> = [];\n      var moduleUrl = staticTypeModuleUrl(directiveType);\n      var precompileTypes: cpl.CompileTypeMetadata[] = [];\n      if (dirMeta instanceof ComponentMetadata) {\n        var cmpMeta = <ComponentMetadata>dirMeta;\n        var viewMeta = this._viewResolver.resolve(directiveType);\n        assertArrayOfStrings('styles', viewMeta.styles);\n        assertInterpolationSymbols('interpolation', viewMeta.interpolation);\n        var animations = isPresent(viewMeta.animations) ?\n            viewMeta.animations.map(e => this.getAnimationEntryMetadata(e)) :\n            null;\n        assertArrayOfStrings('styles', viewMeta.styles);\n        assertArrayOfStrings('styleUrls', viewMeta.styleUrls);\n\n        templateMeta = new cpl.CompileTemplateMetadata({\n          encapsulation: viewMeta.encapsulation,\n          template: viewMeta.template,\n          templateUrl: viewMeta.templateUrl,\n          styles: viewMeta.styles,\n          styleUrls: viewMeta.styleUrls,\n          animations: animations,\n          interpolation: viewMeta.interpolation\n        });\n        changeDetectionStrategy = cmpMeta.changeDetection;\n        if (isPresent(dirMeta.viewProviders)) {\n          viewProviders = this.getProvidersMetadata(\n              verifyNonBlankProviders(directiveType, dirMeta.viewProviders, 'viewProviders'), []);\n        }\n        moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);\n        if (cmpMeta.precompile) {\n          precompileTypes = flattenArray(cmpMeta.precompile)\n                                .map((cmp) => this.getTypeMetadata(cmp, staticTypeModuleUrl(cmp)));\n        }\n      }\n\n      var providers: Array<cpl.CompileProviderMetadata|cpl.CompileTypeMetadata|any[]> = [];\n      if (isPresent(dirMeta.providers)) {\n        providers = this.getProvidersMetadata(\n            verifyNonBlankProviders(directiveType, dirMeta.providers, 'providers'),\n            precompileTypes);\n      }\n      var queries: cpl.CompileQueryMetadata[] = [];\n      var viewQueries: cpl.CompileQueryMetadata[] = [];\n      if (isPresent(dirMeta.queries)) {\n        queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);\n        viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);\n      }\n      meta = cpl.CompileDirectiveMetadata.create({\n        selector: dirMeta.selector,\n        exportAs: dirMeta.exportAs,\n        isComponent: isPresent(templateMeta),\n        type: this.getTypeMetadata(directiveType, moduleUrl),\n        template: templateMeta,\n        changeDetection: changeDetectionStrategy,\n        inputs: dirMeta.inputs,\n        outputs: dirMeta.outputs,\n        host: dirMeta.host,\n        lifecycleHooks:\n            LIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(hook, directiveType)),\n        providers: providers,\n        viewProviders: viewProviders,\n        queries: queries,\n        viewQueries: viewQueries,\n        precompile: precompileTypes\n      });\n      this._directiveCache.set(directiveType, meta);\n    }\n    return meta;\n  }\n\n  getNgModuleMetadata(moduleType: any, throwIfNotFound = true): cpl.CompileNgModuleMetadata {\n    moduleType = resolveForwardRef(moduleType);\n    var compileMeta = this._ngModuleCache.get(moduleType);\n    if (!compileMeta) {\n      const meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n      if (!meta) {\n        return null;\n      }\n      const declaredDirectives: cpl.CompileDirectiveMetadata[] = [];\n      const exportedDirectives: cpl.CompileDirectiveMetadata[] = [];\n      const declaredPipes: cpl.CompilePipeMetadata[] = [];\n      const exportedPipes: cpl.CompilePipeMetadata[] = [];\n      const importedModules: cpl.CompileNgModuleMetadata[] = [];\n      const exportedModules: cpl.CompileNgModuleMetadata[] = [];\n\n      if (meta.imports) {\n        flattenArray(meta.imports).forEach((importedType) => {\n          if (!isValidType(importedType)) {\n            throw new BaseException(\n                `Unexpected value '${stringify(importedType)}' imported by the module '${stringify(moduleType)}'`);\n          }\n          let importedModuleMeta: cpl.CompileNgModuleMetadata;\n          if (importedModuleMeta = this.getNgModuleMetadata(importedType, false)) {\n            importedModules.push(importedModuleMeta);\n          } else {\n            throw new BaseException(\n                `Unexpected value '${stringify(importedType)}' imported by the module '${stringify(moduleType)}'`);\n          }\n        });\n      }\n\n      if (meta.exports) {\n        flattenArray(meta.exports).forEach((exportedType) => {\n          if (!isValidType(exportedType)) {\n            throw new BaseException(\n                `Unexpected value '${stringify(exportedType)}' exported by the module '${stringify(moduleType)}'`);\n          }\n          let exportedDirMeta: cpl.CompileDirectiveMetadata;\n          let exportedPipeMeta: cpl.CompilePipeMetadata;\n          let exportedModuleMeta: cpl.CompileNgModuleMetadata;\n          if (exportedDirMeta = this.getDirectiveMetadata(exportedType, false)) {\n            exportedDirectives.push(exportedDirMeta);\n          } else if (exportedPipeMeta = this.getPipeMetadata(exportedType, false)) {\n            exportedPipes.push(exportedPipeMeta);\n          } else if (exportedModuleMeta = this.getNgModuleMetadata(exportedType, false)) {\n            exportedModules.push(exportedModuleMeta);\n          } else {\n            throw new BaseException(\n                `Unexpected value '${stringify(exportedType)}' exported by the module '${stringify(moduleType)}'`);\n          }\n        });\n      }\n\n      // Note: This will be modified later, so we rely on\n      // getting a new instance every time!\n      const transitiveModule =\n          this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n      if (meta.declarations) {\n        flattenArray(meta.declarations).forEach((declaredType) => {\n          if (!isValidType(declaredType)) {\n            throw new BaseException(\n                `Unexpected value '${stringify(declaredType)}' declared by the module '${stringify(moduleType)}'`);\n          }\n          let declaredDirMeta: cpl.CompileDirectiveMetadata;\n          let declaredPipeMeta: cpl.CompilePipeMetadata;\n          if (declaredDirMeta = this.getDirectiveMetadata(declaredType, false)) {\n            this._addDirectiveToModule(\n                declaredDirMeta, moduleType, transitiveModule, declaredDirectives, true);\n            // Collect @Component.directives/pipes/precompile into our declared directives/pipes.\n            this._getTransitiveViewDirectivesAndPipes(\n                declaredDirMeta, moduleType, transitiveModule, declaredDirectives, declaredPipes);\n          } else if (declaredPipeMeta = this.getPipeMetadata(declaredType, false)) {\n            this._addPipeToModule(\n                declaredPipeMeta, moduleType, transitiveModule, declaredPipes, true);\n          } else {\n            throw new BaseException(\n                `Unexpected value '${stringify(declaredType)}' declared by the module '${stringify(moduleType)}'`);\n          }\n        });\n      }\n\n      const providers: any[] = [];\n      const precompile: cpl.CompileTypeMetadata[] = [];\n      if (meta.providers) {\n        providers.push(...this.getProvidersMetadata(meta.providers, precompile));\n      }\n      if (meta.precompile) {\n        precompile.push(...flattenArray(meta.precompile)\n                            .map(type => this.getTypeMetadata(type, staticTypeModuleUrl(type))));\n      }\n\n      transitiveModule.precompile.push(...precompile);\n      transitiveModule.providers.push(...providers);\n\n      compileMeta = new cpl.CompileNgModuleMetadata({\n        type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),\n        providers: providers,\n        precompile: precompile,\n        declaredDirectives: declaredDirectives,\n        exportedDirectives: exportedDirectives,\n        declaredPipes: declaredPipes,\n        exportedPipes: exportedPipes,\n        importedModules: importedModules,\n        exportedModules: exportedModules,\n        transitiveModule: transitiveModule\n      });\n      transitiveModule.modules.push(compileMeta);\n      this._verifyModule(compileMeta);\n      this._ngModuleCache.set(moduleType, compileMeta);\n    }\n    return compileMeta;\n  }\n\n  addComponentToModule(moduleType: Type, compType: Type) {\n    const moduleMeta = this.getNgModuleMetadata(moduleType);\n    // Collect @Component.directives/pipes/precompile into our declared directives/pipes.\n    const compMeta = this.getDirectiveMetadata(compType, false);\n    this._addDirectiveToModule(\n        compMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule,\n        moduleMeta.declaredDirectives);\n    this._getTransitiveViewDirectivesAndPipes(\n        compMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule,\n        moduleMeta.declaredDirectives, moduleMeta.declaredPipes);\n\n    moduleMeta.transitiveModule.precompile.push(compMeta.type);\n    moduleMeta.precompile.push(compMeta.type);\n\n    this._verifyModule(moduleMeta);\n  }\n\n  private _verifyModule(moduleMeta: cpl.CompileNgModuleMetadata) {\n    moduleMeta.exportedDirectives.forEach((dirMeta) => {\n      if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.runtime)) {\n        throw new BaseException(\n            `Can't export directive ${stringify(dirMeta.type.runtime)} from ${stringify(moduleMeta.type.runtime)} as it was neither declared nor imported!`);\n      }\n    });\n    moduleMeta.exportedPipes.forEach((pipeMeta) => {\n      if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.runtime)) {\n        throw new BaseException(\n            `Can't export pipe ${stringify(pipeMeta.type.runtime)} from ${stringify(moduleMeta.type.runtime)} as it was neither declared nor imported!`);\n      }\n    });\n    moduleMeta.declaredDirectives.forEach((dirMeta) => {\n      dirMeta.precompile.forEach((precompileComp) => {\n        if (!moduleMeta.transitiveModule.directivesSet.has(precompileComp.runtime)) {\n          throw new BaseException(\n              `Component ${stringify(dirMeta.type.runtime)} in NgModule ${stringify(moduleMeta.type.runtime)} uses ${stringify(precompileComp.runtime)} via \"precompile\" but it was neither declared nor imported into the module!`);\n        }\n      });\n    });\n    moduleMeta.precompile.forEach((precompileType) => {\n      if (!moduleMeta.transitiveModule.directivesSet.has(precompileType.runtime)) {\n        throw new BaseException(\n            `NgModule ${stringify(moduleMeta.type.runtime)} uses ${stringify(precompileType.runtime)} via \"precompile\" but it was neither declared nor imported!`);\n      }\n    });\n  }\n\n  private _addTypeToModule(type: Type, moduleType: Type) {\n    const oldModule = this._ngModuleOfTypes.get(type);\n    if (oldModule && oldModule !== moduleType) {\n      throw new BaseException(\n          `Type ${stringify(type)} is part of the declarations of 2 modules: ${stringify(oldModule)} and ${stringify(moduleType)}!`);\n    }\n    this._ngModuleOfTypes.set(type, moduleType);\n  }\n\n\n  private _getTransitiveViewDirectivesAndPipes(\n      compMeta: cpl.CompileDirectiveMetadata, moduleType: any,\n      transitiveModule: cpl.TransitiveCompileNgModuleMetadata,\n      declaredDirectives: cpl.CompileDirectiveMetadata[],\n      declaredPipes: cpl.CompilePipeMetadata[]) {\n    if (!compMeta.isComponent) {\n      return;\n    }\n    const addPipe = (pipeType: Type) => {\n      if (!pipeType) {\n        throw new BaseException(\n            `Unexpected pipe value '${pipeType}' on the View of component '${stringify(compMeta.type.runtime)}'`);\n      }\n      const pipeMeta = this.getPipeMetadata(pipeType);\n      this._addPipeToModule(pipeMeta, moduleType, transitiveModule, declaredPipes);\n    };\n\n    const addDirective = (dirType: Type) => {\n      if (!dirType) {\n        throw new BaseException(\n            `Unexpected directive value '${dirType}' on the View of component '${stringify(compMeta.type.runtime)}'`);\n      }\n      const dirMeta = this.getDirectiveMetadata(dirType);\n      if (this._addDirectiveToModule(dirMeta, moduleType, transitiveModule, declaredDirectives)) {\n        this._getTransitiveViewDirectivesAndPipes(\n            dirMeta, moduleType, transitiveModule, declaredDirectives, declaredPipes);\n      }\n    };\n    const view = this._viewResolver.resolve(compMeta.type.runtime);\n    if (view.pipes) {\n      flattenArray(view.pipes).forEach(addPipe);\n    }\n    if (view.directives) {\n      flattenArray(view.directives).forEach(addDirective);\n    }\n  }\n\n  private _getTransitiveNgModuleMetadata(\n      importedModules: cpl.CompileNgModuleMetadata[],\n      exportedModules: cpl.CompileNgModuleMetadata[]): cpl.TransitiveCompileNgModuleMetadata {\n    // collect `providers` / `precompile` from all imported and all exported modules\n    const transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), true);\n    const providers = flattenArray(transitiveModules.map((ngModule) => ngModule.providers));\n    const precompile = flattenArray(transitiveModules.map((ngModule) => ngModule.precompile));\n\n    const transitiveExportedModules = getTransitiveModules(importedModules, false);\n    const directives =\n        flattenArray(transitiveExportedModules.map((ngModule) => ngModule.exportedDirectives));\n    const pipes = flattenArray(transitiveExportedModules.map((ngModule) => ngModule.exportedPipes));\n    return new cpl.TransitiveCompileNgModuleMetadata(\n        transitiveModules, providers, precompile, directives, pipes);\n  }\n\n  private _addDirectiveToModule(\n      dirMeta: cpl.CompileDirectiveMetadata, moduleType: any,\n      transitiveModule: cpl.TransitiveCompileNgModuleMetadata,\n      declaredDirectives: cpl.CompileDirectiveMetadata[], force: boolean = false): boolean {\n    if (force || !transitiveModule.directivesSet.has(dirMeta.type.runtime)) {\n      transitiveModule.directivesSet.add(dirMeta.type.runtime);\n      transitiveModule.directives.push(dirMeta);\n      declaredDirectives.push(dirMeta);\n      this._addTypeToModule(dirMeta.type.runtime, moduleType);\n      return true;\n    }\n    return false;\n  }\n\n  private _addPipeToModule(\n      pipeMeta: cpl.CompilePipeMetadata, moduleType: any,\n      transitiveModule: cpl.TransitiveCompileNgModuleMetadata,\n      declaredPipes: cpl.CompilePipeMetadata[], force: boolean = false): boolean {\n    if (force || !transitiveModule.pipesSet.has(pipeMeta.type.runtime)) {\n      transitiveModule.pipesSet.add(pipeMeta.type.runtime);\n      transitiveModule.pipes.push(pipeMeta);\n      declaredPipes.push(pipeMeta);\n      this._addTypeToModule(pipeMeta.type.runtime, moduleType);\n      return true;\n    }\n    return false;\n  }\n\n  getTypeMetadata(type: Type, moduleUrl: string, dependencies: any[] = null):\n      cpl.CompileTypeMetadata {\n    type = resolveForwardRef(type);\n    return new cpl.CompileTypeMetadata({\n      name: this.sanitizeTokenName(type),\n      moduleUrl: moduleUrl,\n      runtime: type,\n      diDeps: this.getDependenciesMetadata(type, dependencies)\n    });\n  }\n\n  getFactoryMetadata(factory: Function, moduleUrl: string, dependencies: any[] = null):\n      cpl.CompileFactoryMetadata {\n    factory = resolveForwardRef(factory);\n    return new cpl.CompileFactoryMetadata({\n      name: this.sanitizeTokenName(factory),\n      moduleUrl: moduleUrl,\n      runtime: factory,\n      diDeps: this.getDependenciesMetadata(factory, dependencies)\n    });\n  }\n\n  getPipeMetadata(pipeType: Type, throwIfNotFound = true): cpl.CompilePipeMetadata {\n    pipeType = resolveForwardRef(pipeType);\n    var meta = this._pipeCache.get(pipeType);\n    if (isBlank(meta)) {\n      var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);\n      if (!pipeMeta) {\n        return null;\n      }\n      meta = new cpl.CompilePipeMetadata({\n        type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),\n        name: pipeMeta.name,\n        pure: pipeMeta.pure,\n        lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(hook, pipeType)),\n      });\n      this._pipeCache.set(pipeType, meta);\n    }\n    return meta;\n  }\n\n  getDependenciesMetadata(typeOrFunc: Type|Function, dependencies: any[]):\n      cpl.CompileDiDependencyMetadata[] {\n    let hasUnknownDeps = false;\n    let params = isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);\n    if (isBlank(params)) {\n      params = [];\n    }\n    let dependenciesMetadata: cpl.CompileDiDependencyMetadata[] = params.map((param) => {\n      let isAttribute = false;\n      let isHost = false;\n      let isSelf = false;\n      let isSkipSelf = false;\n      let isOptional = false;\n      let query: QueryMetadata = null;\n      let viewQuery: ViewQueryMetadata = null;\n      var token: any = null;\n      if (isArray(param)) {\n        (<any[]>param).forEach((paramEntry) => {\n          if (paramEntry instanceof HostMetadata) {\n            isHost = true;\n          } else if (paramEntry instanceof SelfMetadata) {\n            isSelf = true;\n          } else if (paramEntry instanceof SkipSelfMetadata) {\n            isSkipSelf = true;\n          } else if (paramEntry instanceof OptionalMetadata) {\n            isOptional = true;\n          } else if (paramEntry instanceof AttributeMetadata) {\n            isAttribute = true;\n            token = paramEntry.attributeName;\n          } else if (paramEntry instanceof QueryMetadata) {\n            if (paramEntry.isViewQuery) {\n              viewQuery = paramEntry;\n            } else {\n              query = paramEntry;\n            }\n          } else if (paramEntry instanceof InjectMetadata) {\n            token = paramEntry.token;\n          } else if (isValidType(paramEntry) && isBlank(token)) {\n            token = paramEntry;\n          }\n        });\n      } else {\n        token = param;\n      }\n      if (isBlank(token)) {\n        hasUnknownDeps = true;\n        return null;\n      }\n      return new cpl.CompileDiDependencyMetadata({\n        isAttribute: isAttribute,\n        isHost: isHost,\n        isSelf: isSelf,\n        isSkipSelf: isSkipSelf,\n        isOptional: isOptional,\n        query: isPresent(query) ? this.getQueryMetadata(query, null, typeOrFunc) : null,\n        viewQuery: isPresent(viewQuery) ? this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,\n        token: this.getTokenMetadata(token)\n      });\n\n    });\n\n    if (hasUnknownDeps) {\n      let depsTokens =\n          dependenciesMetadata.map((dep) => { return dep ? stringify(dep.token) : '?'; })\n              .join(', ');\n      throw new BaseException(\n          `Can't resolve all parameters for ${stringify(typeOrFunc)}: (${depsTokens}).`);\n    }\n\n    return dependenciesMetadata;\n  }\n\n  getTokenMetadata(token: any): cpl.CompileTokenMetadata {\n    token = resolveForwardRef(token);\n    var compileToken: any /** TODO #9100 */;\n    if (isString(token)) {\n      compileToken = new cpl.CompileTokenMetadata({value: token});\n    } else {\n      compileToken = new cpl.CompileTokenMetadata({\n        identifier: new cpl.CompileIdentifierMetadata({\n          runtime: token,\n          name: this.sanitizeTokenName(token),\n          moduleUrl: staticTypeModuleUrl(token)\n        })\n      });\n    }\n    return compileToken;\n  }\n\n  getProvidersMetadata(providers: any[], targetPrecompileComponents: cpl.CompileTypeMetadata[]):\n      Array<cpl.CompileProviderMetadata|cpl.CompileTypeMetadata|any[]> {\n    const compileProviders: Array<cpl.CompileProviderMetadata|cpl.CompileTypeMetadata|any[]> = [];\n    providers.forEach((provider) => {\n      provider = resolveForwardRef(provider);\n      if (isProviderLiteral(provider)) {\n        provider = createProvider(provider);\n      }\n      let compileProvider: cpl.CompileProviderMetadata|cpl.CompileTypeMetadata|any[];\n      if (isArray(provider)) {\n        compileProvider = this.getProvidersMetadata(provider, targetPrecompileComponents);\n      } else if (provider instanceof Provider) {\n        let tokenMeta = this.getTokenMetadata(provider.token);\n        if (tokenMeta.equalsTo(identifierToken(Identifiers.ANALYZE_FOR_PRECOMPILE))) {\n          targetPrecompileComponents.push(...this.getPrecompileComponentsFromProvider(provider));\n        } else {\n          compileProvider = this.getProviderMetadata(provider);\n        }\n      } else if (isValidType(provider)) {\n        compileProvider = this.getTypeMetadata(provider, staticTypeModuleUrl(provider));\n      } else {\n        throw new BaseException(\n            `Invalid provider - only instances of Provider and Type are allowed, got: ${stringify(provider)}`);\n      }\n      if (compileProvider) {\n        compileProviders.push(compileProvider);\n      }\n    });\n    return compileProviders;\n  }\n\n  getPrecompileComponentsFromProvider(provider: Provider): cpl.CompileTypeMetadata[] {\n    let components: cpl.CompileTypeMetadata[] = [];\n    let collectedIdentifiers: cpl.CompileIdentifierMetadata[] = [];\n    if (provider.useFactory || provider.useExisting || provider.useClass) {\n      throw new BaseException(`The ANALYZE_FOR_PRECOMPILE token only supports useValue!`);\n    }\n    if (!provider.multi) {\n      throw new BaseException(`The ANALYZE_FOR_PRECOMPILE token only supports 'multi = true'!`);\n    }\n    convertToCompileValue(provider.useValue, collectedIdentifiers);\n    collectedIdentifiers.forEach((identifier) => {\n      let dirMeta = this.getDirectiveMetadata(identifier.runtime, false);\n      if (dirMeta) {\n        components.push(dirMeta.type);\n      }\n    });\n    return components;\n  }\n\n  getProviderMetadata(provider: Provider): cpl.CompileProviderMetadata {\n    var compileDeps: cpl.CompileDiDependencyMetadata[];\n    var compileTypeMetadata: cpl.CompileTypeMetadata = null;\n    var compileFactoryMetadata: cpl.CompileFactoryMetadata = null;\n\n    if (isPresent(provider.useClass)) {\n      compileTypeMetadata = this.getTypeMetadata(\n          provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);\n      compileDeps = compileTypeMetadata.diDeps;\n    } else if (isPresent(provider.useFactory)) {\n      compileFactoryMetadata = this.getFactoryMetadata(\n          provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);\n      compileDeps = compileFactoryMetadata.diDeps;\n    }\n\n    return new cpl.CompileProviderMetadata({\n      token: this.getTokenMetadata(provider.token),\n      useClass: compileTypeMetadata,\n      useValue: convertToCompileValue(provider.useValue, []),\n      useFactory: compileFactoryMetadata,\n      useExisting: isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) :\n                                                     null,\n      deps: compileDeps,\n      multi: provider.multi\n    });\n  }\n\n  getQueriesMetadata(\n      queries: {[key: string]: QueryMetadata}, isViewQuery: boolean,\n      directiveType: Type): cpl.CompileQueryMetadata[] {\n    var res: cpl.CompileQueryMetadata[] = [];\n    StringMapWrapper.forEach(queries, (query: QueryMetadata, propertyName: string) => {\n      if (query.isViewQuery === isViewQuery) {\n        res.push(this.getQueryMetadata(query, propertyName, directiveType));\n      }\n    });\n    return res;\n  }\n\n  getQueryMetadata(q: QueryMetadata, propertyName: string, typeOrFunc: Type|Function):\n      cpl.CompileQueryMetadata {\n    var selectors: cpl.CompileTokenMetadata[];\n    if (q.isVarBindingQuery) {\n      selectors = q.varBindings.map(varName => this.getTokenMetadata(varName));\n    } else {\n      if (!isPresent(q.selector)) {\n        throw new BaseException(\n            `Can't construct a query for the property \"${propertyName}\" of \"${stringify(typeOrFunc)}\" since the query selector wasn't defined.`);\n      }\n      selectors = [this.getTokenMetadata(q.selector)];\n    }\n    return new cpl.CompileQueryMetadata({\n      selectors: selectors,\n      first: q.first,\n      descendants: q.descendants,\n      propertyName: propertyName,\n      read: isPresent(q.read) ? this.getTokenMetadata(q.read) : null\n    });\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: NgModuleResolver, },\n{type: DirectiveResolver, },\n{type: PipeResolver, },\n{type: ViewResolver, },\n{type: CompilerConfig, },\n{type: Console, },\n{type: ReflectorReader, },\n];\n}\n\nfunction getTransitiveModules(\n    modules: cpl.CompileNgModuleMetadata[], includeImports: boolean,\n    targetModules: cpl.CompileNgModuleMetadata[] = [],\n    visitedModules = new Set<Type>()): cpl.CompileNgModuleMetadata[] {\n  modules.forEach((ngModule) => {\n    if (!visitedModules.has(ngModule.type.runtime)) {\n      visitedModules.add(ngModule.type.runtime);\n      const nestedModules = includeImports ?\n          ngModule.importedModules.concat(ngModule.exportedModules) :\n          ngModule.exportedModules;\n      getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules);\n      // Add after recursing so imported/exported modules are before the module itself.\n      // This is important for overwriting providers of imported modules!\n      targetModules.push(ngModule);\n    }\n  });\n  return targetModules;\n}\n\n\nfunction flattenArray(tree: any[], out: Array<any> = []): Array<any> {\n  if (tree) {\n    for (var i = 0; i < tree.length; i++) {\n      var item = resolveForwardRef(tree[i]);\n      if (isArray(item)) {\n        flattenArray(item, out);\n      } else {\n        out.push(item);\n      }\n    }\n  }\n  return out;\n}\n\nfunction verifyNonBlankProviders(\n    directiveType: Type, providersTree: any[], providersType: string): any[] {\n  var flat: any[] = [];\n  var errMsg: string;\n\n  flattenArray(providersTree, flat);\n  for (var i = 0; i < flat.length; i++) {\n    if (isBlank(flat[i])) {\n      errMsg = flat.map(provider => isBlank(provider) ? '?' : stringify(provider)).join(', ');\n      throw new BaseException(\n          `One or more of ${providersType} for \"${stringify(directiveType)}\" were not defined: [${errMsg}].`);\n    }\n  }\n\n  return providersTree;\n}\n\nfunction isValidType(value: any): boolean {\n  return cpl.isStaticSymbol(value) || (value instanceof Type);\n}\n\nfunction staticTypeModuleUrl(value: any): string {\n  return cpl.isStaticSymbol(value) ? value.filePath : null;\n}\n\nfunction componentModuleUrl(\n    reflector: ReflectorReader, type: any, cmpMetadata: ComponentMetadata): string {\n  if (cpl.isStaticSymbol(type)) {\n    return staticTypeModuleUrl(type);\n  }\n\n  if (isPresent(cmpMetadata.moduleId)) {\n    var moduleId = cmpMetadata.moduleId;\n    var scheme = getUrlScheme(moduleId);\n    return isPresent(scheme) && scheme.length > 0 ? moduleId :\n                                                    `package:${moduleId}${MODULE_SUFFIX}`;\n  }\n\n  return reflector.importUri(type);\n}\n\nfunction convertToCompileValue(\n    value: any, targetIdentifiers: cpl.CompileIdentifierMetadata[]): any {\n  return visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\n\nclass _CompileValueConverter extends ValueTransformer {\n  visitOther(value: any, targetIdentifiers: cpl.CompileIdentifierMetadata[]): any {\n    let identifier: cpl.CompileIdentifierMetadata;\n    if (cpl.isStaticSymbol(value)) {\n      identifier = new cpl.CompileIdentifierMetadata(\n          {name: value.name, moduleUrl: value.filePath, runtime: value});\n    } else {\n      identifier = new cpl.CompileIdentifierMetadata({runtime: value});\n    }\n    targetIdentifiers.push(identifier);\n    return identifier;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}